-- phpMyAdmin SQL Dump
-- version 4.1.14
-- http://www.phpmyadmin.net
--
-- Host: 127.0.0.1
-- Generation Time: Dec 10, 2014 at 09:20 AM
-- Server version: 5.6.17
-- PHP Version: 5.5.12

SET SQL_MODE = "NO_AUTO_VALUE_ON_ZERO";
SET time_zone = "+00:00";


/*!40101 SET @OLD_CHARACTER_SET_CLIENT=@@CHARACTER_SET_CLIENT */;
/*!40101 SET @OLD_CHARACTER_SET_RESULTS=@@CHARACTER_SET_RESULTS */;
/*!40101 SET @OLD_COLLATION_CONNECTION=@@COLLATION_CONNECTION */;
/*!40101 SET NAMES utf8 */;

--
-- Database: `sms`
--

-- --------------------------------------------------------

--
-- Table structure for table `groups`
--

CREATE TABLE IF NOT EXISTS `groups` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `name` varchar(255) NOT NULL,
  `comment` varchar(700) NOT NULL,
  `active` tinyint(1) NOT NULL,
  `created_at` timestamp NOT NULL,
  `updated_at` timestamp NOT NULL,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB  DEFAULT CHARSET=latin1 AUTO_INCREMENT=11 ;

--
-- Dumping data for table `groups`
--

INSERT INTO `groups` (`id`, `name`, `comment`, `active`, `created_at`, `updated_at`) VALUES
(1, 'Youth', 'okay', 0, '2014-11-30 09:02:41', '2014-12-10 04:51:53'),
(2, 'Women', 'okay', 1, '2014-12-01 05:51:08', '2014-12-01 05:51:08'),
(3, 'Men Fellowship', 'okay', 1, '2014-12-01 05:51:20', '2014-12-01 05:51:20'),
(4, 'VIWA', 'okay', 1, '2014-12-01 05:51:36', '2014-12-01 05:51:36'),
(5, 'Movers & Shakers', 'okay', 1, '2014-12-01 05:51:56', '2014-12-01 05:51:56'),
(6, 'Church Building Committee', 'okay', 0, '2014-12-01 05:52:31', '2014-12-09 10:13:00'),
(7, 'Tent Committee', 'okay', 1, '2014-12-01 05:52:47', '2014-12-01 05:52:47'),
(8, 'Ushers', 'okay', 1, '2014-12-01 05:53:17', '2014-12-01 05:53:17'),
(9, 'Welfare Committee', 'okay', 1, '2014-12-01 05:56:34', '2014-12-01 05:56:34'),
(10, 'Youth', 'ok', 1, '2014-12-10 04:52:19', '2014-12-10 04:52:19');

-- --------------------------------------------------------

--
-- Table structure for table `membergroups`
--

CREATE TABLE IF NOT EXISTS `membergroups` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `group_id` int(10) NOT NULL,
  `member_id` int(10) NOT NULL,
  `created_at` timestamp NOT NULL,
  `updated_at` timestamp NOT NULL,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB  DEFAULT CHARSET=latin1 AUTO_INCREMENT=29 ;

--
-- Dumping data for table `membergroups`
--

INSERT INTO `membergroups` (`id`, `group_id`, `member_id`, `created_at`, `updated_at`) VALUES
(1, 1, 17, '2014-12-09 09:26:47', '2014-12-09 09:26:47'),
(2, 0, 18, '2014-12-09 09:33:13', '2014-12-09 09:33:13'),
(3, 1, 2, '2014-12-09 10:32:49', '2014-12-09 10:32:49'),
(4, 1, 3, '2014-12-09 10:32:49', '2014-12-09 10:32:49'),
(5, 1, 4, '2014-12-09 10:32:49', '2014-12-09 10:32:49'),
(6, 2, 5, '2014-12-09 10:33:15', '2014-12-09 10:33:15'),
(7, 1, 2, '2014-12-10 04:43:44', '2014-12-10 04:43:44'),
(8, 1, 3, '2014-12-10 04:43:44', '2014-12-10 04:43:44'),
(9, 1, 4, '2014-12-10 04:43:44', '2014-12-10 04:43:44'),
(10, 1, 5, '2014-12-10 04:43:44', '2014-12-10 04:43:44'),
(11, 1, 6, '2014-12-10 04:43:44', '2014-12-10 04:43:44'),
(12, 1, 7, '2014-12-10 04:43:44', '2014-12-10 04:43:44'),
(13, 1, 8, '2014-12-10 04:43:44', '2014-12-10 04:43:44'),
(14, 1, 9, '2014-12-10 04:43:44', '2014-12-10 04:43:44'),
(15, 1, 10, '2014-12-10 04:43:44', '2014-12-10 04:43:44'),
(16, 1, 11, '2014-12-10 04:43:44', '2014-12-10 04:43:44'),
(17, 1, 12, '2014-12-10 04:43:44', '2014-12-10 04:43:44'),
(18, 1, 13, '2014-12-10 04:43:44', '2014-12-10 04:43:44'),
(19, 1, 14, '2014-12-10 04:43:44', '2014-12-10 04:43:44'),
(20, 1, 15, '2014-12-10 04:43:44', '2014-12-10 04:43:44'),
(21, 1, 16, '2014-12-10 04:43:44', '2014-12-10 04:43:44'),
(22, 1, 17, '2014-12-10 04:43:44', '2014-12-10 04:43:44'),
(23, 1, 18, '2014-12-10 04:43:45', '2014-12-10 04:43:45'),
(24, 10, 3, '2014-12-10 04:52:41', '2014-12-10 04:52:41'),
(25, 10, 6, '2014-12-10 04:52:41', '2014-12-10 04:52:41'),
(26, 10, 7, '2014-12-10 04:52:41', '2014-12-10 04:52:41'),
(27, 8, 2, '2014-12-10 05:11:15', '2014-12-10 05:11:15'),
(28, 8, 7, '2014-12-10 05:11:15', '2014-12-10 05:11:15');

-- --------------------------------------------------------

--
-- Table structure for table `members`
--

CREATE TABLE IF NOT EXISTS `members` (
  `id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `firstname` varchar(60) COLLATE utf8_unicode_ci NOT NULL,
  `lastname` varchar(60) COLLATE utf8_unicode_ci NOT NULL,
  `phone_number` varchar(12) COLLATE utf8_unicode_ci NOT NULL,
  `email` varchar(60) COLLATE utf8_unicode_ci NOT NULL,
  `national_id` varchar(10) COLLATE utf8_unicode_ci NOT NULL,
  `active` tinyint(1) NOT NULL,
  `created_at` timestamp NOT NULL DEFAULT '0000-00-00 00:00:00',
  `updated_at` timestamp NOT NULL DEFAULT '0000-00-00 00:00:00',
  PRIMARY KEY (`id`)
) ENGINE=InnoDB  DEFAULT CHARSET=utf8 COLLATE=utf8_unicode_ci AUTO_INCREMENT=19 ;

--
-- Dumping data for table `members`
--

INSERT INTO `members` (`id`, `firstname`, `lastname`, `phone_number`, `email`, `national_id`, `active`, `created_at`, `updated_at`) VALUES
(1, 'samuel', 'nyaga', '0714573774', 'samlinncon@gmail.com', '29704492', 0, '2014-10-25 08:43:58', '2014-11-01 10:58:16'),
(2, 'Francis', 'Githae', '0720069529', 'franc@gmail.com', '29103475', 1, '2014-10-25 08:45:34', '2014-12-10 05:10:47'),
(3, 'John', 'Maina', '0733994848', 'johnmaina@gmail.com', '28339393', 1, '2014-11-01 10:09:21', '2014-11-01 10:33:27'),
(4, 'James', 'Ngatia', '0734485583', 'jamesngatia@gmail.com', '29388477', 1, '2014-11-01 10:11:29', '2014-11-04 12:53:58'),
(5, 'Fay', 'Nekesa', '0723747777', 'faithnekesa@gamil.com', '28839444', 1, '2014-11-01 10:12:55', '2014-11-08 10:45:16'),
(6, 'lincon ', 'Maina', '0712347655', 'linc@ymail.com', '29704567', 1, '2014-11-09 12:32:48', '2014-11-09 12:33:35'),
(7, 'Samuel', 'Nyaga', '0714573774', 'samlinncon@gmail.com', '29709992', 1, '2014-11-09 12:34:12', '2014-11-09 12:34:12'),
(8, 'Staicy', 'Nyambura', '0721404928', 'stai@gmail.com', '29703346', 1, '2014-11-16 10:41:15', '2014-11-16 10:41:15'),
(9, 'Phylis', 'Muchiri', '0713456782', 'phyl@ymail.com', '21703395', 1, '2014-11-16 10:41:54', '2014-11-16 10:41:54'),
(10, 'Lincon', 'Maina', '0712344566', 'lin@ymail.com', '29704493', 1, '2014-11-20 12:26:16', '2014-11-20 12:26:16'),
(11, 'Hannah', 'muthoni', '0712345660', 'han@ymail.com', '29704429', 1, '2014-11-20 12:26:46', '2014-11-20 12:26:46'),
(12, 'Peter', 'Mathenge', '0712344665', 'peter@gmail.com', '29703384', 1, '2014-11-20 12:27:20', '2014-11-20 12:27:20'),
(13, 'Patrick', 'Njagi', '0712345600', 'pato@gmail.com', '29607721', 1, '2013-11-25 08:00:09', '2013-11-25 08:00:09'),
(14, 'joe', 'cutter', '0712084966', 'cjnjenga@gmail.com', '29460577', 1, '2014-11-30 14:35:50', '2014-11-30 14:35:50'),
(15, 'lincon', 'band', '071457983', 'lincs@gmail.com', '28234567', 1, '2014-12-09 09:21:41', '2014-12-09 09:21:41'),
(16, 'Agnes', 'muthoni', '0710345971', 'agnes@yahoo.com', '21345829', 1, '2014-12-09 09:26:09', '2014-12-09 09:26:09'),
(17, 'Agnes', 'muthoni', '0710345971', 'agnes@yahoo.com', '21345829', 1, '2014-12-09 09:26:47', '2014-12-09 09:26:47'),
(18, 'Hamman', 'Maina', '0716789124', 'hamman@gmail.com', '29124568', 1, '2014-12-09 09:33:13', '2014-12-09 09:33:13');

-- --------------------------------------------------------

--
-- Table structure for table `messages`
--

CREATE TABLE IF NOT EXISTS `messages` (
  `id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `member_id` int(11) NOT NULL,
  `message` text COLLATE utf8_unicode_ci NOT NULL,
  `cost` decimal(10,2) NOT NULL,
  `created_at` timestamp NOT NULL DEFAULT '0000-00-00 00:00:00',
  `updated_at` timestamp NOT NULL DEFAULT '0000-00-00 00:00:00',
  `phone_number` varchar(12) COLLATE utf8_unicode_ci NOT NULL,
  `date` date NOT NULL,
  `active` tinyint(1) NOT NULL DEFAULT '1',
  PRIMARY KEY (`id`)
) ENGINE=InnoDB  DEFAULT CHARSET=utf8 COLLATE=utf8_unicode_ci AUTO_INCREMENT=79 ;

--
-- Dumping data for table `messages`
--

INSERT INTO `messages` (`id`, `member_id`, `message`, `cost`, `created_at`, `updated_at`, `phone_number`, `date`, `active`) VALUES
(1, 0, 'ddsf', '0.00', '2014-10-25 10:18:33', '2014-11-01 10:58:59', 'esfsdf', '0000-00-00', 0),
(2, 0, 'Haloo samlinncon.this is testing.', '0.00', '2014-10-26 07:19:48', '2014-11-16 06:32:25', '0714573774', '0000-00-00', 0),
(3, 0, 'Haloo.testing ventisms', '0.00', '2014-10-26 07:44:50', '2014-11-16 06:32:37', '0714573774', '0000-00-00', 0),
(4, 0, 'Haloo.testing ventisms', '0.00', '2014-10-26 07:44:53', '2014-11-16 06:32:51', '0720069529', '0000-00-00', 0),
(5, 0, 'Testing', '0.00', '2014-10-26 11:02:48', '2014-11-01 10:59:44', '0714573774', '0000-00-00', 0),
(6, 0, 'Message x', '0.00', '2014-10-26 11:19:31', '2014-11-16 06:29:55', '0728288282', '0000-00-00', 0),
(7, 0, 'Message x', '0.00', '2014-10-26 11:19:31', '2014-11-16 06:30:41', '0738473633', '0000-00-00', 0),
(8, 0, 'Message x', '0.00', '2014-10-26 11:19:31', '2014-11-16 06:30:50', '254714374622', '0000-00-00', 0),
(9, 0, 'Message y', '0.00', '2014-10-26 11:22:06', '2014-11-16 06:31:01', '0720069529', '0000-00-00', 0),
(10, 0, 'message z', '0.00', '2014-10-26 11:32:21', '2014-11-16 06:31:10', '0720069529', '0000-00-00', 0),
(11, 0, 'message z', '0.00', '2014-10-26 11:32:28', '2014-11-16 06:29:31', '254714573774', '0000-00-00', 0),
(12, 0, 'messate test 123', '0.00', '2014-10-26 12:44:17', '2014-11-16 06:31:39', '0714573774', '0000-00-00', 0),
(13, 0, 'trail message', '0.00', '2014-10-26 12:45:39', '2014-11-16 06:31:49', '0714573774', '0000-00-00', 0),
(14, 0, 'trail message', '0.00', '2014-10-26 12:45:39', '2014-11-16 06:31:58', '0720069529', '0000-00-00', 0),
(15, 1, 'test233 ie ie', '0.00', '2014-10-26 12:47:29', '2014-11-08 09:53:30', '0714573774', '0000-00-00', 0),
(16, 2, 'test233 ie ie', '0.00', '2014-10-26 12:47:29', '2014-11-16 06:30:28', '0720069529', '0000-00-00', 0),
(18, 0, 'halooooo new day', '0.00', '2014-10-29 13:06:04', '2014-11-16 06:33:00', '0714573774', '0000-00-00', 0),
(19, 0, 'halooooo new day', '0.00', '2014-10-29 13:08:19', '2014-11-16 06:33:09', '0714573774', '0000-00-00', 0),
(20, 0, 'halooooo new day', '0.00', '2014-10-29 13:10:48', '2014-11-16 06:33:18', '0714573774', '0000-00-00', 0),
(21, 0, 'halooooo new day', '0.00', '2014-10-29 13:13:07', '2014-11-16 06:33:29', '0714573774', '0000-00-00', 0),
(22, 0, 'halooooo new day', '0.00', '2014-10-29 13:15:10', '2014-11-16 06:33:42', '0714573774', '0000-00-00', 0),
(23, 0, 'halooooo new day', '0.00', '2014-10-29 13:16:40', '2014-11-16 06:33:51', '0714573774', '0000-00-00', 0),
(24, 0, 'halooooo new day dfsdfdsf', '0.00', '2014-10-29 13:26:30', '2014-11-16 06:33:59', '0714573774', '2014-10-29', 0),
(25, 0, 'halooooo new day dfsdfdsf', '0.00', '2014-10-29 13:27:15', '2014-11-16 06:29:03', '0714573774', '2014-10-29', 0),
(26, 0, 'zxczc', '0.00', '2014-11-04 12:05:17', '2014-11-16 06:29:42', '0714573774', '2014-11-04', 0),
(27, 0, 'zxczc', '0.00', '2014-11-04 12:05:51', '2014-11-16 06:29:37', '0714573774', '2014-11-04', 0),
(28, 0, 'zxczczddc', '0.00', '2014-11-04 12:05:57', '2014-11-04 12:53:46', '0714573774', '2014-11-04', 0),
(29, 0, 'zxcc', '0.00', '2014-11-04 12:06:25', '2014-11-04 12:53:22', '0714573774', '2014-11-04', 0),
(30, 1, 'cd wamp/www/name of folder\r\n\r\n\r\nlatest:https://gist.github.com/anchetaWern/4223764\r\n\r\n\r\nhttp://code.tutsplus.com/tutorials/authentication-with-laravel-4--net-35593\r\n\r\nhttps://leanpub.com/laravel4cookbook\r\n\r\nhttps://medium.com/laravel-4/laravel-4-e-commerce-c5afca925f28\r\n\r\nthree.laravel.com\r\nhttp://basemin.com/docs/database/migrations\r\nlaravel recipe\r\n\r\nhttp://www.bogotobogo.com/php/php_laravel4_framework_install_on_Windows_laravel.phar.php\r\nhttps://www.youtube.com/watch?v=aJNKc7GWiAI\r\nhttp://code.tutsplus.com/tutorials/building-web-applications-from-scratch-with-laravel--net-25517\r\nhttps://courses.tutsplus.com/courses/laravel-3-essentials/lessons/passing-variables-to-views\r\n\r\n\r\nnewsletter\r\nhttp://stackoverflow.com/questions/20021630/weekly-email-newsletter-in-laravel-4\r\nhttp://culttt.com/2014/03/10/using-events-laravel-4/\r\nhttp://laravel-recipes.com/categories/21\r\n\r\nhttp://books.google.co.ke/books?id=opxuAgAAQBAJ&pg=PT134&lpg=PT134&dq=making+the+subscribe+to+a+newsletter+using+laravel&source=bl&ots=xw91AZ165s&sig=tdc2myk6nl08M2v-PxQ1ww80mzQ&hl=en&sa=X&ei=1y3jU7D_EOma1AWZ1IHQCg&redir_esc=y#v=onepage&q=making%20the%20subscribe%20to%20a%20newsletter%20using%20laravel&f=false', '16.00', '2014-11-04 12:38:00', '2014-11-04 12:53:05', '0714573774', '0000-00-00', 0),
(31, 2, 'cd wamp/www/name of folder\r\n\r\n\r\nlatest:https://gist.github.com/anchetaWern/4223764\r\n\r\n\r\nhttp://code.tutsplus.com/tutorials/authentication-with-laravel-4--net-35593\r\n\r\nhttps://leanpub.com/laravel4cookbook\r\n\r\nhttps://medium.com/laravel-4/laravel-4-e-commerce-c5afca925f28\r\n\r\nthree.laravel.com\r\nhttp://basemin.com/docs/database/migrations\r\nlaravel recipe\r\n\r\nhttp://www.bogotobogo.com/php/php_laravel4_framework_install_on_Windows_laravel.phar.php\r\nhttps://www.youtube.com/watch?v=aJNKc7GWiAI\r\nhttp://code.tutsplus.com/tutorials/building-web-applications-from-scratch-with-laravel--net-25517\r\nhttps://courses.tutsplus.com/courses/laravel-3-essentials/lessons/passing-variables-to-views\r\n\r\n\r\nnewsletter\r\nhttp://stackoverflow.com/questions/20021630/weekly-email-newsletter-in-laravel-4\r\nhttp://culttt.com/2014/03/10/using-events-laravel-4/\r\nhttp://laravel-recipes.com/categories/21\r\n\r\nhttp://books.google.co.ke/books?id=opxuAgAAQBAJ&pg=PT134&lpg=PT134&dq=making+the+subscribe+to+a+newsletter+using+laravel&source=bl&ots=xw91AZ165s&sig=tdc2myk6nl08M2v-PxQ1ww80mzQ&hl=en&sa=X&ei=1y3jU7D_EOma1AWZ1IHQCg&redir_esc=y#v=onepage&q=making%20the%20subscribe%20to%20a%20newsletter%20using%20laravel&f=false', '16.00', '2014-11-04 12:38:01', '2014-11-04 12:55:28', '0720069529', '0000-00-00', 0),
(32, 3, 'cd wamp/www/name of folder\r\n\r\n\r\nlatest:https://gist.github.com/anchetaWern/4223764\r\n\r\n\r\nhttp://code.tutsplus.com/tutorials/authentication-with-laravel-4--net-35593\r\n\r\nhttps://leanpub.com/laravel4cookbook\r\n\r\nhttps://medium.com/laravel-4/laravel-4-e-commerce-c5afca925f28\r\n\r\nthree.laravel.com\r\nhttp://basemin.com/docs/database/migrations\r\nlaravel recipe\r\n\r\nhttp://www.bogotobogo.com/php/php_laravel4_framework_install_on_Windows_laravel.phar.php\r\nhttps://www.youtube.com/watch?v=aJNKc7GWiAI\r\nhttp://code.tutsplus.com/tutorials/building-web-applications-from-scratch-with-laravel--net-25517\r\nhttps://courses.tutsplus.com/courses/laravel-3-essentials/lessons/passing-variables-to-views\r\n\r\n\r\nnewsletter\r\nhttp://stackoverflow.com/questions/20021630/weekly-email-newsletter-in-laravel-4\r\nhttp://culttt.com/2014/03/10/using-events-laravel-4/\r\nhttp://laravel-recipes.com/categories/21\r\n\r\nhttp://books.google.co.ke/books?id=opxuAgAAQBAJ&pg=PT134&lpg=PT134&dq=making+the+subscribe+to+a+newsletter+using+laravel&source=bl&ots=xw91AZ165s&sig=tdc2myk6nl08M2v-PxQ1ww80mzQ&hl=en&sa=X&ei=1y3jU7D_EOma1AWZ1IHQCg&redir_esc=y#v=onepage&q=making%20the%20subscribe%20to%20a%20newsletter%20using%20laravel&f=false', '16.00', '2014-11-04 12:38:01', '2014-11-09 12:34:43', '0733994848', '0000-00-00', 0),
(33, 4, 'cd wamp/www/name of folder\r\n\r\n\r\nlatest:https://gist.github.com/anchetaWern/4223764\r\n\r\n\r\nhttp://code.tutsplus.com/tutorials/authentication-with-laravel-4--net-35593\r\n\r\nhttps://leanpub.com/laravel4cookbook\r\n\r\nhttps://medium.com/laravel-4/laravel-4-e-commerce-c5afca925f28\r\n\r\nthree.laravel.com\r\nhttp://basemin.com/docs/database/migrations\r\nlaravel recipe\r\n\r\nhttp://www.bogotobogo.com/php/php_laravel4_framework_install_on_Windows_laravel.phar.php\r\nhttps://www.youtube.com/watch?v=aJNKc7GWiAI\r\nhttp://code.tutsplus.com/tutorials/building-web-applications-from-scratch-with-laravel--net-25517\r\nhttps://courses.tutsplus.com/courses/laravel-3-essentials/lessons/passing-variables-to-views\r\n\r\n\r\nnewsletter\r\nhttp://stackoverflow.com/questions/20021630/weekly-email-newsletter-in-laravel-4\r\nhttp://culttt.com/2014/03/10/using-events-laravel-4/\r\nhttp://laravel-recipes.com/categories/21\r\n\r\nhttp://books.google.co.ke/books?id=opxuAgAAQBAJ&pg=PT134&lpg=PT134&dq=making+the+subscribe+to+a+newsletter+using+laravel&source=bl&ots=xw91AZ165s&sig=tdc2myk6nl08M2v-PxQ1ww80mzQ&hl=en&sa=X&ei=1y3jU7D_EOma1AWZ1IHQCg&redir_esc=y#v=onepage&q=making%20the%20subscribe%20to%20a%20newsletter%20using%20laravel&f=false', '16.00', '2014-11-04 12:38:01', '2014-11-10 12:02:07', '0734485583', '0000-00-00', 0),
(34, 5, 'cd wamp/www/name of folder\r\n\r\n\r\nlatest:https://gist.github.com/anchetaWern/4223764\r\n\r\n\r\nhttp://code.tutsplus.com/tutorials/authentication-with-laravel-4--net-35593\r\n\r\nhttps://leanpub.com/laravel4cookbook\r\n\r\nhttps://medium.com/laravel-4/laravel-4-e-commerce-c5afca925f28\r\n\r\nthree.laravel.com\r\nhttp://basemin.com/docs/database/migrations\r\nlaravel recipe\r\n\r\nhttp://www.bogotobogo.com/php/php_laravel4_framework_install_on_Windows_laravel.phar.php\r\nhttps://www.youtube.com/watch?v=aJNKc7GWiAI\r\nhttp://code.tutsplus.com/tutorials/building-web-applications-from-scratch-with-laravel--net-25517\r\nhttps://courses.tutsplus.com/courses/laravel-3-essentials/lessons/passing-variables-to-views\r\n\r\n\r\nnewsletter\r\nhttp://stackoverflow.com/questions/20021630/weekly-email-newsletter-in-laravel-4\r\nhttp://culttt.com/2014/03/10/using-events-laravel-4/\r\nhttp://laravel-recipes.com/categories/21\r\n\r\nhttp://books.google.co.ke/books?id=opxuAgAAQBAJ&pg=PT134&lpg=PT134&dq=making+the+subscribe+to+a+newsletter+using+laravel&source=bl&ots=xw91AZ165s&sig=tdc2myk6nl08M2v-PxQ1ww80mzQ&hl=en&sa=X&ei=1y3jU7D_EOma1AWZ1IHQCg&redir_esc=y#v=onepage&q=making%20the%20subscribe%20to%20a%20newsletter%20using%20laravel&f=false', '16.00', '2014-11-04 12:38:01', '2014-11-10 12:01:59', '0723747777', '0000-00-00', 0),
(35, 2, 'hhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhh', '2.00', '2014-11-09 05:31:17', '2014-11-27 12:45:35', '0720069529', '0000-00-00', 0),
(36, 3, 'hhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhh', '2.00', '2014-11-09 05:31:17', '2014-11-27 12:49:55', '0733994848', '0000-00-00', 0),
(37, 0, 'haloo waorld', '2.00', '2014-11-09 06:25:24', '2014-11-09 06:25:24', '0714573774', '2014-11-09', 1),
(38, 2, 'haloo ventisms', '2.00', '2014-11-09 06:29:09', '2014-11-09 06:29:09', '0720069529', '2014-11-09', 1),
(39, 3, 'haloo ventisms', '2.00', '2014-11-09 06:29:09', '2014-11-09 06:29:09', '0733994848', '2014-11-09', 1),
(40, 0, 'hhhhh', '2.00', '2014-11-09 06:41:11', '2014-11-09 06:41:11', '070000', '2014-11-09', 1),
(41, 0, 'hhhhh', '2.00', '2014-11-09 06:41:11', '2014-11-09 06:41:11', '078888', '2014-11-09', 1),
(42, 2, 'haloo ventismshhhhhhh', '2.00', '2014-11-09 06:44:34', '2014-11-09 06:44:34', '0720069529', '2014-11-09', 1),
(43, 3, 'haloo ventismshhhhhhh', '2.00', '2014-11-09 06:44:34', '2014-11-09 06:44:34', '0733994848', '2014-11-09', 1),
(44, 2, 'haloo ventismshhhhhhh', '2.00', '2014-11-09 06:45:14', '2014-11-09 06:45:14', '0720069529', '2014-11-09', 1),
(45, 3, 'haloo ventismshhhhhhh', '2.00', '2014-11-09 06:45:14', '2014-11-09 06:45:14', '0733994848', '2014-11-09', 1),
(46, 0, 'zxcdcdsc', '2.00', '2014-11-09 06:46:30', '2014-11-09 06:46:30', '0720069529', '2014-11-09', 1),
(47, 0, 'zxcdcdsc', '2.00', '2014-11-09 06:46:30', '2014-11-09 06:46:30', '254714573774', '2014-11-09', 1),
(48, 2, 'xcvsdvdsdsd', '2.00', '2014-11-09 06:46:57', '2014-11-09 06:46:57', '0720069529', '2014-11-09', 1),
(49, 3, 'xcvsdvdsdsd', '2.00', '2014-11-09 06:46:57', '2014-11-27 12:45:30', '0733994848', '2014-11-09', 0),
(50, 0, 'haloooo', '2.00', '2014-11-09 06:49:45', '2014-11-09 06:49:45', '0714573774', '2014-11-09', 1);
INSERT INTO `messages` (`id`, `member_id`, `message`, `cost`, `created_at`, `updated_at`, `phone_number`, `date`, `active`) VALUES
(51, 0, 'haloooo<?php\r\ninclude_once(app_path().''/includes/AfricasTalkingGateway.php'');\r\n\r\n\r\n\r\nclass MessageController extends BaseController {\r\n\r\n	/*\r\n	|--------------------------------------------------------------------------\r\n	| Default Home Controller\r\n	|--------------------------------------------------------------------------\r\n	|\r\n	| You may wish to use controllers instead of, or in addition to, Closure\r\n	| based routes. That''s great! Here is an example controller method to\r\n	| get you started. To route to this controller, just add the route:\r\n	|\r\n	|	Route::get(''/'', ''HomeController@showWelcome'');\r\n	|\r\n	*/\r\n\r\n	public function SendSms($my_recipient,$my_message)\r\n		{\r\n			// Specify your login credentials\r\n			$username   = "adback";\r\n			$apikey     = "c933c719506a6838d4ceac95c9411b27331f34a117ca80473529d967ff9c46b0";\r\n			\r\n			// Specify the numbers that you want to send to in a comma-separated list\r\n			// Please ensure you include the country code (+254 for Kenya in this case)\r\n			$recipients = $my_recipient;\r\n			\r\n			// And of course we want our recipients to know what we really do\r\n			$message    = $my_message;\r\n			\r\n			// Create a new instance of our awesome gateway class\r\n			$gateway    = new AfricasTalkingGateway($username, $apikey);\r\n			\r\n			// Any gateway errors will be captured by our custom Exception class below, \r\n			// so wrap the call in a try-catch block\r\n			try \r\n			{ \r\n			  // Thats it, hit send and we''ll take care of the rest. \r\n			  $results = $gateway->sendMessage($recipients, $message);\r\n			  if($results) {\r\n			    return TRUE;\r\n			  }\r\n			  else {\r\n				  return FALSE;\r\n			  }\r\n			}\r\n			catch ( AfricasTalkingGatewayException $e )\r\n			{\r\n			  return FALSE;\r\n			}\r\n			\r\n			// DONE!!! \r\n		}\r\n	\r\n	public function postSendMessage()\r\n	{\r\n		//verify the user input and create account\r\n		$validator = Validator::make(Input::all(),array(\r\n				''Phone_Number''				=>''required'',\r\n				''Message''				=>''required'',\r\n\r\n		));\r\n		\r\n		if($validator->fails())\r\n		{\r\n			return Redirect::route(''sendmessage-get'')\r\n			->withErrors($validator)\r\n			->withInput();\r\n		}\r\n		else {\r\n			$phonenumbers = Input::get(''Phone_Number'');\r\n			$message = Input::get(''Message'');\r\n			\r\n			\r\n			//remove white spaces from the numbers\r\n			$compressedphonenumbers = str_replace('' '','''', $phonenumbers);\r\n\r\n			//get the specific phone numbers from the array\r\n 			$phonenumbers_array = explode('','', $compressedphonenumbers);\r\n\r\n 			$cost_incurred = sizeof($phonenumbers_array) * $this->cost($message);\r\n\r\n\r\n\r\n 			$owner = Owner::where(''id'',''='',1)->first();\r\n			$ownerid = $owner->owner_id;\r\n\r\n			$balance = DB::select(''select balance from clients.balance where id= ?'', array($ownerid));\r\n			$current_balance = end($balance)->balance;\r\n\r\n			if($cost_incurred<=$current_balance)\r\n			{\r\n\r\n 			$allsent = FALSE;\r\n 			$messagesent = FALSE;\r\n 			$todaysdate 	  = date("Y-m-d");\r\n\r\n\r\n\r\n 			foreach($phonenumbers_array as &$phonenumber)\r\n 			{\r\n			 //register the new user\r\n			 $user		= Message::create(array(\r\n			 				''phone_number''		=>$phonenumber,\r\n			 				''message''		=>$message,\r\n			 				''date''			=>$todaysdate,\r\n			 				''cost''			=>$this->cost($message),\r\n			 				''active''        =>TRUE\r\n			 ));\r\n\r\n			 $phone_number_send = ''+254''.substr($phonenumber, strlen($phonenumber)-9);\r\n\r\n			// $messagesent = $this->SendSms($phone_number_send, $message);\r\n			 \r\n			if($messagesent==TRUE)\r\n			 {\r\n				$allsent = TRUE;\r\n			 }\r\n			 \r\n			}\r\n\r\n			if($allsent==TRUE)\r\n			 {\r\n			 	$newbalance = $current_balance - $cost_incurred;\r\n\r\n			 	return $newbalance;\r\n\r\n			 	$updatebalance = DB::update(''update clients.balance set balance= ? where id= ?'', array($newbalance,$ownerid));\r\n\r\n				return Redirect::route(''sendmessage-get'')\r\n					->with(''global'',''Success! Your message has been sent'');	\r\n			 }\r\n			}\r\n			else\r\n			{\r\n				return Redirect::route(''sendmessage-get'')\r\n					->with(''global'',''Sorry, your current balance is insufficient.'')->withInput();\r\n			}\r\n		}\r\n		\r\n	}\r\n\r\n	public function postSendMessageToAll()\r\n	{\r\n		//verify the user input and create account\r\n		$validator = Validator::make(Input::all(),array(\r\n			''Message''				=>''required'',\r\n\r\n		));\r\n		\r\n		if($validator->fails())\r\n		{\r\n			return Redirect::route(''sendmessagetoall-get'')\r\n			->withErrors($validator)\r\n			->withInput();\r\n		}\r\n		else {\r\n			\r\n			$message = Input::get(''Message'');\r\n\r\n			 \r\n			//get the members information\r\n			$members = Member::where(''active'',''='',TRUE)->get();\r\n\r\n			$cost_incurred = $members->count() * $this->cost($message);\r\n			$owner = Owner::where(''id'',''='',1)->first();\r\n			$ownerid = $owner->owner_id;\r\n\r\n			$balance = DB::select(''select balance from clients.balance where id= ?'', array($ownerid));\r\n			$current_balance = end($balance)->balance;\r\n\r\n			if($cost_incurred<=$current_balance)\r\n			{\r\n			\r\n			$sent = FALSE;\r\n			$todaysdate 	  = date("Y-m-d");\r\n			\r\n			foreach($members as $member){\r\n				 //register the new user\r\n			 $user		= Message::create(array(\r\n			 				''phone_number''		=>$member->phone_number,\r\n			 				''message''			=>$message,\r\n			 				''member_id''			=>$member->id,\r\n			 				''cost''				=>$this->cost($message),\r\n			 				''date''			    =>$todaysdate,\r\n			 				''active''            =>TRUE\r\n			 ));\r\n\r\n\r\n			   $phone_number_send = ''+254''.substr($member->phone_number, strlen($member->phone_number)-9);\r\n			  // $sent = $this->SendSms($phone_number_send, $message);\r\n			}\r\n			\r\n			 \r\n			 if($sent==TRUE)\r\n			 {\r\n				return Redirect::route(''sendmessagetoall-get'')\r\n					->with(''global'',''Success! Your message has been sent'');	\r\n			 }\r\n			}\r\n			else\r\n			{\r\n				return Redirect::route(''sendmessagetoall-get'')\r\n					->with(''global'',''Sorry, your current balance is insufficient.'')->withInput();\r\n			}\r\n			\r\n		}\r\n		\r\n	}\r\n	\r\n	\r\n	public function postDeleteMessage()\r\n	{\r\n		\r\n		\r\n			$messageId  = Input::get(''messageID'');\r\n			\r\n						\r\n 			$message_delete = Message::where(''id'',''='',$messageId)->first();\r\n 			$message_delete->active = FALSE;\r\n\r\n 			$message_delete = $message_delete->save();\r\n			 \r\n			 if($message_delete)\r\n			 {\r\n				return Redirect::route(''sentmessage-get'')\r\n					->with(''global'',''Success! Message information has been deleted successfully.'');	\r\n			 }	\r\n	}\r\n		\r\n		public function cost($textmessage){\r\n             return ceil(strlen($textmessage)/160)*2;\r\n		}\r\n}\r\n<?php\r\ninclude_once(app_path().''/includes/AfricasTalkingGateway.php'');\r\n\r\n\r\n\r\nclass MessageController extends BaseController {\r\n\r\n	/*\r\n	|--------------------------------------------------------------------------\r\n	| Default Home Controller\r\n	|--------------------------------------------------------------------------\r\n	|\r\n	| You may wish to use controllers instead of, or in addition to, Closure\r\n	| based routes. That''s great! Here is an example controller method to\r\n	| get you started. To route to this controller, just add the route:\r\n	|\r\n	|	Route::get(''/'', ''HomeController@showWelcome'');\r\n	|\r\n	*/\r\n\r\n	public function SendSms($my_recipient,$my_message)\r\n		{\r\n			// Specify your login credentials\r\n			$username   = "adback";\r\n			$apikey     = "c933c719506a6838d4ceac95c9411b27331f34a117ca80473529d967ff9c46b0";\r\n			\r\n			// Specify the numbers that you want to send to in a comma-separated list\r\n			// Please ensure you include the country code (+254 for Kenya in this case)\r\n			$recipients = $my_recipient;\r\n			\r\n			// And of course we want our recipients to know what we really do\r\n			$message    = $my_message;\r\n			\r\n			// Create a new instance of our awesome gateway class\r\n			$gateway    = new AfricasTalkingGateway($username, $apikey);\r\n			\r\n			// Any gateway errors will be captured by our custom Exception class below, \r\n			// so wrap the call in a try-catch block\r\n			try \r\n			{ \r\n			  // Thats it, hit send and we''ll take care of the rest. \r\n			  $results = $gateway->sendMessage($recipients, $message);\r\n			  if($results) {\r\n			    return TRUE;\r\n			  }\r\n			  else {\r\n				  return FALSE;\r\n			  }\r\n			}\r\n			catch ( AfricasTalkingGatewayException $e )\r\n			{\r\n			  return FALSE;\r\n			}\r\n			\r\n			// DONE!!! \r\n		}\r\n	\r\n	public function postSendMessage()\r\n	{\r\n		//verify the user input and create account\r\n		$validator = Validator::make(Input::all(),array(\r\n				''Phone_Number''				=>''required'',\r\n				''Message''				=>''required'',\r\n\r\n		));\r\n		\r\n		if($validator->fails())\r\n		{\r\n			return Redirect::route(''sendmessage-get'')\r\n			->withErrors($validator)\r\n			->withInput();\r\n		}\r\n		else {\r\n			$phonenumbers = Input::get(''Phone_Number'');\r\n			$message = Input::get(''Message'');\r\n			\r\n			\r\n			//remove white spaces from the numbers\r\n			$compressedphonenumbers = str_replace('' '','''', $phonenumbers);\r\n\r\n			//get the specific phone numbers from the array\r\n 			$phonenumbers_array = explode('','', $compressedphonenumbers);\r\n\r\n 			$cost_incurred = sizeof($phonenumbers_array) * $this->cost($message);\r\n\r\n\r\n\r\n 			$owner = Owner::where(''id'',''='',1)->first();\r\n			$ownerid = $owner->owner_id;\r\n\r\n			$balance = DB::select(''select balance from clients.balance where id= ?'', array($ownerid));\r\n			$current_balance = end($balance)->balance;\r\n\r\n			if($cost_incurred<=$current_balance)\r\n			{\r\n\r\n 			$allsent = FALSE;\r\n 			$messagesent = FALSE;\r\n 			$todaysdate 	  = date("Y-m-d");\r\n\r\n\r\n\r\n 			foreach($phonenumbers_array as &$phonenumber)\r\n 			{\r\n			 //register the new user\r\n			 $user		= Message::create(array(\r\n			 				''phone_number''		=>$phonenumber,\r\n			 				''message''		=>$message,\r\n			 				''date''			=>$todaysdate,\r\n			 				''cost''			=>$this->cost($message),\r\n			 				''active''        =>TRUE\r\n			 ));\r\n\r\n			 $phone_number_send = ''+254''.substr($phonenumber, strlen($phonenumber)-9);\r\n\r\n			// $messagesent = $this->SendSms($phone_number_send, $message);\r\n			 \r\n			if($messagesent==TRUE)\r\n			 {\r\n				$allsent = TRUE;\r\n			 }\r\n			 \r\n			}\r\n\r\n			if($allsent==TRUE)\r\n			 {\r\n			 	$newbalance = $current_balance - $cost_incurred;\r\n\r\n			 	return $newbalance;\r\n\r\n			 	$updatebalance = DB::update(''update clients.balance set balance= ? where id= ?'', array($newbalance,$ownerid));\r\n\r\n				return Redirect::route(''sendmessage-get'')\r\n					->with(''global'',''Success! Your message has been sent'');	\r\n			 }\r\n			}\r\n			else\r\n			{\r\n				return Redirect::route(''sendmessage-get'')\r\n					->with(''global'',''Sorry, your current balance is insufficient.'')->withInput();\r\n			}\r\n		}\r\n		\r\n	}\r\n\r\n	public function postSendMessageToAll()\r\n	{\r\n		//verify the user input and create account\r\n		$validator = Validator::make(Input::all(),array(\r\n			''Message''				=>''required'',\r\n\r\n		));\r\n		\r\n		if($validator->fails())\r\n		{\r\n			return Redirect::route(''sendmessagetoall-get'')\r\n			->withErrors($validator)\r\n			->withInput();\r\n		}\r\n		else {\r\n			\r\n			$message = Input::get(''Message'');\r\n\r\n			 \r\n			//get the members information\r\n			$members = Member::where(''active'',''='',TRUE)->get();\r\n\r\n			$cost_incurred = $members->count() * $this->cost($message);\r\n			$owner = Owner::where(''id'',''='',1)->first();\r\n			$ownerid = $owner->owner_id;\r\n\r\n			$balance = DB::select(''select balance from clients.balance where id= ?'', array($ownerid));\r\n			$current_balance = end($balance)->balance;\r\n\r\n			if($cost_incurred<=$current_balance)\r\n			{\r\n			\r\n			$sent = FALSE;\r\n			$todaysdate 	  = date("Y-m-d");\r\n			\r\n			foreach($members as $member){\r\n				 //register the new user\r\n			 $user		= Message::create(array(\r\n			 				''phone_number''		=>$member->phone_number,\r\n			 				''message''			=>$message,\r\n			 				''member_id''			=>$member->id,\r\n			 				''cost''				=>$this->cost($message),\r\n			 				''date''			    =>$todaysdate,\r\n			 				''active''            =>TRUE\r\n			 ));\r\n\r\n\r\n			   $phone_number_send = ''+254''.substr($member->phone_number, strlen($member->phone_number)-9);\r\n			  // $sent = $this->SendSms($phone_number_send, $message);\r\n			}\r\n			\r\n			 \r\n			 if($sent==TRUE)\r\n			 {\r\n				return Redirect::route(''sendmessagetoall-get'')\r\n					->with(''global'',''Success! Your message has been sent'');	\r\n			 }\r\n			}\r\n			else\r\n			{\r\n				return Redirect::route(''sendmessagetoall-get'')\r\n					->with(''global'',''Sorry, your current balance is insufficient.'')->withInput();\r\n			}\r\n			\r\n		}\r\n		\r\n	}\r\n	\r\n	\r\n	public function postDeleteMessage()\r\n	{\r\n		\r\n		\r\n			$messageId  = Input::get(''messageID'');\r\n			\r\n						\r\n 			$message_delete = Message::where(''id'',''='',$messageId)->first();\r\n 			$message_delete->active = FALSE;\r\n\r\n 			$message_delete = $message_delete->save();\r\n			 \r\n			 if($message_delete)\r\n			 {\r\n				return Redirect::route(''sentmessage-get'')\r\n					->with(''global'',''Success! Message information has been deleted successfully.'');	\r\n			 }	\r\n	}\r\n		\r\n		public function cost($textmessage){\r\n             return ceil(strlen($textmessage)/160)*2;\r\n		}\r\n}\r\n<?php\r\ninclude_once(app_path().''/includes/AfricasTalkingGateway.php'');\r\n\r\n\r\n\r\nclass MessageController extends BaseController {\r\n\r\n	/*\r\n	|--------------------------------------------------------------------------\r\n	| Default Home Controller\r\n	|--------------------------------------------------------------------------\r\n	|\r\n	| You may wish to use controllers instead of, or in addition to, Closure\r\n	| based routes. That''s great! Here is an example controller method to\r\n	| get you started. To route to this controller, just add the route:\r\n	|\r\n	|	Route::get(''/'', ''HomeController@showWelcome'');\r\n	|\r\n	*/\r\n\r\n	public function SendSms($my_recipient,$my_message)\r\n		{\r\n			// Specify your login credentials\r\n			$username   = "adback";\r\n			$apikey     = "c933c719506a6838d4ceac95c9411b27331f34a117ca80473529d967ff9c46b0";\r\n			\r\n			// Specify the numbers that you want to send to in a comma-separated list\r\n			// Please ensure you include the country code (+254 for Kenya in this case)\r\n			$recipients = $my_recipient;\r\n			\r\n			// And of course we want our recipients to know what we really do\r\n			$message    = $my_message;\r\n			\r\n			// Create a new instance of our awesome gateway class\r\n			$gateway    = new AfricasTalkingGateway($username, $apikey);\r\n			\r\n			// Any gateway errors will be captured by our custom Exception class below, \r\n			// so wrap the call in a try-catch block\r\n			try \r\n			{ \r\n			  // Thats it, hit send and we''ll take care of the rest. \r\n			  $results = $gateway->sendMessage($recipients, $message);\r\n			  if($results) {\r\n			    return TRUE;\r\n			  }\r\n			  else {\r\n				  return FALSE;\r\n			  }\r\n			}\r\n			catch ( AfricasTalkingGatewayException $e )\r\n			{\r\n			  return FALSE;\r\n			}\r\n			\r\n			// DONE!!! \r\n		}\r\n	\r\n	public function postSendMessage()\r\n	{\r\n		//verify the user input and create account\r\n		$validator = Validator::make(Input::all(),array(\r\n				''Phone_Number''				=>''required'',\r\n				''Message''				=>''required'',\r\n\r\n		));\r\n		\r\n		if($validator->fails())\r\n		{\r\n			return Redirect::route(''sendmessage-get'')\r\n			->withErrors($validator)\r\n			->withInput();\r\n		}\r\n		else {\r\n			$phonenumbers = Input::get(''Phone_Number'');\r\n			$message = Input::get(''Message'');\r\n			\r\n			\r\n			//remove white spaces from the numbers\r\n			$compressedphonenumbers = str_replace('' '','''', $phonenumbers);\r\n\r\n			//get the specific phone numbers from the array\r\n 			$phonenumbers_array = explode('','', $compressedphonenumbers);\r\n\r\n 			$cost_incurred = sizeof($phonenumbers_array) * $this->cost($message);\r\n\r\n\r\n\r\n 			$owner = Owner::where(''id'',''='',1)->first();\r\n			$ownerid = $owner->owner_id;\r\n\r\n			$balance = DB::select(''select balance from clients.balance where id= ?'', array($ownerid));\r\n			$current_balance = end($balance)->balance;\r\n\r\n			if($cost_incurred<=$current_balance)\r\n			{\r\n\r\n 			$allsent = FALSE;\r\n 			$messagesent = FALSE;\r\n 			$todaysdate 	  = date("Y-m-d");\r\n\r\n\r\n\r\n 			foreach($phonenumbers_array as &$phonenumber)\r\n 			{\r\n			 //register the new user\r\n			 $user		= Message::create(array(\r\n			 				''phone_number''		=>$phonenumber,\r\n			 				''message''		=>$message,\r\n			 				''date''			=>$todaysdate,\r\n			 				''cost''			=>$this->cost($message),\r\n			 				''active''        =>TRUE\r\n			 ));\r\n\r\n			 $phone_number_send = ''+254''.substr($phonenumber, strlen($phonenumber)-9);\r\n\r\n			// $messagesent = $this->SendSms($phone_number_send, $message);\r\n			 \r\n			if($messagesent==TRUE)\r\n			 {\r\n				$allsent = TRUE;\r\n			 }\r\n			 \r\n			}\r\n\r\n			if($allsent==TRUE)\r\n			 {\r\n			 	$newbalance = $current_balance - $cost_incurred;\r\n\r\n			 	return $newbalance;\r\n\r\n			 	$updatebalance = DB::update(''update clients.balance set balance= ? where id= ?'', array($newbalance,$ownerid));\r\n\r\n				return Redirect::route(''sendmessage-get'')\r\n					->with(''global'',''Success! Your message has been sent'');	\r\n			 }\r\n			}\r\n			else\r\n			{\r\n				return Redirect::route(''sendmessage-get'')\r\n					->with(''global'',''Sorry, your current balance is insufficient.'')->withInput();\r\n			}\r\n		}\r\n		\r\n	}\r\n\r\n	public function postSendMessageToAll()\r\n	{\r\n		//verify the user input and create account\r\n		$validator = Validator::make(Input::all(),array(\r\n			''Message''				=>''required'',\r\n\r\n		));\r\n		\r\n		if($validator->fails())\r\n		{\r\n			return Redirect::route(''sendmessagetoall-get'')\r\n			->withErrors($validator)\r\n			->withInput();\r\n		}\r\n		else {\r\n			\r\n			$message = Input::get(''Message'');\r\n\r\n			 \r\n			//get the members information\r\n			$members = Member::where(''active'',''='',TRUE)->get();\r\n\r\n			$cost_incurred = $members->count() * $this->cost($message);\r\n			$owner = Owner::where(''id'',''='',1)->first();\r\n			$ownerid = $owner->owner_id;\r\n\r\n			$balance = DB::select(''select balance from clients.balance where id= ?'', array($ownerid));\r\n			$current_balance = end($balance)->balance;\r\n\r\n			if($cost_incurred<=$current_balance)\r\n			{\r\n			\r\n			$sent = FALSE;\r\n			$todaysdate 	  = date("Y-m-d");\r\n			\r\n			foreach($members as $member){\r\n				 //register the new user\r\n			 $user		= Message::create(array(\r\n			 				''phone_number''		=>$member->phone_number,\r\n			 				''message''			=>$message,\r\n			 				''member_id''			=>$member->id,\r\n			 				''cost''				=>$this->cost($message),\r\n			 				''date''			    =>$todaysdate,\r\n			 				''active''            =>TRUE\r\n			 ));\r\n\r\n\r\n			   $phone_number_send = ''+254''.substr($member->phone_number, strlen($member->phone_number)-9);\r\n			  // $sent = $this->SendSms($phone_number_send, $message);\r\n			}\r\n			\r\n			 \r\n			 if($sent==TRUE)\r\n			 {\r\n				return Redirect::route(''sendmessagetoall-get'')\r\n					->with(''global'',''Success! Your message has been sent'');	\r\n			 }\r\n			}\r\n			else\r\n			{\r\n				return Redirect::route(''sendmessagetoall-get'')\r\n					->with(''global'',''Sorry, your current balance is insufficient.'')->withInput();\r\n			}\r\n			\r\n		}\r\n		\r\n	}\r\n	\r\n	\r\n	public function postDeleteMessage()\r\n	{\r\n		\r\n		\r\n			$messageId  = Input::get(''messageID'');\r\n			\r\n						\r\n 			$message_delete = Message::where(''id'',''='',$messageId)->first();\r\n 			$message_delete->active = FALSE;\r\n\r\n 			$message_delete = $message_delete->save();\r\n			 \r\n			 if($message_delete)\r\n			 {\r\n				return Redirect::route(''sentmessage-get'')\r\n					->with(''global'',''Success! Message information has been deleted successfully.'');	\r\n			 }	\r\n	}\r\n		\r\n		public function cost($textmessage){\r\n             return ceil(strlen($textmessage)/160)*2;\r\n		}\r\n}\r\n<?php\r\ninclude_once(app_path().''/includes/AfricasTalkingGateway.php'');\r\n\r\n\r\n\r\nclass MessageController extends BaseController {\r\n\r\n	/*\r\n	|--------------------------------------------------------------------------\r\n	| Default Home Controller\r\n	|--------------------------------------------------------------------------\r\n	|\r\n	| You may wish to use controllers instead of, or in addition to, Closure\r\n	| based routes. That''s great! Here is an example controller method to\r\n	| get you started. To route to this controller, just add the route:\r\n	|\r\n	|	Route::get(''/'', ''HomeController@showWelcome'');\r\n	|\r\n	*/\r\n\r\n	public function SendSms($my_recipient,$my_message)\r\n		{\r\n			// Specify your login credentials\r\n			$username   = "adback";\r\n			$apikey     = "c933c719506a6838d4ceac95c9411b27331f34a117ca80473529d967ff9c46b0";\r\n			\r\n			// Specify the numbers that you want to send to in a comma-separated list\r\n			// Please ensure you include the country code (+254 for Kenya in this case)\r\n			$recipients = $my_recipient;\r\n			\r\n			// And of course we want our recipients to know what we really do\r\n			$message    = $my_message;\r\n			\r\n			// Create a new instance of our awesome gateway class\r\n			$gateway    = new AfricasTalkingGateway($username, $apikey);\r\n			\r\n			// Any gateway errors will be captured by our custom Exception class below, \r\n			// so wrap the call in a try-catch block\r\n			try \r\n			{ \r\n			  // Thats it, hit send and we''ll take care of the rest. \r\n			  $results = $gateway->sendMessage($recipients, $message);\r\n			  if($results) {\r\n			    return TRUE;\r\n			  }\r\n			  else {\r\n				  return FALSE;\r\n			  }\r\n			}\r\n			catch ( AfricasTalkingGatewayException $e )\r\n			{\r\n			  return FALSE;\r\n			}\r\n			\r\n			// DONE!!! \r\n		}\r\n	\r\n	public function postSendMessage()\r\n	{\r\n		//verify the user input and create account\r\n		$validator = Validator::make(Input::all(),array(\r\n				''Phone_Number''				=>''required'',\r\n				''Message''				=>''required'',\r\n\r\n		));\r\n		\r\n		if($validator->fails())\r\n		{\r\n			return Redirect::route(''sendmessage-get'')\r\n			->withErrors($validator)\r\n			->withInput();\r\n		}\r\n		else {\r\n			$phonenumbers = Input::get(''Phone_Number'');\r\n			$message = Input::get(''Message'');\r\n			\r\n			\r\n			//remove white spaces from the numbers\r\n			$compressedphonenumbers = str_replace('' '','''', $phonenumbers);\r\n\r\n			//get the specific phone numbers from the array\r\n 			$phonenumbers_array = explode('','', $compressedphonenumbers);\r\n\r\n 			$cost_incurred = sizeof($phonenumbers_array) * $this->cost($message);\r\n\r\n\r\n\r\n 			$owner = Owner::where(''id'',''='',1)->first();\r\n			$ownerid = $owner->owner_id;\r\n\r\n			$balance = DB::select(''select balance from clients.balance where id= ?'', array($ownerid));\r\n			$current_balance = end($balance)->balance;\r\n\r\n			if($cost_incurred<=$current_balance)\r\n			{\r\n\r\n 			$allsent = FALSE;\r\n 			$messagesent = FALSE;\r\n 			$todaysdate 	  = date("Y-m-d");\r\n\r\n\r\n\r\n 			foreach($phonenumbers_array as &$phonenumber)\r\n 			{\r\n			 //register the new user\r\n			 $user		= Message::create(array(\r\n			 				''phone_number''		=>$phonenumber,\r\n			 				''message''		=>$message,\r\n			 				''date''			=>$todaysdate,\r\n			 				''cost''			=>$this->cost($message),\r\n			 				''active''        =>TRUE\r\n			 ));\r\n\r\n			 $phone_number_send = ''+254''.substr($phonenumber, strlen($phonenumber)-9);\r\n\r\n			// $messagesent = $this->SendSms($phone_number_send, $message);\r\n			 \r\n			if($messagesent==TRUE)\r\n			 {\r\n				$allsent = TRUE;\r\n			 }\r\n			 \r\n			}\r\n\r\n			if($allsent==TRUE)\r\n			 {\r\n			 	$newbalance = $current_balance - $cost_incurred;\r\n\r\n			 	return $newbalance;\r\n\r\n			 	$updatebalance = DB::update(''update clients.balance set balance= ? where id= ?'', array($newbalance,$ownerid));\r\n\r\n				return Redirect::route(''sendmessage-get'')\r\n					->with(''global'',''Success! Your message has been sent'');	\r\n			 }\r\n			}\r\n			else\r\n			{\r\n				return Redirect::route(''sendmessage-get'')\r\n					->with(''global'',''Sorry, your current balance is insufficient.'')->withInput();\r\n			}\r\n		}\r\n		\r\n	}\r\n\r\n	public function postSendMessageToAll()\r\n	{\r\n		//verify the user input and create account\r\n		$validator = Validator::make(Input::all(),array(\r\n			''Message''				=>''required'',\r\n\r\n		));\r\n		\r\n		if($validator->fails())\r\n		{\r\n			return Redirect::route(''sendmessagetoall-get'')\r\n			->withErrors($validator)\r\n			->withInput();\r\n		}\r\n		else {\r\n			\r\n			$message = Input::get(''Message'');\r\n\r\n			 \r\n			//get the members information\r\n			$members = Member::where(''active'',''='',TRUE)->get();\r\n\r\n			$cost_incurred = $members->count() * $this->cost($message);\r\n			$owner = Owner::where(''id'',''='',1)->first();\r\n			$ownerid = $owner->owner_id;\r\n\r\n			$balance = DB::select(''select balance from clients.balance where id= ?'', array($ownerid));\r\n			$current_balance = end($balance)->balance;\r\n\r\n			if($cost_incurred<=$current_balance)\r\n			{\r\n			\r\n			$sent = FALSE;\r\n			$todaysdate 	  = date("Y-m-d");\r\n			\r\n			foreach($members as $member){\r\n				 //register the new user\r\n			 $user		= Message::create(array(\r\n			 				''phone_number''		=>$member->phone_number,\r\n			 				''message''			=>$message,\r\n			 				''member_id''			=>$member->id,\r\n			 				''cost''				=>$this->cost($message),\r\n			 				''date''			    =>$todaysdate,\r\n			 				''active''            =>TRUE\r\n			 ));\r\n\r\n\r\n			   $phone_number_send = ''+254''.substr($member->phone_number, strlen($member->phone_number)-9);\r\n			  // $sent = $this->SendSms($phone_number_send, $message);\r\n			}\r\n			\r\n			 \r\n			 if($sent==TRUE)\r\n			 {\r\n				return Redirect::route(''sendmessagetoall-get'')\r\n					->with(''global'',''Success! Your message has been sent'');	\r\n			 }\r\n			}\r\n			else\r\n			{\r\n				return Redirect::route(''sendmessagetoall-get'')\r\n					->with(''global'',''Sorry, your current balance is insufficient.'')->withInput();\r\n			}\r\n			\r\n		}\r\n		\r\n	}\r\n	\r\n	\r\n	public function postDeleteMessage()\r\n	{\r\n		\r\n		\r\n			$messageId  = Input::get(''messageID'');\r\n			\r\n						\r\n 			$message_delete = Message::where(''id'',''='',$messageId)->first();\r\n 			$message_delete->active = FALSE;\r\n\r\n 			$message_delete = $message_delete->save();\r\n			 \r\n			 if($message_delete)\r\n			 {\r\n				return Redirect::route(''sentmessage-get'')\r\n					->with(''global'',''Success! Message information has been deleted successfully.'');	\r\n			 }	\r\n	}\r\n		\r\n		public function cost($textmessage){\r\n             return ceil(strlen($textmessage)/160)*2;\r\n		}\r\n}\r\n<?php\r\ninclude_once(app_path().''/includes/AfricasTalkingGateway.php'');\r\n\r\n\r\n\r\nclass MessageController extends BaseController {\r\n\r\n	/*\r\n	|--------------------------------------------------------------------------\r\n	| Default Home Controller\r\n	|--------------------------------------------------------------------------\r\n	|\r\n	| You may wish to use controllers instead of, or in addition to, Closure\r\n	| based routes. That''s great! Here is an example controller method to\r\n	| get you started. To route to this controller, just add the route:\r\n	|\r\n	|	Route::get(''/'', ''HomeController@showWelcome'');\r\n	|\r\n	*/\r\n\r\n	public function SendSms($my_recipient,$my_message)\r\n		{\r\n			// Specify your login credentials\r\n			$username   = "adback";\r\n			$apikey     = "c933c719506a6838d4ceac95c9411b27331f34a117ca80473529d967ff9c46b0";\r\n			\r\n			// Specify the numbers that you want to send to in a comma-separated list\r\n			// Please ensure you include the country code (+254 for Kenya in this case)\r\n			$recipients = $my_recipient;\r\n			\r\n			// And of course we want our recipients to know what we really do\r\n			$message    = $my_message;\r\n			\r\n			// Create a new instance of our awesome gateway class\r\n			$gateway    = new AfricasTalkingGateway($username, $apikey);\r\n			\r\n			// Any gateway errors will be captured by our custom Exception class below, \r\n			// so wrap the call in a try-catch block\r\n			try \r\n			{ \r\n			  // Thats it, hit send and we''ll take care of the rest. \r\n			  $results = $gateway->sendMessage($recipients, $message);\r\n			  if($results) {\r\n			    return TRUE;\r\n			  }\r\n			  else {\r\n				  return FALSE;\r\n			  }\r\n			}\r\n			catch ( AfricasTalkingGatewayException $e )\r\n			{\r\n			  return FALSE;\r\n			}\r\n			\r\n			// DONE!!! \r\n		}\r\n	\r\n	public function postSendMessage()\r\n	{\r\n		//verify the user input and create account\r\n		$validator = Validator::make(Input::all(),array(\r\n				''Phone_Number''				=>''required'',\r\n				''Message''				=>''required'',\r\n\r\n		));\r\n		\r\n		if($validator->fails())\r\n		{\r\n			return Redirect::route(''sendmessage-get'')\r\n			->withErrors($validator)\r\n			->withInput();\r\n		}\r\n		else {\r\n			$phonenumbers = Input::get(''Phone_Number'');\r\n			$message = Input::get(''Message'');\r\n			\r\n			\r\n			//remove white spaces from the numbers\r\n			$compressedphonenumbers = str_replace('' '','''', $phonenumbers);\r\n\r\n			//get the specific phone numbers from the array\r\n 			$phonenumbers_array = explode('','', $compressedphonenumbers);\r\n\r\n 			$cost_incurred = sizeof($phonenumbers_array) * $this->cost($message);\r\n\r\n\r\n\r\n 			$owner = Owner::where(''id'',''='',1)->first();\r\n			$ownerid = $owner->owner_id;\r\n\r\n			$balance = DB::select(''select balance from clients.balance where id= ?'', array($ownerid));\r\n			$current_balance = end($balance)->balance;\r\n\r\n			if($cost_incurred<=$current_balance)\r\n			{\r\n\r\n 			$allsent = FALSE;\r\n 			$messagesent = FALSE;\r\n 			$todaysdate 	  = date("Y-m-d");\r\n\r\n\r\n\r\n 			foreach($phonenumbers_array as &$phonenumber)\r\n 			{\r\n			 //register the new user\r\n			 $user		= Message::create(array(\r\n			 				''phone_number''		=>$phonenumber,\r\n			 				''message''		=>$message,\r\n			 				''date''			=>$todaysdate,\r\n			 				''cost''			=>$this->cost($message),\r\n			 				''active''        =>TRUE\r\n			 ));\r\n\r\n			 $phone_number_send = ''+254''.substr($phonenumber, strlen($phonenumber)-9);\r\n\r\n			// $messagesent = $this->SendSms($phone_number_send, $message);\r\n			 \r\n			if($messagesent==TRUE)\r\n			 {\r\n				$allsent = TRUE;\r\n			 }\r\n			 \r\n			}\r\n\r\n			if($allsent==TRUE)\r\n			 {\r\n			 	$newbalance = $current_balance - $cost_incurred;\r\n\r\n			 	return $newbalance;\r\n\r\n			 	$updatebalance = DB::update(''update clients.balance set balance= ? where id= ?'', array($newbalance,$ownerid));\r\n\r\n				return Redirect::route(''sendmessage-get'')\r\n					->with(''global'',''Success! Your message has been sent'');	\r\n			 }\r\n			}\r\n			else\r\n			{\r\n				return Redirect::route(''sendmessage-get'')\r\n					->with(''global'',''Sorry, your current balance is insufficient.'')->withInput();\r\n			}\r\n		}\r\n		\r\n	}\r\n\r\n	public function postSendMessageToAll()\r\n	{\r\n		//verify the user input and create account\r\n		$validator = Validator::make(Input::all(),array(\r\n			''Message''				=>''required'',\r\n\r\n		));\r\n		\r\n		if($validator->fails())\r\n		{\r\n			return Redirect::route(''sendmessagetoall-get'')\r\n			->withErrors($validator)\r\n			->withInput();\r\n		}\r\n		else {\r\n			\r\n			$message = Input::get(''Message'');\r\n\r\n			 \r\n			//get the members information\r\n			$members = Member::where(''active'',''='',TRUE)->get();\r\n\r\n			$cost_incurred = $members->count() * $this->cost($message);\r\n			$owner = Owner::where(''id'',''='',1)->first();\r\n			$ownerid = $owner->owner_id;\r\n\r\n			$balance = DB::select(''select balance from clients.balance where id= ?'', array($ownerid));\r\n			$current_balance = end($balance)->balance;\r\n\r\n			if($cost_incurred<=$current_balance)\r\n			{\r\n			\r\n			$sent = FALSE;\r\n			$todaysdate 	  = date("Y-m-d");\r\n			\r\n			foreach($members as $member){\r\n				 //register the new user\r\n			 $user		= Message::create(array(\r\n			 				''phone_number''		=>$member->phone_number,\r\n			 				''message''			=>$message,\r\n			 				''member_id''			=>$member->id,\r\n			 				''cost''				=>$this->cost($message),\r\n			 				''date''			    =>$todaysdate,\r\n			 				''active''            =>TRUE\r\n			 ));\r\n\r\n\r\n			   $phone_number_send = ''+254''.substr($member->phone_number, strlen($member->phone_number)-9);\r\n			  // $sent = $this->SendSms($phone_number_send, $message);\r\n			}\r\n			\r\n			 \r\n			 if($sent==TRUE)\r\n			 {\r\n				return Redirect::route(''sendmessagetoall-get'')\r\n					->with(''global'',''Success! Your message has been sent'');	\r\n			 }\r\n			}\r\n			else\r\n			{\r\n				return Redirect::route(''sendmessagetoall-get'')\r\n					->with(''global'',''Sorry, your current balance is insufficient.'')->withInput();\r\n			}\r\n			\r\n		}\r\n		\r\n	}\r\n	\r\n	\r\n	public function postDeleteMessage()\r\n	{\r\n		\r\n		\r\n			$messageId  = Input::get(''messageID'');\r\n			\r\n						\r\n 			$message_delete = Message::where(''id'',''='',$messageId)->first();\r\n 			$message_delete->active = FALSE;\r\n\r\n 			$message_delete = $message_delete->save();\r\n			 \r\n			 if($message_delete)\r\n			 {\r\n				return Redirect::route(''sentmessage-get'')\r\n					->with(''global'',''Success! Message information has been deleted successfully.'');	\r\n			 }	\r\n	}\r\n		\r\n		public function cost($textmessage){\r\n             return ceil(strlen($textmessage)/160)*2;\r\n		}\r\n}\r\n<?php\r\ninclude_once(app_path().''/includes/AfricasTalkingGateway.php'');\r\n\r\n\r\n\r\nclass MessageController extends BaseController {\r\n\r\n	/*\r\n	|--------------------------------------------------------------------------\r\n	| Default Home Controller\r\n	|--------------------------------------------------------------------------\r\n	|\r\n	| You may wish to use controllers instead of, or in addition to, Closure\r\n	| based routes. That''s great! Here is an example controller method to\r\n	| get you started. To route to this controller, just add the route:\r\n	|\r\n	|	Route::get(''/'', ''HomeController@showWelcome'');\r\n	|\r\n	*/\r\n\r\n	public function SendSms($my_recipient,$my_message)\r\n		{\r\n			// Specify your login credentials\r\n			$username   = "adback";\r\n			$apikey     = "c933c719506a6838d4ceac95c9411b27331f34a117ca80473529d967ff9c46b0";\r\n			\r\n			// Specify the numbers that you want to send to in a comma-separated list\r\n			// Please ensure you include the country code (+254 for Kenya in this case)\r\n			$recipients = $my_recipient;\r\n			\r\n			// And of course we want our recipients to know what we really do\r\n			$message    = $my_message;\r\n			\r\n			// Create a new instance of our awesome gateway class\r\n			$gateway    = new AfricasTalkingGateway($username, $apikey);\r\n			\r\n			// Any gateway errors will be captured by our custom Exception class below, \r\n			// so wrap the call in a try-catch block\r\n			try \r\n			{ \r\n			  // Thats it, hit send and we''ll take care of the rest. \r\n			  $results = $gateway->sendMessage($recipients, $message);\r\n			  if($results) {\r\n			    return TRUE;\r\n			  }\r\n			  else {\r\n				  return FALSE;\r\n			  }\r\n			}\r\n			catch ( AfricasTalkingGatewayException $e )\r\n			{\r\n			  return FALSE;\r\n			}\r\n			\r\n			// DONE!!! \r\n		}\r\n	\r\n	public function postSendMessage()\r\n	{\r\n		//verify the user input and create account\r\n		$validator = Validator::make(Input::all(),array(\r\n				''Phone_Number''				=>''required'',\r\n				''Message''				=>''required'',\r\n\r\n		));\r\n		\r\n		if($validator->fails())\r\n		{\r\n			return Redirect::route(''sendmessage-get'')\r\n			->withErrors($validator)\r\n			->withInput();\r\n		}\r\n		else {\r\n			$phonenumbers = Input::get(''Phone_Number'');\r\n			$message = Input::get(''Message'');\r\n			\r\n			\r\n			//remove white spaces from the numbers\r\n			$compressedphonenumbers = str_replace('' '','''', $phonenumbers);\r\n\r\n			//get the specific phone numbers from the array\r\n 			$phonenumbers_array = explode('','', $compressedphonenumbers);\r\n\r\n 			$cost_incurred = sizeof($phonenumbers_array) * $this->cost($message);\r\n\r\n\r\n\r\n 			$owner = Owner::where(''id'',''='',1)->first();\r\n			$ownerid = $owner->owner_id;\r\n\r\n			$balance = DB::select(''select balance from clients.balance where id= ?'', array($ownerid));\r\n			$current_balance = end($balance)->balance;\r\n\r\n			if($cost_incurred<=$current_balance)\r\n			{\r\n\r\n 			$allsent = FALSE;\r\n 			$messagesent = FALSE;\r\n 			$todaysdate 	  = date("Y-m-d");\r\n\r\n\r\n\r\n 			foreach($phonenumbers_array as &$phonenumber)\r\n 			{\r\n			 //register the new user\r\n			 $user		= Message::create(array(\r\n			 				''phone_number''		=>$phonenumber,\r\n			 				''message''		=>$message,\r\n			 				''date''			=>$todaysdate,\r\n			 				''cost''			=>$this->cost($message),\r\n			 				''active''        =>TRUE\r\n			 ));\r\n\r\n			 $phone_number_send = ''+254''.substr($phonenumber, strlen($phonenumber)-9);\r\n\r\n			// $messagesent = $this->SendSms($phone_number_send, $message);\r\n			 \r\n			if($messagesent==TRUE)\r\n			 {\r\n				$allsent = TRUE;\r\n			 }\r\n			 \r\n			}\r\n\r\n			if($allsent==TRUE)\r\n			 {\r\n			 	$newbalance = $current_balance - $cost_incurred;\r\n\r\n			 	return $newbalance;\r\n\r\n			 	$updatebalance = DB::update(''update clients.balance set balance= ? where id= ?'', array($newbalance,$ownerid));\r\n\r\n				return Redirect::route(''sendmessage-get'')\r\n					->with(''global'',''Success! Your message has been sent'');	\r\n			 }\r\n			}\r\n			else\r\n			{\r\n				return Redirect::route(''sendmessage-get'')\r\n					->with(''global'',''Sorry, your current balance is insufficient.'')->withInput();\r\n			}\r\n		}\r\n		\r\n	}\r\n\r\n	public function postSendMessageToAll()\r\n	{\r\n		//verify the user input and create account\r\n		$validator = Validator::make(Input::all(),array(\r\n			''Message''				=>''required'',\r\n\r\n		));\r\n		\r\n		if($validator->fails())\r\n		{\r\n			return Redirect::route(''sendmessagetoall-get'')\r\n			->withErrors($validator)\r\n			->withInput();\r\n		}\r\n		else {\r\n			\r\n			$message = Input::get(''Message'');\r\n\r\n			 \r\n			//get the members information\r\n			$members = Member::where(''active'',''='',TRUE)->get();\r\n\r\n			$cost_incurred = $members->count() * $this->cost($message);\r\n			$owner = Owner::where(''id'',''='',1)->first();\r\n			$ownerid = $owner->owner_id;\r\n\r\n			$balance = DB::select(''select balance from clients.balance where id= ?'', array($ownerid));\r\n			$current_balance = end($balance)->balance;\r\n\r\n			if($cost_incurred<=$current_balance)\r\n			{\r\n			\r\n			$sent = FALSE;\r\n			$todaysdate 	  = date("Y-m-d");\r\n			\r\n			foreach($members as $member){\r\n				 //register the new user\r\n			 $user		= Message::create(array(\r\n			 				''phone_number''		=>$member->phone_number,\r\n			 				''message''			=>$message,\r\n			 				''member_id''			=>$member->id,\r\n			 				''cost''				=>$this->cost($message),\r\n			 				''date''			    =>$todaysdate,\r\n			 				''active''            =>TRUE\r\n			 ));\r\n\r\n\r\n			   $phone_number_send = ''+254''.substr($member->phone_number, strlen($member->phone_number)-9);\r\n			  // $sent = $this->SendSms($phone_number_send, $message);\r\n			}\r\n			\r\n			 \r\n			 if($sent==TRUE)\r\n			 {\r\n				return Redirect::route(''sendmessagetoall-get'')\r\n					->with(''global'',''Success! Your message has been sent'');	\r\n			 }\r\n			}\r\n			else\r\n			{\r\n				return Redirect::route(''sendmessagetoall-get'')\r\n					->with(''global'',''Sorry, your current balance is insufficient.'')->withInput();\r\n			}\r\n			\r\n		}\r\n		\r\n	}\r\n	\r\n	\r\n	public function postDeleteMessage()\r\n	{\r\n		\r\n		\r\n			$messageId  = Input::get(''messageID'');\r\n			\r\n						\r\n 			$message_delete = Message::where(''id'',''='',$messageId)->first();\r\n 			$message_delete->active = FALSE;\r\n\r\n 			$message_delete = $message_delete->save();\r\n			 \r\n			 if($message_delete)\r\n			 {\r\n				return Redirect::route(''sentmessage-get'')\r\n					->with(''global'',''Success! Message information has been deleted successfully.'');	\r\n			 }	\r\n	}\r\n		\r\n		public function cost($textmessage){\r\n             return ceil(strlen($textmessage)/160)*2;\r\n		}\r\n}\r\n', '468.00', '2014-11-09 06:53:31', '2014-11-16 06:27:35', '0714573774/', '2014-11-09', 0);
INSERT INTO `messages` (`id`, `member_id`, `message`, `cost`, `created_at`, `updated_at`, `phone_number`, `date`, `active`) VALUES
(52, 0, 'haloooo<?php\r\ninclude_once(app_path().''/includes/AfricasTalkingGateway.php'');\r\n\r\n\r\n\r\nclass MessageController extends BaseController {\r\n\r\n	/*\r\n	|--------------------------------------------------------------------------\r\n	| Default Home Controller\r\n	|--------------------------------------------------------------------------\r\n	|\r\n	| You may wish to use controllers instead of, or in addition to, Closure\r\n	| based routes. That''s great! Here is an example controller method to\r\n	| get you started. To route to this controller, just add the route:\r\n	|\r\n	|	Route::get(''/'', ''HomeController@showWelcome'');\r\n	|\r\n	*/\r\n\r\n	public function SendSms($my_recipient,$my_message)\r\n		{\r\n			// Specify your login credentials\r\n			$username   = "adback";\r\n			$apikey     = "c933c719506a6838d4ceac95c9411b27331f34a117ca80473529d967ff9c46b0";\r\n			\r\n			// Specify the numbers that you want to send to in a comma-separated list\r\n			// Please ensure you include the country code (+254 for Kenya in this case)\r\n			$recipients = $my_recipient;\r\n			\r\n			// And of course we want our recipients to know what we really do\r\n			$message    = $my_message;\r\n			\r\n			// Create a new instance of our awesome gateway class\r\n			$gateway    = new AfricasTalkingGateway($username, $apikey);\r\n			\r\n			// Any gateway errors will be captured by our custom Exception class below, \r\n			// so wrap the call in a try-catch block\r\n			try \r\n			{ \r\n			  // Thats it, hit send and we''ll take care of the rest. \r\n			  $results = $gateway->sendMessage($recipients, $message);\r\n			  if($results) {\r\n			    return TRUE;\r\n			  }\r\n			  else {\r\n				  return FALSE;\r\n			  }\r\n			}\r\n			catch ( AfricasTalkingGatewayException $e )\r\n			{\r\n			  return FALSE;\r\n			}\r\n			\r\n			// DONE!!! \r\n		}\r\n	\r\n	public function postSendMessage()\r\n	{\r\n		//verify the user input and create account\r\n		$validator = Validator::make(Input::all(),array(\r\n				''Phone_Number''				=>''required'',\r\n				''Message''				=>''required'',\r\n\r\n		));\r\n		\r\n		if($validator->fails())\r\n		{\r\n			return Redirect::route(''sendmessage-get'')\r\n			->withErrors($validator)\r\n			->withInput();\r\n		}\r\n		else {\r\n			$phonenumbers = Input::get(''Phone_Number'');\r\n			$message = Input::get(''Message'');\r\n			\r\n			\r\n			//remove white spaces from the numbers\r\n			$compressedphonenumbers = str_replace('' '','''', $phonenumbers);\r\n\r\n			//get the specific phone numbers from the array\r\n 			$phonenumbers_array = explode('','', $compressedphonenumbers);\r\n\r\n 			$cost_incurred = sizeof($phonenumbers_array) * $this->cost($message);\r\n\r\n\r\n\r\n 			$owner = Owner::where(''id'',''='',1)->first();\r\n			$ownerid = $owner->owner_id;\r\n\r\n			$balance = DB::select(''select balance from clients.balance where id= ?'', array($ownerid));\r\n			$current_balance = end($balance)->balance;\r\n\r\n			if($cost_incurred<=$current_balance)\r\n			{\r\n\r\n 			$allsent = FALSE;\r\n 			$messagesent = FALSE;\r\n 			$todaysdate 	  = date("Y-m-d");\r\n\r\n\r\n\r\n 			foreach($phonenumbers_array as &$phonenumber)\r\n 			{\r\n			 //register the new user\r\n			 $user		= Message::create(array(\r\n			 				''phone_number''		=>$phonenumber,\r\n			 				''message''		=>$message,\r\n			 				''date''			=>$todaysdate,\r\n			 				''cost''			=>$this->cost($message),\r\n			 				''active''        =>TRUE\r\n			 ));\r\n\r\n			 $phone_number_send = ''+254''.substr($phonenumber, strlen($phonenumber)-9);\r\n\r\n			// $messagesent = $this->SendSms($phone_number_send, $message);\r\n			 \r\n			if($messagesent==TRUE)\r\n			 {\r\n				$allsent = TRUE;\r\n			 }\r\n			 \r\n			}\r\n\r\n			if($allsent==TRUE)\r\n			 {\r\n			 	$newbalance = $current_balance - $cost_incurred;\r\n\r\n			 	return $newbalance;\r\n\r\n			 	$updatebalance = DB::update(''update clients.balance set balance= ? where id= ?'', array($newbalance,$ownerid));\r\n\r\n				return Redirect::route(''sendmessage-get'')\r\n					->with(''global'',''Success! Your message has been sent'');	\r\n			 }\r\n			}\r\n			else\r\n			{\r\n				return Redirect::route(''sendmessage-get'')\r\n					->with(''global'',''Sorry, your current balance is insufficient.'')->withInput();\r\n			}\r\n		}\r\n		\r\n	}\r\n\r\n	public function postSendMessageToAll()\r\n	{\r\n		//verify the user input and create account\r\n		$validator = Validator::make(Input::all(),array(\r\n			''Message''				=>''required'',\r\n\r\n		));\r\n		\r\n		if($validator->fails())\r\n		{\r\n			return Redirect::route(''sendmessagetoall-get'')\r\n			->withErrors($validator)\r\n			->withInput();\r\n		}\r\n		else {\r\n			\r\n			$message = Input::get(''Message'');\r\n\r\n			 \r\n			//get the members information\r\n			$members = Member::where(''active'',''='',TRUE)->get();\r\n\r\n			$cost_incurred = $members->count() * $this->cost($message);\r\n			$owner = Owner::where(''id'',''='',1)->first();\r\n			$ownerid = $owner->owner_id;\r\n\r\n			$balance = DB::select(''select balance from clients.balance where id= ?'', array($ownerid));\r\n			$current_balance = end($balance)->balance;\r\n\r\n			if($cost_incurred<=$current_balance)\r\n			{\r\n			\r\n			$sent = FALSE;\r\n			$todaysdate 	  = date("Y-m-d");\r\n			\r\n			foreach($members as $member){\r\n				 //register the new user\r\n			 $user		= Message::create(array(\r\n			 				''phone_number''		=>$member->phone_number,\r\n			 				''message''			=>$message,\r\n			 				''member_id''			=>$member->id,\r\n			 				''cost''				=>$this->cost($message),\r\n			 				''date''			    =>$todaysdate,\r\n			 				''active''            =>TRUE\r\n			 ));\r\n\r\n\r\n			   $phone_number_send = ''+254''.substr($member->phone_number, strlen($member->phone_number)-9);\r\n			  // $sent = $this->SendSms($phone_number_send, $message);\r\n			}\r\n			\r\n			 \r\n			 if($sent==TRUE)\r\n			 {\r\n				return Redirect::route(''sendmessagetoall-get'')\r\n					->with(''global'',''Success! Your message has been sent'');	\r\n			 }\r\n			}\r\n			else\r\n			{\r\n				return Redirect::route(''sendmessagetoall-get'')\r\n					->with(''global'',''Sorry, your current balance is insufficient.'')->withInput();\r\n			}\r\n			\r\n		}\r\n		\r\n	}\r\n	\r\n	\r\n	public function postDeleteMessage()\r\n	{\r\n		\r\n		\r\n			$messageId  = Input::get(''messageID'');\r\n			\r\n						\r\n 			$message_delete = Message::where(''id'',''='',$messageId)->first();\r\n 			$message_delete->active = FALSE;\r\n\r\n 			$message_delete = $message_delete->save();\r\n			 \r\n			 if($message_delete)\r\n			 {\r\n				return Redirect::route(''sentmessage-get'')\r\n					->with(''global'',''Success! Message information has been deleted successfully.'');	\r\n			 }	\r\n	}\r\n		\r\n		public function cost($textmessage){\r\n             return ceil(strlen($textmessage)/160)*2;\r\n		}\r\n}\r\n<?php\r\ninclude_once(app_path().''/includes/AfricasTalkingGateway.php'');\r\n\r\n\r\n\r\nclass MessageController extends BaseController {\r\n\r\n	/*\r\n	|--------------------------------------------------------------------------\r\n	| Default Home Controller\r\n	|--------------------------------------------------------------------------\r\n	|\r\n	| You may wish to use controllers instead of, or in addition to, Closure\r\n	| based routes. That''s great! Here is an example controller method to\r\n	| get you started. To route to this controller, just add the route:\r\n	|\r\n	|	Route::get(''/'', ''HomeController@showWelcome'');\r\n	|\r\n	*/\r\n\r\n	public function SendSms($my_recipient,$my_message)\r\n		{\r\n			// Specify your login credentials\r\n			$username   = "adback";\r\n			$apikey     = "c933c719506a6838d4ceac95c9411b27331f34a117ca80473529d967ff9c46b0";\r\n			\r\n			// Specify the numbers that you want to send to in a comma-separated list\r\n			// Please ensure you include the country code (+254 for Kenya in this case)\r\n			$recipients = $my_recipient;\r\n			\r\n			// And of course we want our recipients to know what we really do\r\n			$message    = $my_message;\r\n			\r\n			// Create a new instance of our awesome gateway class\r\n			$gateway    = new AfricasTalkingGateway($username, $apikey);\r\n			\r\n			// Any gateway errors will be captured by our custom Exception class below, \r\n			// so wrap the call in a try-catch block\r\n			try \r\n			{ \r\n			  // Thats it, hit send and we''ll take care of the rest. \r\n			  $results = $gateway->sendMessage($recipients, $message);\r\n			  if($results) {\r\n			    return TRUE;\r\n			  }\r\n			  else {\r\n				  return FALSE;\r\n			  }\r\n			}\r\n			catch ( AfricasTalkingGatewayException $e )\r\n			{\r\n			  return FALSE;\r\n			}\r\n			\r\n			// DONE!!! \r\n		}\r\n	\r\n	public function postSendMessage()\r\n	{\r\n		//verify the user input and create account\r\n		$validator = Validator::make(Input::all(),array(\r\n				''Phone_Number''				=>''required'',\r\n				''Message''				=>''required'',\r\n\r\n		));\r\n		\r\n		if($validator->fails())\r\n		{\r\n			return Redirect::route(''sendmessage-get'')\r\n			->withErrors($validator)\r\n			->withInput();\r\n		}\r\n		else {\r\n			$phonenumbers = Input::get(''Phone_Number'');\r\n			$message = Input::get(''Message'');\r\n			\r\n			\r\n			//remove white spaces from the numbers\r\n			$compressedphonenumbers = str_replace('' '','''', $phonenumbers);\r\n\r\n			//get the specific phone numbers from the array\r\n 			$phonenumbers_array = explode('','', $compressedphonenumbers);\r\n\r\n 			$cost_incurred = sizeof($phonenumbers_array) * $this->cost($message);\r\n\r\n\r\n\r\n 			$owner = Owner::where(''id'',''='',1)->first();\r\n			$ownerid = $owner->owner_id;\r\n\r\n			$balance = DB::select(''select balance from clients.balance where id= ?'', array($ownerid));\r\n			$current_balance = end($balance)->balance;\r\n\r\n			if($cost_incurred<=$current_balance)\r\n			{\r\n\r\n 			$allsent = FALSE;\r\n 			$messagesent = FALSE;\r\n 			$todaysdate 	  = date("Y-m-d");\r\n\r\n\r\n\r\n 			foreach($phonenumbers_array as &$phonenumber)\r\n 			{\r\n			 //register the new user\r\n			 $user		= Message::create(array(\r\n			 				''phone_number''		=>$phonenumber,\r\n			 				''message''		=>$message,\r\n			 				''date''			=>$todaysdate,\r\n			 				''cost''			=>$this->cost($message),\r\n			 				''active''        =>TRUE\r\n			 ));\r\n\r\n			 $phone_number_send = ''+254''.substr($phonenumber, strlen($phonenumber)-9);\r\n\r\n			// $messagesent = $this->SendSms($phone_number_send, $message);\r\n			 \r\n			if($messagesent==TRUE)\r\n			 {\r\n				$allsent = TRUE;\r\n			 }\r\n			 \r\n			}\r\n\r\n			if($allsent==TRUE)\r\n			 {\r\n			 	$newbalance = $current_balance - $cost_incurred;\r\n\r\n			 	return $newbalance;\r\n\r\n			 	$updatebalance = DB::update(''update clients.balance set balance= ? where id= ?'', array($newbalance,$ownerid));\r\n\r\n				return Redirect::route(''sendmessage-get'')\r\n					->with(''global'',''Success! Your message has been sent'');	\r\n			 }\r\n			}\r\n			else\r\n			{\r\n				return Redirect::route(''sendmessage-get'')\r\n					->with(''global'',''Sorry, your current balance is insufficient.'')->withInput();\r\n			}\r\n		}\r\n		\r\n	}\r\n\r\n	public function postSendMessageToAll()\r\n	{\r\n		//verify the user input and create account\r\n		$validator = Validator::make(Input::all(),array(\r\n			''Message''				=>''required'',\r\n\r\n		));\r\n		\r\n		if($validator->fails())\r\n		{\r\n			return Redirect::route(''sendmessagetoall-get'')\r\n			->withErrors($validator)\r\n			->withInput();\r\n		}\r\n		else {\r\n			\r\n			$message = Input::get(''Message'');\r\n\r\n			 \r\n			//get the members information\r\n			$members = Member::where(''active'',''='',TRUE)->get();\r\n\r\n			$cost_incurred = $members->count() * $this->cost($message);\r\n			$owner = Owner::where(''id'',''='',1)->first();\r\n			$ownerid = $owner->owner_id;\r\n\r\n			$balance = DB::select(''select balance from clients.balance where id= ?'', array($ownerid));\r\n			$current_balance = end($balance)->balance;\r\n\r\n			if($cost_incurred<=$current_balance)\r\n			{\r\n			\r\n			$sent = FALSE;\r\n			$todaysdate 	  = date("Y-m-d");\r\n			\r\n			foreach($members as $member){\r\n				 //register the new user\r\n			 $user		= Message::create(array(\r\n			 				''phone_number''		=>$member->phone_number,\r\n			 				''message''			=>$message,\r\n			 				''member_id''			=>$member->id,\r\n			 				''cost''				=>$this->cost($message),\r\n			 				''date''			    =>$todaysdate,\r\n			 				''active''            =>TRUE\r\n			 ));\r\n\r\n\r\n			   $phone_number_send = ''+254''.substr($member->phone_number, strlen($member->phone_number)-9);\r\n			  // $sent = $this->SendSms($phone_number_send, $message);\r\n			}\r\n			\r\n			 \r\n			 if($sent==TRUE)\r\n			 {\r\n				return Redirect::route(''sendmessagetoall-get'')\r\n					->with(''global'',''Success! Your message has been sent'');	\r\n			 }\r\n			}\r\n			else\r\n			{\r\n				return Redirect::route(''sendmessagetoall-get'')\r\n					->with(''global'',''Sorry, your current balance is insufficient.'')->withInput();\r\n			}\r\n			\r\n		}\r\n		\r\n	}\r\n	\r\n	\r\n	public function postDeleteMessage()\r\n	{\r\n		\r\n		\r\n			$messageId  = Input::get(''messageID'');\r\n			\r\n						\r\n 			$message_delete = Message::where(''id'',''='',$messageId)->first();\r\n 			$message_delete->active = FALSE;\r\n\r\n 			$message_delete = $message_delete->save();\r\n			 \r\n			 if($message_delete)\r\n			 {\r\n				return Redirect::route(''sentmessage-get'')\r\n					->with(''global'',''Success! Message information has been deleted successfully.'');	\r\n			 }	\r\n	}\r\n		\r\n		public function cost($textmessage){\r\n             return ceil(strlen($textmessage)/160)*2;\r\n		}\r\n}\r\n<?php\r\ninclude_once(app_path().''/includes/AfricasTalkingGateway.php'');\r\n\r\n\r\n\r\nclass MessageController extends BaseController {\r\n\r\n	/*\r\n	|--------------------------------------------------------------------------\r\n	| Default Home Controller\r\n	|--------------------------------------------------------------------------\r\n	|\r\n	| You may wish to use controllers instead of, or in addition to, Closure\r\n	| based routes. That''s great! Here is an example controller method to\r\n	| get you started. To route to this controller, just add the route:\r\n	|\r\n	|	Route::get(''/'', ''HomeController@showWelcome'');\r\n	|\r\n	*/\r\n\r\n	public function SendSms($my_recipient,$my_message)\r\n		{\r\n			// Specify your login credentials\r\n			$username   = "adback";\r\n			$apikey     = "c933c719506a6838d4ceac95c9411b27331f34a117ca80473529d967ff9c46b0";\r\n			\r\n			// Specify the numbers that you want to send to in a comma-separated list\r\n			// Please ensure you include the country code (+254 for Kenya in this case)\r\n			$recipients = $my_recipient;\r\n			\r\n			// And of course we want our recipients to know what we really do\r\n			$message    = $my_message;\r\n			\r\n			// Create a new instance of our awesome gateway class\r\n			$gateway    = new AfricasTalkingGateway($username, $apikey);\r\n			\r\n			// Any gateway errors will be captured by our custom Exception class below, \r\n			// so wrap the call in a try-catch block\r\n			try \r\n			{ \r\n			  // Thats it, hit send and we''ll take care of the rest. \r\n			  $results = $gateway->sendMessage($recipients, $message);\r\n			  if($results) {\r\n			    return TRUE;\r\n			  }\r\n			  else {\r\n				  return FALSE;\r\n			  }\r\n			}\r\n			catch ( AfricasTalkingGatewayException $e )\r\n			{\r\n			  return FALSE;\r\n			}\r\n			\r\n			// DONE!!! \r\n		}\r\n	\r\n	public function postSendMessage()\r\n	{\r\n		//verify the user input and create account\r\n		$validator = Validator::make(Input::all(),array(\r\n				''Phone_Number''				=>''required'',\r\n				''Message''				=>''required'',\r\n\r\n		));\r\n		\r\n		if($validator->fails())\r\n		{\r\n			return Redirect::route(''sendmessage-get'')\r\n			->withErrors($validator)\r\n			->withInput();\r\n		}\r\n		else {\r\n			$phonenumbers = Input::get(''Phone_Number'');\r\n			$message = Input::get(''Message'');\r\n			\r\n			\r\n			//remove white spaces from the numbers\r\n			$compressedphonenumbers = str_replace('' '','''', $phonenumbers);\r\n\r\n			//get the specific phone numbers from the array\r\n 			$phonenumbers_array = explode('','', $compressedphonenumbers);\r\n\r\n 			$cost_incurred = sizeof($phonenumbers_array) * $this->cost($message);\r\n\r\n\r\n\r\n 			$owner = Owner::where(''id'',''='',1)->first();\r\n			$ownerid = $owner->owner_id;\r\n\r\n			$balance = DB::select(''select balance from clients.balance where id= ?'', array($ownerid));\r\n			$current_balance = end($balance)->balance;\r\n\r\n			if($cost_incurred<=$current_balance)\r\n			{\r\n\r\n 			$allsent = FALSE;\r\n 			$messagesent = FALSE;\r\n 			$todaysdate 	  = date("Y-m-d");\r\n\r\n\r\n\r\n 			foreach($phonenumbers_array as &$phonenumber)\r\n 			{\r\n			 //register the new user\r\n			 $user		= Message::create(array(\r\n			 				''phone_number''		=>$phonenumber,\r\n			 				''message''		=>$message,\r\n			 				''date''			=>$todaysdate,\r\n			 				''cost''			=>$this->cost($message),\r\n			 				''active''        =>TRUE\r\n			 ));\r\n\r\n			 $phone_number_send = ''+254''.substr($phonenumber, strlen($phonenumber)-9);\r\n\r\n			// $messagesent = $this->SendSms($phone_number_send, $message);\r\n			 \r\n			if($messagesent==TRUE)\r\n			 {\r\n				$allsent = TRUE;\r\n			 }\r\n			 \r\n			}\r\n\r\n			if($allsent==TRUE)\r\n			 {\r\n			 	$newbalance = $current_balance - $cost_incurred;\r\n\r\n			 	return $newbalance;\r\n\r\n			 	$updatebalance = DB::update(''update clients.balance set balance= ? where id= ?'', array($newbalance,$ownerid));\r\n\r\n				return Redirect::route(''sendmessage-get'')\r\n					->with(''global'',''Success! Your message has been sent'');	\r\n			 }\r\n			}\r\n			else\r\n			{\r\n				return Redirect::route(''sendmessage-get'')\r\n					->with(''global'',''Sorry, your current balance is insufficient.'')->withInput();\r\n			}\r\n		}\r\n		\r\n	}\r\n\r\n	public function postSendMessageToAll()\r\n	{\r\n		//verify the user input and create account\r\n		$validator = Validator::make(Input::all(),array(\r\n			''Message''				=>''required'',\r\n\r\n		));\r\n		\r\n		if($validator->fails())\r\n		{\r\n			return Redirect::route(''sendmessagetoall-get'')\r\n			->withErrors($validator)\r\n			->withInput();\r\n		}\r\n		else {\r\n			\r\n			$message = Input::get(''Message'');\r\n\r\n			 \r\n			//get the members information\r\n			$members = Member::where(''active'',''='',TRUE)->get();\r\n\r\n			$cost_incurred = $members->count() * $this->cost($message);\r\n			$owner = Owner::where(''id'',''='',1)->first();\r\n			$ownerid = $owner->owner_id;\r\n\r\n			$balance = DB::select(''select balance from clients.balance where id= ?'', array($ownerid));\r\n			$current_balance = end($balance)->balance;\r\n\r\n			if($cost_incurred<=$current_balance)\r\n			{\r\n			\r\n			$sent = FALSE;\r\n			$todaysdate 	  = date("Y-m-d");\r\n			\r\n			foreach($members as $member){\r\n				 //register the new user\r\n			 $user		= Message::create(array(\r\n			 				''phone_number''		=>$member->phone_number,\r\n			 				''message''			=>$message,\r\n			 				''member_id''			=>$member->id,\r\n			 				''cost''				=>$this->cost($message),\r\n			 				''date''			    =>$todaysdate,\r\n			 				''active''            =>TRUE\r\n			 ));\r\n\r\n\r\n			   $phone_number_send = ''+254''.substr($member->phone_number, strlen($member->phone_number)-9);\r\n			  // $sent = $this->SendSms($phone_number_send, $message);\r\n			}\r\n			\r\n			 \r\n			 if($sent==TRUE)\r\n			 {\r\n				return Redirect::route(''sendmessagetoall-get'')\r\n					->with(''global'',''Success! Your message has been sent'');	\r\n			 }\r\n			}\r\n			else\r\n			{\r\n				return Redirect::route(''sendmessagetoall-get'')\r\n					->with(''global'',''Sorry, your current balance is insufficient.'')->withInput();\r\n			}\r\n			\r\n		}\r\n		\r\n	}\r\n	\r\n	\r\n	public function postDeleteMessage()\r\n	{\r\n		\r\n		\r\n			$messageId  = Input::get(''messageID'');\r\n			\r\n						\r\n 			$message_delete = Message::where(''id'',''='',$messageId)->first();\r\n 			$message_delete->active = FALSE;\r\n\r\n 			$message_delete = $message_delete->save();\r\n			 \r\n			 if($message_delete)\r\n			 {\r\n				return Redirect::route(''sentmessage-get'')\r\n					->with(''global'',''Success! Message information has been deleted successfully.'');	\r\n			 }	\r\n	}\r\n		\r\n		public function cost($textmessage){\r\n             return ceil(strlen($textmessage)/160)*2;\r\n		}\r\n}\r\n<?php\r\ninclude_once(app_path().''/includes/AfricasTalkingGateway.php'');\r\n\r\n\r\n\r\nclass MessageController extends BaseController {\r\n\r\n	/*\r\n	|--------------------------------------------------------------------------\r\n	| Default Home Controller\r\n	|--------------------------------------------------------------------------\r\n	|\r\n	| You may wish to use controllers instead of, or in addition to, Closure\r\n	| based routes. That''s great! Here is an example controller method to\r\n	| get you started. To route to this controller, just add the route:\r\n	|\r\n	|	Route::get(''/'', ''HomeController@showWelcome'');\r\n	|\r\n	*/\r\n\r\n	public function SendSms($my_recipient,$my_message)\r\n		{\r\n			// Specify your login credentials\r\n			$username   = "adback";\r\n			$apikey     = "c933c719506a6838d4ceac95c9411b27331f34a117ca80473529d967ff9c46b0";\r\n			\r\n			// Specify the numbers that you want to send to in a comma-separated list\r\n			// Please ensure you include the country code (+254 for Kenya in this case)\r\n			$recipients = $my_recipient;\r\n			\r\n			// And of course we want our recipients to know what we really do\r\n			$message    = $my_message;\r\n			\r\n			// Create a new instance of our awesome gateway class\r\n			$gateway    = new AfricasTalkingGateway($username, $apikey);\r\n			\r\n			// Any gateway errors will be captured by our custom Exception class below, \r\n			// so wrap the call in a try-catch block\r\n			try \r\n			{ \r\n			  // Thats it, hit send and we''ll take care of the rest. \r\n			  $results = $gateway->sendMessage($recipients, $message);\r\n			  if($results) {\r\n			    return TRUE;\r\n			  }\r\n			  else {\r\n				  return FALSE;\r\n			  }\r\n			}\r\n			catch ( AfricasTalkingGatewayException $e )\r\n			{\r\n			  return FALSE;\r\n			}\r\n			\r\n			// DONE!!! \r\n		}\r\n	\r\n	public function postSendMessage()\r\n	{\r\n		//verify the user input and create account\r\n		$validator = Validator::make(Input::all(),array(\r\n				''Phone_Number''				=>''required'',\r\n				''Message''				=>''required'',\r\n\r\n		));\r\n		\r\n		if($validator->fails())\r\n		{\r\n			return Redirect::route(''sendmessage-get'')\r\n			->withErrors($validator)\r\n			->withInput();\r\n		}\r\n		else {\r\n			$phonenumbers = Input::get(''Phone_Number'');\r\n			$message = Input::get(''Message'');\r\n			\r\n			\r\n			//remove white spaces from the numbers\r\n			$compressedphonenumbers = str_replace('' '','''', $phonenumbers);\r\n\r\n			//get the specific phone numbers from the array\r\n 			$phonenumbers_array = explode('','', $compressedphonenumbers);\r\n\r\n 			$cost_incurred = sizeof($phonenumbers_array) * $this->cost($message);\r\n\r\n\r\n\r\n 			$owner = Owner::where(''id'',''='',1)->first();\r\n			$ownerid = $owner->owner_id;\r\n\r\n			$balance = DB::select(''select balance from clients.balance where id= ?'', array($ownerid));\r\n			$current_balance = end($balance)->balance;\r\n\r\n			if($cost_incurred<=$current_balance)\r\n			{\r\n\r\n 			$allsent = FALSE;\r\n 			$messagesent = FALSE;\r\n 			$todaysdate 	  = date("Y-m-d");\r\n\r\n\r\n\r\n 			foreach($phonenumbers_array as &$phonenumber)\r\n 			{\r\n			 //register the new user\r\n			 $user		= Message::create(array(\r\n			 				''phone_number''		=>$phonenumber,\r\n			 				''message''		=>$message,\r\n			 				''date''			=>$todaysdate,\r\n			 				''cost''			=>$this->cost($message),\r\n			 				''active''        =>TRUE\r\n			 ));\r\n\r\n			 $phone_number_send = ''+254''.substr($phonenumber, strlen($phonenumber)-9);\r\n\r\n			// $messagesent = $this->SendSms($phone_number_send, $message);\r\n			 \r\n			if($messagesent==TRUE)\r\n			 {\r\n				$allsent = TRUE;\r\n			 }\r\n			 \r\n			}\r\n\r\n			if($allsent==TRUE)\r\n			 {\r\n			 	$newbalance = $current_balance - $cost_incurred;\r\n\r\n			 	return $newbalance;\r\n\r\n			 	$updatebalance = DB::update(''update clients.balance set balance= ? where id= ?'', array($newbalance,$ownerid));\r\n\r\n				return Redirect::route(''sendmessage-get'')\r\n					->with(''global'',''Success! Your message has been sent'');	\r\n			 }\r\n			}\r\n			else\r\n			{\r\n				return Redirect::route(''sendmessage-get'')\r\n					->with(''global'',''Sorry, your current balance is insufficient.'')->withInput();\r\n			}\r\n		}\r\n		\r\n	}\r\n\r\n	public function postSendMessageToAll()\r\n	{\r\n		//verify the user input and create account\r\n		$validator = Validator::make(Input::all(),array(\r\n			''Message''				=>''required'',\r\n\r\n		));\r\n		\r\n		if($validator->fails())\r\n		{\r\n			return Redirect::route(''sendmessagetoall-get'')\r\n			->withErrors($validator)\r\n			->withInput();\r\n		}\r\n		else {\r\n			\r\n			$message = Input::get(''Message'');\r\n\r\n			 \r\n			//get the members information\r\n			$members = Member::where(''active'',''='',TRUE)->get();\r\n\r\n			$cost_incurred = $members->count() * $this->cost($message);\r\n			$owner = Owner::where(''id'',''='',1)->first();\r\n			$ownerid = $owner->owner_id;\r\n\r\n			$balance = DB::select(''select balance from clients.balance where id= ?'', array($ownerid));\r\n			$current_balance = end($balance)->balance;\r\n\r\n			if($cost_incurred<=$current_balance)\r\n			{\r\n			\r\n			$sent = FALSE;\r\n			$todaysdate 	  = date("Y-m-d");\r\n			\r\n			foreach($members as $member){\r\n				 //register the new user\r\n			 $user		= Message::create(array(\r\n			 				''phone_number''		=>$member->phone_number,\r\n			 				''message''			=>$message,\r\n			 				''member_id''			=>$member->id,\r\n			 				''cost''				=>$this->cost($message),\r\n			 				''date''			    =>$todaysdate,\r\n			 				''active''            =>TRUE\r\n			 ));\r\n\r\n\r\n			   $phone_number_send = ''+254''.substr($member->phone_number, strlen($member->phone_number)-9);\r\n			  // $sent = $this->SendSms($phone_number_send, $message);\r\n			}\r\n			\r\n			 \r\n			 if($sent==TRUE)\r\n			 {\r\n				return Redirect::route(''sendmessagetoall-get'')\r\n					->with(''global'',''Success! Your message has been sent'');	\r\n			 }\r\n			}\r\n			else\r\n			{\r\n				return Redirect::route(''sendmessagetoall-get'')\r\n					->with(''global'',''Sorry, your current balance is insufficient.'')->withInput();\r\n			}\r\n			\r\n		}\r\n		\r\n	}\r\n	\r\n	\r\n	public function postDeleteMessage()\r\n	{\r\n		\r\n		\r\n			$messageId  = Input::get(''messageID'');\r\n			\r\n						\r\n 			$message_delete = Message::where(''id'',''='',$messageId)->first();\r\n 			$message_delete->active = FALSE;\r\n\r\n 			$message_delete = $message_delete->save();\r\n			 \r\n			 if($message_delete)\r\n			 {\r\n				return Redirect::route(''sentmessage-get'')\r\n					->with(''global'',''Success! Message information has been deleted successfully.'');	\r\n			 }	\r\n	}\r\n		\r\n		public function cost($textmessage){\r\n             return ceil(strlen($textmessage)/160)*2;\r\n		}\r\n}\r\n<?php\r\ninclude_once(app_path().''/includes/AfricasTalkingGateway.php'');\r\n\r\n\r\n\r\nclass MessageController extends BaseController {\r\n\r\n	/*\r\n	|--------------------------------------------------------------------------\r\n	| Default Home Controller\r\n	|--------------------------------------------------------------------------\r\n	|\r\n	| You may wish to use controllers instead of, or in addition to, Closure\r\n	| based routes. That''s great! Here is an example controller method to\r\n	| get you started. To route to this controller, just add the route:\r\n	|\r\n	|	Route::get(''/'', ''HomeController@showWelcome'');\r\n	|\r\n	*/\r\n\r\n	public function SendSms($my_recipient,$my_message)\r\n		{\r\n			// Specify your login credentials\r\n			$username   = "adback";\r\n			$apikey     = "c933c719506a6838d4ceac95c9411b27331f34a117ca80473529d967ff9c46b0";\r\n			\r\n			// Specify the numbers that you want to send to in a comma-separated list\r\n			// Please ensure you include the country code (+254 for Kenya in this case)\r\n			$recipients = $my_recipient;\r\n			\r\n			// And of course we want our recipients to know what we really do\r\n			$message    = $my_message;\r\n			\r\n			// Create a new instance of our awesome gateway class\r\n			$gateway    = new AfricasTalkingGateway($username, $apikey);\r\n			\r\n			// Any gateway errors will be captured by our custom Exception class below, \r\n			// so wrap the call in a try-catch block\r\n			try \r\n			{ \r\n			  // Thats it, hit send and we''ll take care of the rest. \r\n			  $results = $gateway->sendMessage($recipients, $message);\r\n			  if($results) {\r\n			    return TRUE;\r\n			  }\r\n			  else {\r\n				  return FALSE;\r\n			  }\r\n			}\r\n			catch ( AfricasTalkingGatewayException $e )\r\n			{\r\n			  return FALSE;\r\n			}\r\n			\r\n			// DONE!!! \r\n		}\r\n	\r\n	public function postSendMessage()\r\n	{\r\n		//verify the user input and create account\r\n		$validator = Validator::make(Input::all(),array(\r\n				''Phone_Number''				=>''required'',\r\n				''Message''				=>''required'',\r\n\r\n		));\r\n		\r\n		if($validator->fails())\r\n		{\r\n			return Redirect::route(''sendmessage-get'')\r\n			->withErrors($validator)\r\n			->withInput();\r\n		}\r\n		else {\r\n			$phonenumbers = Input::get(''Phone_Number'');\r\n			$message = Input::get(''Message'');\r\n			\r\n			\r\n			//remove white spaces from the numbers\r\n			$compressedphonenumbers = str_replace('' '','''', $phonenumbers);\r\n\r\n			//get the specific phone numbers from the array\r\n 			$phonenumbers_array = explode('','', $compressedphonenumbers);\r\n\r\n 			$cost_incurred = sizeof($phonenumbers_array) * $this->cost($message);\r\n\r\n\r\n\r\n 			$owner = Owner::where(''id'',''='',1)->first();\r\n			$ownerid = $owner->owner_id;\r\n\r\n			$balance = DB::select(''select balance from clients.balance where id= ?'', array($ownerid));\r\n			$current_balance = end($balance)->balance;\r\n\r\n			if($cost_incurred<=$current_balance)\r\n			{\r\n\r\n 			$allsent = FALSE;\r\n 			$messagesent = FALSE;\r\n 			$todaysdate 	  = date("Y-m-d");\r\n\r\n\r\n\r\n 			foreach($phonenumbers_array as &$phonenumber)\r\n 			{\r\n			 //register the new user\r\n			 $user		= Message::create(array(\r\n			 				''phone_number''		=>$phonenumber,\r\n			 				''message''		=>$message,\r\n			 				''date''			=>$todaysdate,\r\n			 				''cost''			=>$this->cost($message),\r\n			 				''active''        =>TRUE\r\n			 ));\r\n\r\n			 $phone_number_send = ''+254''.substr($phonenumber, strlen($phonenumber)-9);\r\n\r\n			// $messagesent = $this->SendSms($phone_number_send, $message);\r\n			 \r\n			if($messagesent==TRUE)\r\n			 {\r\n				$allsent = TRUE;\r\n			 }\r\n			 \r\n			}\r\n\r\n			if($allsent==TRUE)\r\n			 {\r\n			 	$newbalance = $current_balance - $cost_incurred;\r\n\r\n			 	return $newbalance;\r\n\r\n			 	$updatebalance = DB::update(''update clients.balance set balance= ? where id= ?'', array($newbalance,$ownerid));\r\n\r\n				return Redirect::route(''sendmessage-get'')\r\n					->with(''global'',''Success! Your message has been sent'');	\r\n			 }\r\n			}\r\n			else\r\n			{\r\n				return Redirect::route(''sendmessage-get'')\r\n					->with(''global'',''Sorry, your current balance is insufficient.'')->withInput();\r\n			}\r\n		}\r\n		\r\n	}\r\n\r\n	public function postSendMessageToAll()\r\n	{\r\n		//verify the user input and create account\r\n		$validator = Validator::make(Input::all(),array(\r\n			''Message''				=>''required'',\r\n\r\n		));\r\n		\r\n		if($validator->fails())\r\n		{\r\n			return Redirect::route(''sendmessagetoall-get'')\r\n			->withErrors($validator)\r\n			->withInput();\r\n		}\r\n		else {\r\n			\r\n			$message = Input::get(''Message'');\r\n\r\n			 \r\n			//get the members information\r\n			$members = Member::where(''active'',''='',TRUE)->get();\r\n\r\n			$cost_incurred = $members->count() * $this->cost($message);\r\n			$owner = Owner::where(''id'',''='',1)->first();\r\n			$ownerid = $owner->owner_id;\r\n\r\n			$balance = DB::select(''select balance from clients.balance where id= ?'', array($ownerid));\r\n			$current_balance = end($balance)->balance;\r\n\r\n			if($cost_incurred<=$current_balance)\r\n			{\r\n			\r\n			$sent = FALSE;\r\n			$todaysdate 	  = date("Y-m-d");\r\n			\r\n			foreach($members as $member){\r\n				 //register the new user\r\n			 $user		= Message::create(array(\r\n			 				''phone_number''		=>$member->phone_number,\r\n			 				''message''			=>$message,\r\n			 				''member_id''			=>$member->id,\r\n			 				''cost''				=>$this->cost($message),\r\n			 				''date''			    =>$todaysdate,\r\n			 				''active''            =>TRUE\r\n			 ));\r\n\r\n\r\n			   $phone_number_send = ''+254''.substr($member->phone_number, strlen($member->phone_number)-9);\r\n			  // $sent = $this->SendSms($phone_number_send, $message);\r\n			}\r\n			\r\n			 \r\n			 if($sent==TRUE)\r\n			 {\r\n				return Redirect::route(''sendmessagetoall-get'')\r\n					->with(''global'',''Success! Your message has been sent'');	\r\n			 }\r\n			}\r\n			else\r\n			{\r\n				return Redirect::route(''sendmessagetoall-get'')\r\n					->with(''global'',''Sorry, your current balance is insufficient.'')->withInput();\r\n			}\r\n			\r\n		}\r\n		\r\n	}\r\n	\r\n	\r\n	public function postDeleteMessage()\r\n	{\r\n		\r\n		\r\n			$messageId  = Input::get(''messageID'');\r\n			\r\n						\r\n 			$message_delete = Message::where(''id'',''='',$messageId)->first();\r\n 			$message_delete->active = FALSE;\r\n\r\n 			$message_delete = $message_delete->save();\r\n			 \r\n			 if($message_delete)\r\n			 {\r\n				return Redirect::route(''sentmessage-get'')\r\n					->with(''global'',''Success! Message information has been deleted successfully.'');	\r\n			 }	\r\n	}\r\n		\r\n		public function cost($textmessage){\r\n             return ceil(strlen($textmessage)/160)*2;\r\n		}\r\n}\r\n<?php\r\ninclude_once(app_path().''/includes/AfricasTalkingGateway.php'');\r\n\r\n\r\n\r\nclass MessageController extends BaseController {\r\n\r\n	/*\r\n	|--------------------------------------------------------------------------\r\n	| Default Home Controller\r\n	|--------------------------------------------------------------------------\r\n	|\r\n	| You may wish to use controllers instead of, or in addition to, Closure\r\n	| based routes. That''s great! Here is an example controller method to\r\n	| get you started. To route to this controller, just add the route:\r\n	|\r\n	|	Route::get(''/'', ''HomeController@showWelcome'');\r\n	|\r\n	*/\r\n\r\n	public function SendSms($my_recipient,$my_message)\r\n		{\r\n			// Specify your login credentials\r\n			$username   = "adback";\r\n			$apikey     = "c933c719506a6838d4ceac95c9411b27331f34a117ca80473529d967ff9c46b0";\r\n			\r\n			// Specify the numbers that you want to send to in a comma-separated list\r\n			// Please ensure you include the country code (+254 for Kenya in this case)\r\n			$recipients = $my_recipient;\r\n			\r\n			// And of course we want our recipients to know what we really do\r\n			$message    = $my_message;\r\n			\r\n			// Create a new instance of our awesome gateway class\r\n			$gateway    = new AfricasTalkingGateway($username, $apikey);\r\n			\r\n			// Any gateway errors will be captured by our custom Exception class below, \r\n			// so wrap the call in a try-catch block\r\n			try \r\n			{ \r\n			  // Thats it, hit send and we''ll take care of the rest. \r\n			  $results = $gateway->sendMessage($recipients, $message);\r\n			  if($results) {\r\n			    return TRUE;\r\n			  }\r\n			  else {\r\n				  return FALSE;\r\n			  }\r\n			}\r\n			catch ( AfricasTalkingGatewayException $e )\r\n			{\r\n			  return FALSE;\r\n			}\r\n			\r\n			// DONE!!! \r\n		}\r\n	\r\n	public function postSendMessage()\r\n	{\r\n		//verify the user input and create account\r\n		$validator = Validator::make(Input::all(),array(\r\n				''Phone_Number''				=>''required'',\r\n				''Message''				=>''required'',\r\n\r\n		));\r\n		\r\n		if($validator->fails())\r\n		{\r\n			return Redirect::route(''sendmessage-get'')\r\n			->withErrors($validator)\r\n			->withInput();\r\n		}\r\n		else {\r\n			$phonenumbers = Input::get(''Phone_Number'');\r\n			$message = Input::get(''Message'');\r\n			\r\n			\r\n			//remove white spaces from the numbers\r\n			$compressedphonenumbers = str_replace('' '','''', $phonenumbers);\r\n\r\n			//get the specific phone numbers from the array\r\n 			$phonenumbers_array = explode('','', $compressedphonenumbers);\r\n\r\n 			$cost_incurred = sizeof($phonenumbers_array) * $this->cost($message);\r\n\r\n\r\n\r\n 			$owner = Owner::where(''id'',''='',1)->first();\r\n			$ownerid = $owner->owner_id;\r\n\r\n			$balance = DB::select(''select balance from clients.balance where id= ?'', array($ownerid));\r\n			$current_balance = end($balance)->balance;\r\n\r\n			if($cost_incurred<=$current_balance)\r\n			{\r\n\r\n 			$allsent = FALSE;\r\n 			$messagesent = FALSE;\r\n 			$todaysdate 	  = date("Y-m-d");\r\n\r\n\r\n\r\n 			foreach($phonenumbers_array as &$phonenumber)\r\n 			{\r\n			 //register the new user\r\n			 $user		= Message::create(array(\r\n			 				''phone_number''		=>$phonenumber,\r\n			 				''message''		=>$message,\r\n			 				''date''			=>$todaysdate,\r\n			 				''cost''			=>$this->cost($message),\r\n			 				''active''        =>TRUE\r\n			 ));\r\n\r\n			 $phone_number_send = ''+254''.substr($phonenumber, strlen($phonenumber)-9);\r\n\r\n			// $messagesent = $this->SendSms($phone_number_send, $message);\r\n			 \r\n			if($messagesent==TRUE)\r\n			 {\r\n				$allsent = TRUE;\r\n			 }\r\n			 \r\n			}\r\n\r\n			if($allsent==TRUE)\r\n			 {\r\n			 	$newbalance = $current_balance - $cost_incurred;\r\n\r\n			 	return $newbalance;\r\n\r\n			 	$updatebalance = DB::update(''update clients.balance set balance= ? where id= ?'', array($newbalance,$ownerid));\r\n\r\n				return Redirect::route(''sendmessage-get'')\r\n					->with(''global'',''Success! Your message has been sent'');	\r\n			 }\r\n			}\r\n			else\r\n			{\r\n				return Redirect::route(''sendmessage-get'')\r\n					->with(''global'',''Sorry, your current balance is insufficient.'')->withInput();\r\n			}\r\n		}\r\n		\r\n	}\r\n\r\n	public function postSendMessageToAll()\r\n	{\r\n		//verify the user input and create account\r\n		$validator = Validator::make(Input::all(),array(\r\n			''Message''				=>''required'',\r\n\r\n		));\r\n		\r\n		if($validator->fails())\r\n		{\r\n			return Redirect::route(''sendmessagetoall-get'')\r\n			->withErrors($validator)\r\n			->withInput();\r\n		}\r\n		else {\r\n			\r\n			$message = Input::get(''Message'');\r\n\r\n			 \r\n			//get the members information\r\n			$members = Member::where(''active'',''='',TRUE)->get();\r\n\r\n			$cost_incurred = $members->count() * $this->cost($message);\r\n			$owner = Owner::where(''id'',''='',1)->first();\r\n			$ownerid = $owner->owner_id;\r\n\r\n			$balance = DB::select(''select balance from clients.balance where id= ?'', array($ownerid));\r\n			$current_balance = end($balance)->balance;\r\n\r\n			if($cost_incurred<=$current_balance)\r\n			{\r\n			\r\n			$sent = FALSE;\r\n			$todaysdate 	  = date("Y-m-d");\r\n			\r\n			foreach($members as $member){\r\n				 //register the new user\r\n			 $user		= Message::create(array(\r\n			 				''phone_number''		=>$member->phone_number,\r\n			 				''message''			=>$message,\r\n			 				''member_id''			=>$member->id,\r\n			 				''cost''				=>$this->cost($message),\r\n			 				''date''			    =>$todaysdate,\r\n			 				''active''            =>TRUE\r\n			 ));\r\n\r\n\r\n			   $phone_number_send = ''+254''.substr($member->phone_number, strlen($member->phone_number)-9);\r\n			  // $sent = $this->SendSms($phone_number_send, $message);\r\n			}\r\n			\r\n			 \r\n			 if($sent==TRUE)\r\n			 {\r\n				return Redirect::route(''sendmessagetoall-get'')\r\n					->with(''global'',''Success! Your message has been sent'');	\r\n			 }\r\n			}\r\n			else\r\n			{\r\n				return Redirect::route(''sendmessagetoall-get'')\r\n					->with(''global'',''Sorry, your current balance is insufficient.'')->withInput();\r\n			}\r\n			\r\n		}\r\n		\r\n	}\r\n	\r\n	\r\n	public function postDeleteMessage()\r\n	{\r\n		\r\n		\r\n			$messageId  = Input::get(''messageID'');\r\n			\r\n						\r\n 			$message_delete = Message::where(''id'',''='',$messageId)->first();\r\n 			$message_delete->active = FALSE;\r\n\r\n 			$message_delete = $message_delete->save();\r\n			 \r\n			 if($message_delete)\r\n			 {\r\n				return Redirect::route(''sentmessage-get'')\r\n					->with(''global'',''Success! Message information has been deleted successfully.'');	\r\n			 }	\r\n	}\r\n		\r\n		public function cost($textmessage){\r\n             return ceil(strlen($textmessage)/160)*2;\r\n		}\r\n}\r\n', '468.00', '2014-11-09 06:53:44', '2014-11-10 12:02:28', '44444', '2014-11-09', 0);
INSERT INTO `messages` (`id`, `member_id`, `message`, `cost`, `created_at`, `updated_at`, `phone_number`, `date`, `active`) VALUES
(53, 0, 'haloooo<?php\r\ninclude_once(app_path().''/includes/AfricasTalkingGateway.php'');\r\n\r\n\r\n\r\nclass MessageController extends BaseController {\r\n\r\n	/*\r\n	|--------------------------------------------------------------------------\r\n	| Default Home Controller\r\n	|--------------------------------------------------------------------------\r\n	|\r\n	| You may wish to use controllers instead of, or in addition to, Closure\r\n	| based routes. That''s great! Here is an example controller method to\r\n	| get you started. To route to this controller, just add the route:\r\n	|\r\n	|	Route::get(''/'', ''HomeController@showWelcome'');\r\n	|\r\n	*/\r\n\r\n	public function SendSms($my_recipient,$my_message)\r\n		{\r\n			// Specify your login credentials\r\n			$username   = "adback";\r\n			$apikey     = "c933c719506a6838d4ceac95c9411b27331f34a117ca80473529d967ff9c46b0";\r\n			\r\n			// Specify the numbers that you want to send to in a comma-separated list\r\n			// Please ensure you include the country code (+254 for Kenya in this case)\r\n			$recipients = $my_recipient;\r\n			\r\n			// And of course we want our recipients to know what we really do\r\n			$message    = $my_message;\r\n			\r\n			// Create a new instance of our awesome gateway class\r\n			$gateway    = new AfricasTalkingGateway($username, $apikey);\r\n			\r\n			// Any gateway errors will be captured by our custom Exception class below, \r\n			// so wrap the call in a try-catch block\r\n			try \r\n			{ \r\n			  // Thats it, hit send and we''ll take care of the rest. \r\n			  $results = $gateway->sendMessage($recipients, $message);\r\n			  if($results) {\r\n			    return TRUE;\r\n			  }\r\n			  else {\r\n				  return FALSE;\r\n			  }\r\n			}\r\n			catch ( AfricasTalkingGatewayException $e )\r\n			{\r\n			  return FALSE;\r\n			}\r\n			\r\n			// DONE!!! \r\n		}\r\n	\r\n	public function postSendMessage()\r\n	{\r\n		//verify the user input and create account\r\n		$validator = Validator::make(Input::all(),array(\r\n				''Phone_Number''				=>''required'',\r\n				''Message''				=>''required'',\r\n\r\n		));\r\n		\r\n		if($validator->fails())\r\n		{\r\n			return Redirect::route(''sendmessage-get'')\r\n			->withErrors($validator)\r\n			->withInput();\r\n		}\r\n		else {\r\n			$phonenumbers = Input::get(''Phone_Number'');\r\n			$message = Input::get(''Message'');\r\n			\r\n			\r\n			//remove white spaces from the numbers\r\n			$compressedphonenumbers = str_replace('' '','''', $phonenumbers);\r\n\r\n			//get the specific phone numbers from the array\r\n 			$phonenumbers_array = explode('','', $compressedphonenumbers);\r\n\r\n 			$cost_incurred = sizeof($phonenumbers_array) * $this->cost($message);\r\n\r\n\r\n\r\n 			$owner = Owner::where(''id'',''='',1)->first();\r\n			$ownerid = $owner->owner_id;\r\n\r\n			$balance = DB::select(''select balance from clients.balance where id= ?'', array($ownerid));\r\n			$current_balance = end($balance)->balance;\r\n\r\n			if($cost_incurred<=$current_balance)\r\n			{\r\n\r\n 			$allsent = FALSE;\r\n 			$messagesent = FALSE;\r\n 			$todaysdate 	  = date("Y-m-d");\r\n\r\n\r\n\r\n 			foreach($phonenumbers_array as &$phonenumber)\r\n 			{\r\n			 //register the new user\r\n			 $user		= Message::create(array(\r\n			 				''phone_number''		=>$phonenumber,\r\n			 				''message''		=>$message,\r\n			 				''date''			=>$todaysdate,\r\n			 				''cost''			=>$this->cost($message),\r\n			 				''active''        =>TRUE\r\n			 ));\r\n\r\n			 $phone_number_send = ''+254''.substr($phonenumber, strlen($phonenumber)-9);\r\n\r\n			// $messagesent = $this->SendSms($phone_number_send, $message);\r\n			 \r\n			if($messagesent==TRUE)\r\n			 {\r\n				$allsent = TRUE;\r\n			 }\r\n			 \r\n			}\r\n\r\n			if($allsent==TRUE)\r\n			 {\r\n			 	$newbalance = $current_balance - $cost_incurred;\r\n\r\n			 	return $newbalance;\r\n\r\n			 	$updatebalance = DB::update(''update clients.balance set balance= ? where id= ?'', array($newbalance,$ownerid));\r\n\r\n				return Redirect::route(''sendmessage-get'')\r\n					->with(''global'',''Success! Your message has been sent'');	\r\n			 }\r\n			}\r\n			else\r\n			{\r\n				return Redirect::route(''sendmessage-get'')\r\n					->with(''global'',''Sorry, your current balance is insufficient.'')->withInput();\r\n			}\r\n		}\r\n		\r\n	}\r\n\r\n	public function postSendMessageToAll()\r\n	{\r\n		//verify the user input and create account\r\n		$validator = Validator::make(Input::all(),array(\r\n			''Message''				=>''required'',\r\n\r\n		));\r\n		\r\n		if($validator->fails())\r\n		{\r\n			return Redirect::route(''sendmessagetoall-get'')\r\n			->withErrors($validator)\r\n			->withInput();\r\n		}\r\n		else {\r\n			\r\n			$message = Input::get(''Message'');\r\n\r\n			 \r\n			//get the members information\r\n			$members = Member::where(''active'',''='',TRUE)->get();\r\n\r\n			$cost_incurred = $members->count() * $this->cost($message);\r\n			$owner = Owner::where(''id'',''='',1)->first();\r\n			$ownerid = $owner->owner_id;\r\n\r\n			$balance = DB::select(''select balance from clients.balance where id= ?'', array($ownerid));\r\n			$current_balance = end($balance)->balance;\r\n\r\n			if($cost_incurred<=$current_balance)\r\n			{\r\n			\r\n			$sent = FALSE;\r\n			$todaysdate 	  = date("Y-m-d");\r\n			\r\n			foreach($members as $member){\r\n				 //register the new user\r\n			 $user		= Message::create(array(\r\n			 				''phone_number''		=>$member->phone_number,\r\n			 				''message''			=>$message,\r\n			 				''member_id''			=>$member->id,\r\n			 				''cost''				=>$this->cost($message),\r\n			 				''date''			    =>$todaysdate,\r\n			 				''active''            =>TRUE\r\n			 ));\r\n\r\n\r\n			   $phone_number_send = ''+254''.substr($member->phone_number, strlen($member->phone_number)-9);\r\n			  // $sent = $this->SendSms($phone_number_send, $message);\r\n			}\r\n			\r\n			 \r\n			 if($sent==TRUE)\r\n			 {\r\n				return Redirect::route(''sendmessagetoall-get'')\r\n					->with(''global'',''Success! Your message has been sent'');	\r\n			 }\r\n			}\r\n			else\r\n			{\r\n				return Redirect::route(''sendmessagetoall-get'')\r\n					->with(''global'',''Sorry, your current balance is insufficient.'')->withInput();\r\n			}\r\n			\r\n		}\r\n		\r\n	}\r\n	\r\n	\r\n	public function postDeleteMessage()\r\n	{\r\n		\r\n		\r\n			$messageId  = Input::get(''messageID'');\r\n			\r\n						\r\n 			$message_delete = Message::where(''id'',''='',$messageId)->first();\r\n 			$message_delete->active = FALSE;\r\n\r\n 			$message_delete = $message_delete->save();\r\n			 \r\n			 if($message_delete)\r\n			 {\r\n				return Redirect::route(''sentmessage-get'')\r\n					->with(''global'',''Success! Message information has been deleted successfully.'');	\r\n			 }	\r\n	}\r\n		\r\n		public function cost($textmessage){\r\n             return ceil(strlen($textmessage)/160)*2;\r\n		}\r\n}\r\n<?php\r\ninclude_once(app_path().''/includes/AfricasTalkingGateway.php'');\r\n\r\n\r\n\r\nclass MessageController extends BaseController {\r\n\r\n	/*\r\n	|--------------------------------------------------------------------------\r\n	| Default Home Controller\r\n	|--------------------------------------------------------------------------\r\n	|\r\n	| You may wish to use controllers instead of, or in addition to, Closure\r\n	| based routes. That''s great! Here is an example controller method to\r\n	| get you started. To route to this controller, just add the route:\r\n	|\r\n	|	Route::get(''/'', ''HomeController@showWelcome'');\r\n	|\r\n	*/\r\n\r\n	public function SendSms($my_recipient,$my_message)\r\n		{\r\n			// Specify your login credentials\r\n			$username   = "adback";\r\n			$apikey     = "c933c719506a6838d4ceac95c9411b27331f34a117ca80473529d967ff9c46b0";\r\n			\r\n			// Specify the numbers that you want to send to in a comma-separated list\r\n			// Please ensure you include the country code (+254 for Kenya in this case)\r\n			$recipients = $my_recipient;\r\n			\r\n			// And of course we want our recipients to know what we really do\r\n			$message    = $my_message;\r\n			\r\n			// Create a new instance of our awesome gateway class\r\n			$gateway    = new AfricasTalkingGateway($username, $apikey);\r\n			\r\n			// Any gateway errors will be captured by our custom Exception class below, \r\n			// so wrap the call in a try-catch block\r\n			try \r\n			{ \r\n			  // Thats it, hit send and we''ll take care of the rest. \r\n			  $results = $gateway->sendMessage($recipients, $message);\r\n			  if($results) {\r\n			    return TRUE;\r\n			  }\r\n			  else {\r\n				  return FALSE;\r\n			  }\r\n			}\r\n			catch ( AfricasTalkingGatewayException $e )\r\n			{\r\n			  return FALSE;\r\n			}\r\n			\r\n			// DONE!!! \r\n		}\r\n	\r\n	public function postSendMessage()\r\n	{\r\n		//verify the user input and create account\r\n		$validator = Validator::make(Input::all(),array(\r\n				''Phone_Number''				=>''required'',\r\n				''Message''				=>''required'',\r\n\r\n		));\r\n		\r\n		if($validator->fails())\r\n		{\r\n			return Redirect::route(''sendmessage-get'')\r\n			->withErrors($validator)\r\n			->withInput();\r\n		}\r\n		else {\r\n			$phonenumbers = Input::get(''Phone_Number'');\r\n			$message = Input::get(''Message'');\r\n			\r\n			\r\n			//remove white spaces from the numbers\r\n			$compressedphonenumbers = str_replace('' '','''', $phonenumbers);\r\n\r\n			//get the specific phone numbers from the array\r\n 			$phonenumbers_array = explode('','', $compressedphonenumbers);\r\n\r\n 			$cost_incurred = sizeof($phonenumbers_array) * $this->cost($message);\r\n\r\n\r\n\r\n 			$owner = Owner::where(''id'',''='',1)->first();\r\n			$ownerid = $owner->owner_id;\r\n\r\n			$balance = DB::select(''select balance from clients.balance where id= ?'', array($ownerid));\r\n			$current_balance = end($balance)->balance;\r\n\r\n			if($cost_incurred<=$current_balance)\r\n			{\r\n\r\n 			$allsent = FALSE;\r\n 			$messagesent = FALSE;\r\n 			$todaysdate 	  = date("Y-m-d");\r\n\r\n\r\n\r\n 			foreach($phonenumbers_array as &$phonenumber)\r\n 			{\r\n			 //register the new user\r\n			 $user		= Message::create(array(\r\n			 				''phone_number''		=>$phonenumber,\r\n			 				''message''		=>$message,\r\n			 				''date''			=>$todaysdate,\r\n			 				''cost''			=>$this->cost($message),\r\n			 				''active''        =>TRUE\r\n			 ));\r\n\r\n			 $phone_number_send = ''+254''.substr($phonenumber, strlen($phonenumber)-9);\r\n\r\n			// $messagesent = $this->SendSms($phone_number_send, $message);\r\n			 \r\n			if($messagesent==TRUE)\r\n			 {\r\n				$allsent = TRUE;\r\n			 }\r\n			 \r\n			}\r\n\r\n			if($allsent==TRUE)\r\n			 {\r\n			 	$newbalance = $current_balance - $cost_incurred;\r\n\r\n			 	return $newbalance;\r\n\r\n			 	$updatebalance = DB::update(''update clients.balance set balance= ? where id= ?'', array($newbalance,$ownerid));\r\n\r\n				return Redirect::route(''sendmessage-get'')\r\n					->with(''global'',''Success! Your message has been sent'');	\r\n			 }\r\n			}\r\n			else\r\n			{\r\n				return Redirect::route(''sendmessage-get'')\r\n					->with(''global'',''Sorry, your current balance is insufficient.'')->withInput();\r\n			}\r\n		}\r\n		\r\n	}\r\n\r\n	public function postSendMessageToAll()\r\n	{\r\n		//verify the user input and create account\r\n		$validator = Validator::make(Input::all(),array(\r\n			''Message''				=>''required'',\r\n\r\n		));\r\n		\r\n		if($validator->fails())\r\n		{\r\n			return Redirect::route(''sendmessagetoall-get'')\r\n			->withErrors($validator)\r\n			->withInput();\r\n		}\r\n		else {\r\n			\r\n			$message = Input::get(''Message'');\r\n\r\n			 \r\n			//get the members information\r\n			$members = Member::where(''active'',''='',TRUE)->get();\r\n\r\n			$cost_incurred = $members->count() * $this->cost($message);\r\n			$owner = Owner::where(''id'',''='',1)->first();\r\n			$ownerid = $owner->owner_id;\r\n\r\n			$balance = DB::select(''select balance from clients.balance where id= ?'', array($ownerid));\r\n			$current_balance = end($balance)->balance;\r\n\r\n			if($cost_incurred<=$current_balance)\r\n			{\r\n			\r\n			$sent = FALSE;\r\n			$todaysdate 	  = date("Y-m-d");\r\n			\r\n			foreach($members as $member){\r\n				 //register the new user\r\n			 $user		= Message::create(array(\r\n			 				''phone_number''		=>$member->phone_number,\r\n			 				''message''			=>$message,\r\n			 				''member_id''			=>$member->id,\r\n			 				''cost''				=>$this->cost($message),\r\n			 				''date''			    =>$todaysdate,\r\n			 				''active''            =>TRUE\r\n			 ));\r\n\r\n\r\n			   $phone_number_send = ''+254''.substr($member->phone_number, strlen($member->phone_number)-9);\r\n			  // $sent = $this->SendSms($phone_number_send, $message);\r\n			}\r\n			\r\n			 \r\n			 if($sent==TRUE)\r\n			 {\r\n				return Redirect::route(''sendmessagetoall-get'')\r\n					->with(''global'',''Success! Your message has been sent'');	\r\n			 }\r\n			}\r\n			else\r\n			{\r\n				return Redirect::route(''sendmessagetoall-get'')\r\n					->with(''global'',''Sorry, your current balance is insufficient.'')->withInput();\r\n			}\r\n			\r\n		}\r\n		\r\n	}\r\n	\r\n	\r\n	public function postDeleteMessage()\r\n	{\r\n		\r\n		\r\n			$messageId  = Input::get(''messageID'');\r\n			\r\n						\r\n 			$message_delete = Message::where(''id'',''='',$messageId)->first();\r\n 			$message_delete->active = FALSE;\r\n\r\n 			$message_delete = $message_delete->save();\r\n			 \r\n			 if($message_delete)\r\n			 {\r\n				return Redirect::route(''sentmessage-get'')\r\n					->with(''global'',''Success! Message information has been deleted successfully.'');	\r\n			 }	\r\n	}\r\n		\r\n		public function cost($textmessage){\r\n             return ceil(strlen($textmessage)/160)*2;\r\n		}\r\n}\r\n<?php\r\ninclude_once(app_path().''/includes/AfricasTalkingGateway.php'');\r\n\r\n\r\n\r\nclass MessageController extends BaseController {\r\n\r\n	/*\r\n	|--------------------------------------------------------------------------\r\n	| Default Home Controller\r\n	|--------------------------------------------------------------------------\r\n	|\r\n	| You may wish to use controllers instead of, or in addition to, Closure\r\n	| based routes. That''s great! Here is an example controller method to\r\n	| get you started. To route to this controller, just add the route:\r\n	|\r\n	|	Route::get(''/'', ''HomeController@showWelcome'');\r\n	|\r\n	*/\r\n\r\n	public function SendSms($my_recipient,$my_message)\r\n		{\r\n			// Specify your login credentials\r\n			$username   = "adback";\r\n			$apikey     = "c933c719506a6838d4ceac95c9411b27331f34a117ca80473529d967ff9c46b0";\r\n			\r\n			// Specify the numbers that you want to send to in a comma-separated list\r\n			// Please ensure you include the country code (+254 for Kenya in this case)\r\n			$recipients = $my_recipient;\r\n			\r\n			// And of course we want our recipients to know what we really do\r\n			$message    = $my_message;\r\n			\r\n			// Create a new instance of our awesome gateway class\r\n			$gateway    = new AfricasTalkingGateway($username, $apikey);\r\n			\r\n			// Any gateway errors will be captured by our custom Exception class below, \r\n			// so wrap the call in a try-catch block\r\n			try \r\n			{ \r\n			  // Thats it, hit send and we''ll take care of the rest. \r\n			  $results = $gateway->sendMessage($recipients, $message);\r\n			  if($results) {\r\n			    return TRUE;\r\n			  }\r\n			  else {\r\n				  return FALSE;\r\n			  }\r\n			}\r\n			catch ( AfricasTalkingGatewayException $e )\r\n			{\r\n			  return FALSE;\r\n			}\r\n			\r\n			// DONE!!! \r\n		}\r\n	\r\n	public function postSendMessage()\r\n	{\r\n		//verify the user input and create account\r\n		$validator = Validator::make(Input::all(),array(\r\n				''Phone_Number''				=>''required'',\r\n				''Message''				=>''required'',\r\n\r\n		));\r\n		\r\n		if($validator->fails())\r\n		{\r\n			return Redirect::route(''sendmessage-get'')\r\n			->withErrors($validator)\r\n			->withInput();\r\n		}\r\n		else {\r\n			$phonenumbers = Input::get(''Phone_Number'');\r\n			$message = Input::get(''Message'');\r\n			\r\n			\r\n			//remove white spaces from the numbers\r\n			$compressedphonenumbers = str_replace('' '','''', $phonenumbers);\r\n\r\n			//get the specific phone numbers from the array\r\n 			$phonenumbers_array = explode('','', $compressedphonenumbers);\r\n\r\n 			$cost_incurred = sizeof($phonenumbers_array) * $this->cost($message);\r\n\r\n\r\n\r\n 			$owner = Owner::where(''id'',''='',1)->first();\r\n			$ownerid = $owner->owner_id;\r\n\r\n			$balance = DB::select(''select balance from clients.balance where id= ?'', array($ownerid));\r\n			$current_balance = end($balance)->balance;\r\n\r\n			if($cost_incurred<=$current_balance)\r\n			{\r\n\r\n 			$allsent = FALSE;\r\n 			$messagesent = FALSE;\r\n 			$todaysdate 	  = date("Y-m-d");\r\n\r\n\r\n\r\n 			foreach($phonenumbers_array as &$phonenumber)\r\n 			{\r\n			 //register the new user\r\n			 $user		= Message::create(array(\r\n			 				''phone_number''		=>$phonenumber,\r\n			 				''message''		=>$message,\r\n			 				''date''			=>$todaysdate,\r\n			 				''cost''			=>$this->cost($message),\r\n			 				''active''        =>TRUE\r\n			 ));\r\n\r\n			 $phone_number_send = ''+254''.substr($phonenumber, strlen($phonenumber)-9);\r\n\r\n			// $messagesent = $this->SendSms($phone_number_send, $message);\r\n			 \r\n			if($messagesent==TRUE)\r\n			 {\r\n				$allsent = TRUE;\r\n			 }\r\n			 \r\n			}\r\n\r\n			if($allsent==TRUE)\r\n			 {\r\n			 	$newbalance = $current_balance - $cost_incurred;\r\n\r\n			 	return $newbalance;\r\n\r\n			 	$updatebalance = DB::update(''update clients.balance set balance= ? where id= ?'', array($newbalance,$ownerid));\r\n\r\n				return Redirect::route(''sendmessage-get'')\r\n					->with(''global'',''Success! Your message has been sent'');	\r\n			 }\r\n			}\r\n			else\r\n			{\r\n				return Redirect::route(''sendmessage-get'')\r\n					->with(''global'',''Sorry, your current balance is insufficient.'')->withInput();\r\n			}\r\n		}\r\n		\r\n	}\r\n\r\n	public function postSendMessageToAll()\r\n	{\r\n		//verify the user input and create account\r\n		$validator = Validator::make(Input::all(),array(\r\n			''Message''				=>''required'',\r\n\r\n		));\r\n		\r\n		if($validator->fails())\r\n		{\r\n			return Redirect::route(''sendmessagetoall-get'')\r\n			->withErrors($validator)\r\n			->withInput();\r\n		}\r\n		else {\r\n			\r\n			$message = Input::get(''Message'');\r\n\r\n			 \r\n			//get the members information\r\n			$members = Member::where(''active'',''='',TRUE)->get();\r\n\r\n			$cost_incurred = $members->count() * $this->cost($message);\r\n			$owner = Owner::where(''id'',''='',1)->first();\r\n			$ownerid = $owner->owner_id;\r\n\r\n			$balance = DB::select(''select balance from clients.balance where id= ?'', array($ownerid));\r\n			$current_balance = end($balance)->balance;\r\n\r\n			if($cost_incurred<=$current_balance)\r\n			{\r\n			\r\n			$sent = FALSE;\r\n			$todaysdate 	  = date("Y-m-d");\r\n			\r\n			foreach($members as $member){\r\n				 //register the new user\r\n			 $user		= Message::create(array(\r\n			 				''phone_number''		=>$member->phone_number,\r\n			 				''message''			=>$message,\r\n			 				''member_id''			=>$member->id,\r\n			 				''cost''				=>$this->cost($message),\r\n			 				''date''			    =>$todaysdate,\r\n			 				''active''            =>TRUE\r\n			 ));\r\n\r\n\r\n			   $phone_number_send = ''+254''.substr($member->phone_number, strlen($member->phone_number)-9);\r\n			  // $sent = $this->SendSms($phone_number_send, $message);\r\n			}\r\n			\r\n			 \r\n			 if($sent==TRUE)\r\n			 {\r\n				return Redirect::route(''sendmessagetoall-get'')\r\n					->with(''global'',''Success! Your message has been sent'');	\r\n			 }\r\n			}\r\n			else\r\n			{\r\n				return Redirect::route(''sendmessagetoall-get'')\r\n					->with(''global'',''Sorry, your current balance is insufficient.'')->withInput();\r\n			}\r\n			\r\n		}\r\n		\r\n	}\r\n	\r\n	\r\n	public function postDeleteMessage()\r\n	{\r\n		\r\n		\r\n			$messageId  = Input::get(''messageID'');\r\n			\r\n						\r\n 			$message_delete = Message::where(''id'',''='',$messageId)->first();\r\n 			$message_delete->active = FALSE;\r\n\r\n 			$message_delete = $message_delete->save();\r\n			 \r\n			 if($message_delete)\r\n			 {\r\n				return Redirect::route(''sentmessage-get'')\r\n					->with(''global'',''Success! Message information has been deleted successfully.'');	\r\n			 }	\r\n	}\r\n		\r\n		public function cost($textmessage){\r\n             return ceil(strlen($textmessage)/160)*2;\r\n		}\r\n}\r\n<?php\r\ninclude_once(app_path().''/includes/AfricasTalkingGateway.php'');\r\n\r\n\r\n\r\nclass MessageController extends BaseController {\r\n\r\n	/*\r\n	|--------------------------------------------------------------------------\r\n	| Default Home Controller\r\n	|--------------------------------------------------------------------------\r\n	|\r\n	| You may wish to use controllers instead of, or in addition to, Closure\r\n	| based routes. That''s great! Here is an example controller method to\r\n	| get you started. To route to this controller, just add the route:\r\n	|\r\n	|	Route::get(''/'', ''HomeController@showWelcome'');\r\n	|\r\n	*/\r\n\r\n	public function SendSms($my_recipient,$my_message)\r\n		{\r\n			// Specify your login credentials\r\n			$username   = "adback";\r\n			$apikey     = "c933c719506a6838d4ceac95c9411b27331f34a117ca80473529d967ff9c46b0";\r\n			\r\n			// Specify the numbers that you want to send to in a comma-separated list\r\n			// Please ensure you include the country code (+254 for Kenya in this case)\r\n			$recipients = $my_recipient;\r\n			\r\n			// And of course we want our recipients to know what we really do\r\n			$message    = $my_message;\r\n			\r\n			// Create a new instance of our awesome gateway class\r\n			$gateway    = new AfricasTalkingGateway($username, $apikey);\r\n			\r\n			// Any gateway errors will be captured by our custom Exception class below, \r\n			// so wrap the call in a try-catch block\r\n			try \r\n			{ \r\n			  // Thats it, hit send and we''ll take care of the rest. \r\n			  $results = $gateway->sendMessage($recipients, $message);\r\n			  if($results) {\r\n			    return TRUE;\r\n			  }\r\n			  else {\r\n				  return FALSE;\r\n			  }\r\n			}\r\n			catch ( AfricasTalkingGatewayException $e )\r\n			{\r\n			  return FALSE;\r\n			}\r\n			\r\n			// DONE!!! \r\n		}\r\n	\r\n	public function postSendMessage()\r\n	{\r\n		//verify the user input and create account\r\n		$validator = Validator::make(Input::all(),array(\r\n				''Phone_Number''				=>''required'',\r\n				''Message''				=>''required'',\r\n\r\n		));\r\n		\r\n		if($validator->fails())\r\n		{\r\n			return Redirect::route(''sendmessage-get'')\r\n			->withErrors($validator)\r\n			->withInput();\r\n		}\r\n		else {\r\n			$phonenumbers = Input::get(''Phone_Number'');\r\n			$message = Input::get(''Message'');\r\n			\r\n			\r\n			//remove white spaces from the numbers\r\n			$compressedphonenumbers = str_replace('' '','''', $phonenumbers);\r\n\r\n			//get the specific phone numbers from the array\r\n 			$phonenumbers_array = explode('','', $compressedphonenumbers);\r\n\r\n 			$cost_incurred = sizeof($phonenumbers_array) * $this->cost($message);\r\n\r\n\r\n\r\n 			$owner = Owner::where(''id'',''='',1)->first();\r\n			$ownerid = $owner->owner_id;\r\n\r\n			$balance = DB::select(''select balance from clients.balance where id= ?'', array($ownerid));\r\n			$current_balance = end($balance)->balance;\r\n\r\n			if($cost_incurred<=$current_balance)\r\n			{\r\n\r\n 			$allsent = FALSE;\r\n 			$messagesent = FALSE;\r\n 			$todaysdate 	  = date("Y-m-d");\r\n\r\n\r\n\r\n 			foreach($phonenumbers_array as &$phonenumber)\r\n 			{\r\n			 //register the new user\r\n			 $user		= Message::create(array(\r\n			 				''phone_number''		=>$phonenumber,\r\n			 				''message''		=>$message,\r\n			 				''date''			=>$todaysdate,\r\n			 				''cost''			=>$this->cost($message),\r\n			 				''active''        =>TRUE\r\n			 ));\r\n\r\n			 $phone_number_send = ''+254''.substr($phonenumber, strlen($phonenumber)-9);\r\n\r\n			// $messagesent = $this->SendSms($phone_number_send, $message);\r\n			 \r\n			if($messagesent==TRUE)\r\n			 {\r\n				$allsent = TRUE;\r\n			 }\r\n			 \r\n			}\r\n\r\n			if($allsent==TRUE)\r\n			 {\r\n			 	$newbalance = $current_balance - $cost_incurred;\r\n\r\n			 	return $newbalance;\r\n\r\n			 	$updatebalance = DB::update(''update clients.balance set balance= ? where id= ?'', array($newbalance,$ownerid));\r\n\r\n				return Redirect::route(''sendmessage-get'')\r\n					->with(''global'',''Success! Your message has been sent'');	\r\n			 }\r\n			}\r\n			else\r\n			{\r\n				return Redirect::route(''sendmessage-get'')\r\n					->with(''global'',''Sorry, your current balance is insufficient.'')->withInput();\r\n			}\r\n		}\r\n		\r\n	}\r\n\r\n	public function postSendMessageToAll()\r\n	{\r\n		//verify the user input and create account\r\n		$validator = Validator::make(Input::all(),array(\r\n			''Message''				=>''required'',\r\n\r\n		));\r\n		\r\n		if($validator->fails())\r\n		{\r\n			return Redirect::route(''sendmessagetoall-get'')\r\n			->withErrors($validator)\r\n			->withInput();\r\n		}\r\n		else {\r\n			\r\n			$message = Input::get(''Message'');\r\n\r\n			 \r\n			//get the members information\r\n			$members = Member::where(''active'',''='',TRUE)->get();\r\n\r\n			$cost_incurred = $members->count() * $this->cost($message);\r\n			$owner = Owner::where(''id'',''='',1)->first();\r\n			$ownerid = $owner->owner_id;\r\n\r\n			$balance = DB::select(''select balance from clients.balance where id= ?'', array($ownerid));\r\n			$current_balance = end($balance)->balance;\r\n\r\n			if($cost_incurred<=$current_balance)\r\n			{\r\n			\r\n			$sent = FALSE;\r\n			$todaysdate 	  = date("Y-m-d");\r\n			\r\n			foreach($members as $member){\r\n				 //register the new user\r\n			 $user		= Message::create(array(\r\n			 				''phone_number''		=>$member->phone_number,\r\n			 				''message''			=>$message,\r\n			 				''member_id''			=>$member->id,\r\n			 				''cost''				=>$this->cost($message),\r\n			 				''date''			    =>$todaysdate,\r\n			 				''active''            =>TRUE\r\n			 ));\r\n\r\n\r\n			   $phone_number_send = ''+254''.substr($member->phone_number, strlen($member->phone_number)-9);\r\n			  // $sent = $this->SendSms($phone_number_send, $message);\r\n			}\r\n			\r\n			 \r\n			 if($sent==TRUE)\r\n			 {\r\n				return Redirect::route(''sendmessagetoall-get'')\r\n					->with(''global'',''Success! Your message has been sent'');	\r\n			 }\r\n			}\r\n			else\r\n			{\r\n				return Redirect::route(''sendmessagetoall-get'')\r\n					->with(''global'',''Sorry, your current balance is insufficient.'')->withInput();\r\n			}\r\n			\r\n		}\r\n		\r\n	}\r\n	\r\n	\r\n	public function postDeleteMessage()\r\n	{\r\n		\r\n		\r\n			$messageId  = Input::get(''messageID'');\r\n			\r\n						\r\n 			$message_delete = Message::where(''id'',''='',$messageId)->first();\r\n 			$message_delete->active = FALSE;\r\n\r\n 			$message_delete = $message_delete->save();\r\n			 \r\n			 if($message_delete)\r\n			 {\r\n				return Redirect::route(''sentmessage-get'')\r\n					->with(''global'',''Success! Message information has been deleted successfully.'');	\r\n			 }	\r\n	}\r\n		\r\n		public function cost($textmessage){\r\n             return ceil(strlen($textmessage)/160)*2;\r\n		}\r\n}\r\n<?php\r\ninclude_once(app_path().''/includes/AfricasTalkingGateway.php'');\r\n\r\n\r\n\r\nclass MessageController extends BaseController {\r\n\r\n	/*\r\n	|--------------------------------------------------------------------------\r\n	| Default Home Controller\r\n	|--------------------------------------------------------------------------\r\n	|\r\n	| You may wish to use controllers instead of, or in addition to, Closure\r\n	| based routes. That''s great! Here is an example controller method to\r\n	| get you started. To route to this controller, just add the route:\r\n	|\r\n	|	Route::get(''/'', ''HomeController@showWelcome'');\r\n	|\r\n	*/\r\n\r\n	public function SendSms($my_recipient,$my_message)\r\n		{\r\n			// Specify your login credentials\r\n			$username   = "adback";\r\n			$apikey     = "c933c719506a6838d4ceac95c9411b27331f34a117ca80473529d967ff9c46b0";\r\n			\r\n			// Specify the numbers that you want to send to in a comma-separated list\r\n			// Please ensure you include the country code (+254 for Kenya in this case)\r\n			$recipients = $my_recipient;\r\n			\r\n			// And of course we want our recipients to know what we really do\r\n			$message    = $my_message;\r\n			\r\n			// Create a new instance of our awesome gateway class\r\n			$gateway    = new AfricasTalkingGateway($username, $apikey);\r\n			\r\n			// Any gateway errors will be captured by our custom Exception class below, \r\n			// so wrap the call in a try-catch block\r\n			try \r\n			{ \r\n			  // Thats it, hit send and we''ll take care of the rest. \r\n			  $results = $gateway->sendMessage($recipients, $message);\r\n			  if($results) {\r\n			    return TRUE;\r\n			  }\r\n			  else {\r\n				  return FALSE;\r\n			  }\r\n			}\r\n			catch ( AfricasTalkingGatewayException $e )\r\n			{\r\n			  return FALSE;\r\n			}\r\n			\r\n			// DONE!!! \r\n		}\r\n	\r\n	public function postSendMessage()\r\n	{\r\n		//verify the user input and create account\r\n		$validator = Validator::make(Input::all(),array(\r\n				''Phone_Number''				=>''required'',\r\n				''Message''				=>''required'',\r\n\r\n		));\r\n		\r\n		if($validator->fails())\r\n		{\r\n			return Redirect::route(''sendmessage-get'')\r\n			->withErrors($validator)\r\n			->withInput();\r\n		}\r\n		else {\r\n			$phonenumbers = Input::get(''Phone_Number'');\r\n			$message = Input::get(''Message'');\r\n			\r\n			\r\n			//remove white spaces from the numbers\r\n			$compressedphonenumbers = str_replace('' '','''', $phonenumbers);\r\n\r\n			//get the specific phone numbers from the array\r\n 			$phonenumbers_array = explode('','', $compressedphonenumbers);\r\n\r\n 			$cost_incurred = sizeof($phonenumbers_array) * $this->cost($message);\r\n\r\n\r\n\r\n 			$owner = Owner::where(''id'',''='',1)->first();\r\n			$ownerid = $owner->owner_id;\r\n\r\n			$balance = DB::select(''select balance from clients.balance where id= ?'', array($ownerid));\r\n			$current_balance = end($balance)->balance;\r\n\r\n			if($cost_incurred<=$current_balance)\r\n			{\r\n\r\n 			$allsent = FALSE;\r\n 			$messagesent = FALSE;\r\n 			$todaysdate 	  = date("Y-m-d");\r\n\r\n\r\n\r\n 			foreach($phonenumbers_array as &$phonenumber)\r\n 			{\r\n			 //register the new user\r\n			 $user		= Message::create(array(\r\n			 				''phone_number''		=>$phonenumber,\r\n			 				''message''		=>$message,\r\n			 				''date''			=>$todaysdate,\r\n			 				''cost''			=>$this->cost($message),\r\n			 				''active''        =>TRUE\r\n			 ));\r\n\r\n			 $phone_number_send = ''+254''.substr($phonenumber, strlen($phonenumber)-9);\r\n\r\n			// $messagesent = $this->SendSms($phone_number_send, $message);\r\n			 \r\n			if($messagesent==TRUE)\r\n			 {\r\n				$allsent = TRUE;\r\n			 }\r\n			 \r\n			}\r\n\r\n			if($allsent==TRUE)\r\n			 {\r\n			 	$newbalance = $current_balance - $cost_incurred;\r\n\r\n			 	return $newbalance;\r\n\r\n			 	$updatebalance = DB::update(''update clients.balance set balance= ? where id= ?'', array($newbalance,$ownerid));\r\n\r\n				return Redirect::route(''sendmessage-get'')\r\n					->with(''global'',''Success! Your message has been sent'');	\r\n			 }\r\n			}\r\n			else\r\n			{\r\n				return Redirect::route(''sendmessage-get'')\r\n					->with(''global'',''Sorry, your current balance is insufficient.'')->withInput();\r\n			}\r\n		}\r\n		\r\n	}\r\n\r\n	public function postSendMessageToAll()\r\n	{\r\n		//verify the user input and create account\r\n		$validator = Validator::make(Input::all(),array(\r\n			''Message''				=>''required'',\r\n\r\n		));\r\n		\r\n		if($validator->fails())\r\n		{\r\n			return Redirect::route(''sendmessagetoall-get'')\r\n			->withErrors($validator)\r\n			->withInput();\r\n		}\r\n		else {\r\n			\r\n			$message = Input::get(''Message'');\r\n\r\n			 \r\n			//get the members information\r\n			$members = Member::where(''active'',''='',TRUE)->get();\r\n\r\n			$cost_incurred = $members->count() * $this->cost($message);\r\n			$owner = Owner::where(''id'',''='',1)->first();\r\n			$ownerid = $owner->owner_id;\r\n\r\n			$balance = DB::select(''select balance from clients.balance where id= ?'', array($ownerid));\r\n			$current_balance = end($balance)->balance;\r\n\r\n			if($cost_incurred<=$current_balance)\r\n			{\r\n			\r\n			$sent = FALSE;\r\n			$todaysdate 	  = date("Y-m-d");\r\n			\r\n			foreach($members as $member){\r\n				 //register the new user\r\n			 $user		= Message::create(array(\r\n			 				''phone_number''		=>$member->phone_number,\r\n			 				''message''			=>$message,\r\n			 				''member_id''			=>$member->id,\r\n			 				''cost''				=>$this->cost($message),\r\n			 				''date''			    =>$todaysdate,\r\n			 				''active''            =>TRUE\r\n			 ));\r\n\r\n\r\n			   $phone_number_send = ''+254''.substr($member->phone_number, strlen($member->phone_number)-9);\r\n			  // $sent = $this->SendSms($phone_number_send, $message);\r\n			}\r\n			\r\n			 \r\n			 if($sent==TRUE)\r\n			 {\r\n				return Redirect::route(''sendmessagetoall-get'')\r\n					->with(''global'',''Success! Your message has been sent'');	\r\n			 }\r\n			}\r\n			else\r\n			{\r\n				return Redirect::route(''sendmessagetoall-get'')\r\n					->with(''global'',''Sorry, your current balance is insufficient.'')->withInput();\r\n			}\r\n			\r\n		}\r\n		\r\n	}\r\n	\r\n	\r\n	public function postDeleteMessage()\r\n	{\r\n		\r\n		\r\n			$messageId  = Input::get(''messageID'');\r\n			\r\n						\r\n 			$message_delete = Message::where(''id'',''='',$messageId)->first();\r\n 			$message_delete->active = FALSE;\r\n\r\n 			$message_delete = $message_delete->save();\r\n			 \r\n			 if($message_delete)\r\n			 {\r\n				return Redirect::route(''sentmessage-get'')\r\n					->with(''global'',''Success! Message information has been deleted successfully.'');	\r\n			 }	\r\n	}\r\n		\r\n		public function cost($textmessage){\r\n             return ceil(strlen($textmessage)/160)*2;\r\n		}\r\n}\r\n<?php\r\ninclude_once(app_path().''/includes/AfricasTalkingGateway.php'');\r\n\r\n\r\n\r\nclass MessageController extends BaseController {\r\n\r\n	/*\r\n	|--------------------------------------------------------------------------\r\n	| Default Home Controller\r\n	|--------------------------------------------------------------------------\r\n	|\r\n	| You may wish to use controllers instead of, or in addition to, Closure\r\n	| based routes. That''s great! Here is an example controller method to\r\n	| get you started. To route to this controller, just add the route:\r\n	|\r\n	|	Route::get(''/'', ''HomeController@showWelcome'');\r\n	|\r\n	*/\r\n\r\n	public function SendSms($my_recipient,$my_message)\r\n		{\r\n			// Specify your login credentials\r\n			$username   = "adback";\r\n			$apikey     = "c933c719506a6838d4ceac95c9411b27331f34a117ca80473529d967ff9c46b0";\r\n			\r\n			// Specify the numbers that you want to send to in a comma-separated list\r\n			// Please ensure you include the country code (+254 for Kenya in this case)\r\n			$recipients = $my_recipient;\r\n			\r\n			// And of course we want our recipients to know what we really do\r\n			$message    = $my_message;\r\n			\r\n			// Create a new instance of our awesome gateway class\r\n			$gateway    = new AfricasTalkingGateway($username, $apikey);\r\n			\r\n			// Any gateway errors will be captured by our custom Exception class below, \r\n			// so wrap the call in a try-catch block\r\n			try \r\n			{ \r\n			  // Thats it, hit send and we''ll take care of the rest. \r\n			  $results = $gateway->sendMessage($recipients, $message);\r\n			  if($results) {\r\n			    return TRUE;\r\n			  }\r\n			  else {\r\n				  return FALSE;\r\n			  }\r\n			}\r\n			catch ( AfricasTalkingGatewayException $e )\r\n			{\r\n			  return FALSE;\r\n			}\r\n			\r\n			// DONE!!! \r\n		}\r\n	\r\n	public function postSendMessage()\r\n	{\r\n		//verify the user input and create account\r\n		$validator = Validator::make(Input::all(),array(\r\n				''Phone_Number''				=>''required'',\r\n				''Message''				=>''required'',\r\n\r\n		));\r\n		\r\n		if($validator->fails())\r\n		{\r\n			return Redirect::route(''sendmessage-get'')\r\n			->withErrors($validator)\r\n			->withInput();\r\n		}\r\n		else {\r\n			$phonenumbers = Input::get(''Phone_Number'');\r\n			$message = Input::get(''Message'');\r\n			\r\n			\r\n			//remove white spaces from the numbers\r\n			$compressedphonenumbers = str_replace('' '','''', $phonenumbers);\r\n\r\n			//get the specific phone numbers from the array\r\n 			$phonenumbers_array = explode('','', $compressedphonenumbers);\r\n\r\n 			$cost_incurred = sizeof($phonenumbers_array) * $this->cost($message);\r\n\r\n\r\n\r\n 			$owner = Owner::where(''id'',''='',1)->first();\r\n			$ownerid = $owner->owner_id;\r\n\r\n			$balance = DB::select(''select balance from clients.balance where id= ?'', array($ownerid));\r\n			$current_balance = end($balance)->balance;\r\n\r\n			if($cost_incurred<=$current_balance)\r\n			{\r\n\r\n 			$allsent = FALSE;\r\n 			$messagesent = FALSE;\r\n 			$todaysdate 	  = date("Y-m-d");\r\n\r\n\r\n\r\n 			foreach($phonenumbers_array as &$phonenumber)\r\n 			{\r\n			 //register the new user\r\n			 $user		= Message::create(array(\r\n			 				''phone_number''		=>$phonenumber,\r\n			 				''message''		=>$message,\r\n			 				''date''			=>$todaysdate,\r\n			 				''cost''			=>$this->cost($message),\r\n			 				''active''        =>TRUE\r\n			 ));\r\n\r\n			 $phone_number_send = ''+254''.substr($phonenumber, strlen($phonenumber)-9);\r\n\r\n			// $messagesent = $this->SendSms($phone_number_send, $message);\r\n			 \r\n			if($messagesent==TRUE)\r\n			 {\r\n				$allsent = TRUE;\r\n			 }\r\n			 \r\n			}\r\n\r\n			if($allsent==TRUE)\r\n			 {\r\n			 	$newbalance = $current_balance - $cost_incurred;\r\n\r\n			 	return $newbalance;\r\n\r\n			 	$updatebalance = DB::update(''update clients.balance set balance= ? where id= ?'', array($newbalance,$ownerid));\r\n\r\n				return Redirect::route(''sendmessage-get'')\r\n					->with(''global'',''Success! Your message has been sent'');	\r\n			 }\r\n			}\r\n			else\r\n			{\r\n				return Redirect::route(''sendmessage-get'')\r\n					->with(''global'',''Sorry, your current balance is insufficient.'')->withInput();\r\n			}\r\n		}\r\n		\r\n	}\r\n\r\n	public function postSendMessageToAll()\r\n	{\r\n		//verify the user input and create account\r\n		$validator = Validator::make(Input::all(),array(\r\n			''Message''				=>''required'',\r\n\r\n		));\r\n		\r\n		if($validator->fails())\r\n		{\r\n			return Redirect::route(''sendmessagetoall-get'')\r\n			->withErrors($validator)\r\n			->withInput();\r\n		}\r\n		else {\r\n			\r\n			$message = Input::get(''Message'');\r\n\r\n			 \r\n			//get the members information\r\n			$members = Member::where(''active'',''='',TRUE)->get();\r\n\r\n			$cost_incurred = $members->count() * $this->cost($message);\r\n			$owner = Owner::where(''id'',''='',1)->first();\r\n			$ownerid = $owner->owner_id;\r\n\r\n			$balance = DB::select(''select balance from clients.balance where id= ?'', array($ownerid));\r\n			$current_balance = end($balance)->balance;\r\n\r\n			if($cost_incurred<=$current_balance)\r\n			{\r\n			\r\n			$sent = FALSE;\r\n			$todaysdate 	  = date("Y-m-d");\r\n			\r\n			foreach($members as $member){\r\n				 //register the new user\r\n			 $user		= Message::create(array(\r\n			 				''phone_number''		=>$member->phone_number,\r\n			 				''message''			=>$message,\r\n			 				''member_id''			=>$member->id,\r\n			 				''cost''				=>$this->cost($message),\r\n			 				''date''			    =>$todaysdate,\r\n			 				''active''            =>TRUE\r\n			 ));\r\n\r\n\r\n			   $phone_number_send = ''+254''.substr($member->phone_number, strlen($member->phone_number)-9);\r\n			  // $sent = $this->SendSms($phone_number_send, $message);\r\n			}\r\n			\r\n			 \r\n			 if($sent==TRUE)\r\n			 {\r\n				return Redirect::route(''sendmessagetoall-get'')\r\n					->with(''global'',''Success! Your message has been sent'');	\r\n			 }\r\n			}\r\n			else\r\n			{\r\n				return Redirect::route(''sendmessagetoall-get'')\r\n					->with(''global'',''Sorry, your current balance is insufficient.'')->withInput();\r\n			}\r\n			\r\n		}\r\n		\r\n	}\r\n	\r\n	\r\n	public function postDeleteMessage()\r\n	{\r\n		\r\n		\r\n			$messageId  = Input::get(''messageID'');\r\n			\r\n						\r\n 			$message_delete = Message::where(''id'',''='',$messageId)->first();\r\n 			$message_delete->active = FALSE;\r\n\r\n 			$message_delete = $message_delete->save();\r\n			 \r\n			 if($message_delete)\r\n			 {\r\n				return Redirect::route(''sentmessage-get'')\r\n					->with(''global'',''Success! Message information has been deleted successfully.'');	\r\n			 }	\r\n	}\r\n		\r\n		public function cost($textmessage){\r\n             return ceil(strlen($textmessage)/160)*2;\r\n		}\r\n}\r\n', '468.00', '2014-11-09 06:54:17', '2014-11-16 06:27:45', '44444', '2014-11-09', 0);
INSERT INTO `messages` (`id`, `member_id`, `message`, `cost`, `created_at`, `updated_at`, `phone_number`, `date`, `active`) VALUES
(54, 0, 'haloooo<?php\r\ninclude_once(app_path().''/includes/AfricasTalkingGateway.php'');\r\n\r\n\r\n\r\nclass MessageController extends BaseController {\r\n\r\n	/*\r\n	|--------------------------------------------------------------------------\r\n	| Default Home Controller\r\n	|--------------------------------------------------------------------------\r\n	|\r\n	| You may wish to use controllers instead of, or in addition to, Closure\r\n	| based routes. That''s great! Here is an example controller method to\r\n	| get you started. To route to this controller, just add the route:\r\n	|\r\n	|	Route::get(''/'', ''HomeController@showWelcome'');\r\n	|\r\n	*/\r\n\r\n	public function SendSms($my_recipient,$my_message)\r\n		{\r\n			// Specify your login credentials\r\n			$username   = "adback";\r\n			$apikey     = "c933c719506a6838d4ceac95c9411b27331f34a117ca80473529d967ff9c46b0";\r\n			\r\n			// Specify the numbers that you want to send to in a comma-separated list\r\n			// Please ensure you include the country code (+254 for Kenya in this case)\r\n			$recipients = $my_recipient;\r\n			\r\n			// And of course we want our recipients to know what we really do\r\n			$message    = $my_message;\r\n			\r\n			// Create a new instance of our awesome gateway class\r\n			$gateway    = new AfricasTalkingGateway($username, $apikey);\r\n			\r\n			// Any gateway errors will be captured by our custom Exception class below, \r\n			// so wrap the call in a try-catch block\r\n			try \r\n			{ \r\n			  // Thats it, hit send and we''ll take care of the rest. \r\n			  $results = $gateway->sendMessage($recipients, $message);\r\n			  if($results) {\r\n			    return TRUE;\r\n			  }\r\n			  else {\r\n				  return FALSE;\r\n			  }\r\n			}\r\n			catch ( AfricasTalkingGatewayException $e )\r\n			{\r\n			  return FALSE;\r\n			}\r\n			\r\n			// DONE!!! \r\n		}\r\n	\r\n	public function postSendMessage()\r\n	{\r\n		//verify the user input and create account\r\n		$validator = Validator::make(Input::all(),array(\r\n				''Phone_Number''				=>''required'',\r\n				''Message''				=>''required'',\r\n\r\n		));\r\n		\r\n		if($validator->fails())\r\n		{\r\n			return Redirect::route(''sendmessage-get'')\r\n			->withErrors($validator)\r\n			->withInput();\r\n		}\r\n		else {\r\n			$phonenumbers = Input::get(''Phone_Number'');\r\n			$message = Input::get(''Message'');\r\n			\r\n			\r\n			//remove white spaces from the numbers\r\n			$compressedphonenumbers = str_replace('' '','''', $phonenumbers);\r\n\r\n			//get the specific phone numbers from the array\r\n 			$phonenumbers_array = explode('','', $compressedphonenumbers);\r\n\r\n 			$cost_incurred = sizeof($phonenumbers_array) * $this->cost($message);\r\n\r\n\r\n\r\n 			$owner = Owner::where(''id'',''='',1)->first();\r\n			$ownerid = $owner->owner_id;\r\n\r\n			$balance = DB::select(''select balance from clients.balance where id= ?'', array($ownerid));\r\n			$current_balance = end($balance)->balance;\r\n\r\n			if($cost_incurred<=$current_balance)\r\n			{\r\n\r\n 			$allsent = FALSE;\r\n 			$messagesent = FALSE;\r\n 			$todaysdate 	  = date("Y-m-d");\r\n\r\n\r\n\r\n 			foreach($phonenumbers_array as &$phonenumber)\r\n 			{\r\n			 //register the new user\r\n			 $user		= Message::create(array(\r\n			 				''phone_number''		=>$phonenumber,\r\n			 				''message''		=>$message,\r\n			 				''date''			=>$todaysdate,\r\n			 				''cost''			=>$this->cost($message),\r\n			 				''active''        =>TRUE\r\n			 ));\r\n\r\n			 $phone_number_send = ''+254''.substr($phonenumber, strlen($phonenumber)-9);\r\n\r\n			// $messagesent = $this->SendSms($phone_number_send, $message);\r\n			 \r\n			if($messagesent==TRUE)\r\n			 {\r\n				$allsent = TRUE;\r\n			 }\r\n			 \r\n			}\r\n\r\n			if($allsent==TRUE)\r\n			 {\r\n			 	$newbalance = $current_balance - $cost_incurred;\r\n\r\n			 	return $newbalance;\r\n\r\n			 	$updatebalance = DB::update(''update clients.balance set balance= ? where id= ?'', array($newbalance,$ownerid));\r\n\r\n				return Redirect::route(''sendmessage-get'')\r\n					->with(''global'',''Success! Your message has been sent'');	\r\n			 }\r\n			}\r\n			else\r\n			{\r\n				return Redirect::route(''sendmessage-get'')\r\n					->with(''global'',''Sorry, your current balance is insufficient.'')->withInput();\r\n			}\r\n		}\r\n		\r\n	}\r\n\r\n	public function postSendMessageToAll()\r\n	{\r\n		//verify the user input and create account\r\n		$validator = Validator::make(Input::all(),array(\r\n			''Message''				=>''required'',\r\n\r\n		));\r\n		\r\n		if($validator->fails())\r\n		{\r\n			return Redirect::route(''sendmessagetoall-get'')\r\n			->withErrors($validator)\r\n			->withInput();\r\n		}\r\n		else {\r\n			\r\n			$message = Input::get(''Message'');\r\n\r\n			 \r\n			//get the members information\r\n			$members = Member::where(''active'',''='',TRUE)->get();\r\n\r\n			$cost_incurred = $members->count() * $this->cost($message);\r\n			$owner = Owner::where(''id'',''='',1)->first();\r\n			$ownerid = $owner->owner_id;\r\n\r\n			$balance = DB::select(''select balance from clients.balance where id= ?'', array($ownerid));\r\n			$current_balance = end($balance)->balance;\r\n\r\n			if($cost_incurred<=$current_balance)\r\n			{\r\n			\r\n			$sent = FALSE;\r\n			$todaysdate 	  = date("Y-m-d");\r\n			\r\n			foreach($members as $member){\r\n				 //register the new user\r\n			 $user		= Message::create(array(\r\n			 				''phone_number''		=>$member->phone_number,\r\n			 				''message''			=>$message,\r\n			 				''member_id''			=>$member->id,\r\n			 				''cost''				=>$this->cost($message),\r\n			 				''date''			    =>$todaysdate,\r\n			 				''active''            =>TRUE\r\n			 ));\r\n\r\n\r\n			   $phone_number_send = ''+254''.substr($member->phone_number, strlen($member->phone_number)-9);\r\n			  // $sent = $this->SendSms($phone_number_send, $message);\r\n			}\r\n			\r\n			 \r\n			 if($sent==TRUE)\r\n			 {\r\n				return Redirect::route(''sendmessagetoall-get'')\r\n					->with(''global'',''Success! Your message has been sent'');	\r\n			 }\r\n			}\r\n			else\r\n			{\r\n				return Redirect::route(''sendmessagetoall-get'')\r\n					->with(''global'',''Sorry, your current balance is insufficient.'')->withInput();\r\n			}\r\n			\r\n		}\r\n		\r\n	}\r\n	\r\n	\r\n	public function postDeleteMessage()\r\n	{\r\n		\r\n		\r\n			$messageId  = Input::get(''messageID'');\r\n			\r\n						\r\n 			$message_delete = Message::where(''id'',''='',$messageId)->first();\r\n 			$message_delete->active = FALSE;\r\n\r\n 			$message_delete = $message_delete->save();\r\n			 \r\n			 if($message_delete)\r\n			 {\r\n				return Redirect::route(''sentmessage-get'')\r\n					->with(''global'',''Success! Message information has been deleted successfully.'');	\r\n			 }	\r\n	}\r\n		\r\n		public function cost($textmessage){\r\n             return ceil(strlen($textmessage)/160)*2;\r\n		}\r\n}\r\n<?php\r\ninclude_once(app_path().''/includes/AfricasTalkingGateway.php'');\r\n\r\n\r\n\r\nclass MessageController extends BaseController {\r\n\r\n	/*\r\n	|--------------------------------------------------------------------------\r\n	| Default Home Controller\r\n	|--------------------------------------------------------------------------\r\n	|\r\n	| You may wish to use controllers instead of, or in addition to, Closure\r\n	| based routes. That''s great! Here is an example controller method to\r\n	| get you started. To route to this controller, just add the route:\r\n	|\r\n	|	Route::get(''/'', ''HomeController@showWelcome'');\r\n	|\r\n	*/\r\n\r\n	public function SendSms($my_recipient,$my_message)\r\n		{\r\n			// Specify your login credentials\r\n			$username   = "adback";\r\n			$apikey     = "c933c719506a6838d4ceac95c9411b27331f34a117ca80473529d967ff9c46b0";\r\n			\r\n			// Specify the numbers that you want to send to in a comma-separated list\r\n			// Please ensure you include the country code (+254 for Kenya in this case)\r\n			$recipients = $my_recipient;\r\n			\r\n			// And of course we want our recipients to know what we really do\r\n			$message    = $my_message;\r\n			\r\n			// Create a new instance of our awesome gateway class\r\n			$gateway    = new AfricasTalkingGateway($username, $apikey);\r\n			\r\n			// Any gateway errors will be captured by our custom Exception class below, \r\n			// so wrap the call in a try-catch block\r\n			try \r\n			{ \r\n			  // Thats it, hit send and we''ll take care of the rest. \r\n			  $results = $gateway->sendMessage($recipients, $message);\r\n			  if($results) {\r\n			    return TRUE;\r\n			  }\r\n			  else {\r\n				  return FALSE;\r\n			  }\r\n			}\r\n			catch ( AfricasTalkingGatewayException $e )\r\n			{\r\n			  return FALSE;\r\n			}\r\n			\r\n			// DONE!!! \r\n		}\r\n	\r\n	public function postSendMessage()\r\n	{\r\n		//verify the user input and create account\r\n		$validator = Validator::make(Input::all(),array(\r\n				''Phone_Number''				=>''required'',\r\n				''Message''				=>''required'',\r\n\r\n		));\r\n		\r\n		if($validator->fails())\r\n		{\r\n			return Redirect::route(''sendmessage-get'')\r\n			->withErrors($validator)\r\n			->withInput();\r\n		}\r\n		else {\r\n			$phonenumbers = Input::get(''Phone_Number'');\r\n			$message = Input::get(''Message'');\r\n			\r\n			\r\n			//remove white spaces from the numbers\r\n			$compressedphonenumbers = str_replace('' '','''', $phonenumbers);\r\n\r\n			//get the specific phone numbers from the array\r\n 			$phonenumbers_array = explode('','', $compressedphonenumbers);\r\n\r\n 			$cost_incurred = sizeof($phonenumbers_array) * $this->cost($message);\r\n\r\n\r\n\r\n 			$owner = Owner::where(''id'',''='',1)->first();\r\n			$ownerid = $owner->owner_id;\r\n\r\n			$balance = DB::select(''select balance from clients.balance where id= ?'', array($ownerid));\r\n			$current_balance = end($balance)->balance;\r\n\r\n			if($cost_incurred<=$current_balance)\r\n			{\r\n\r\n 			$allsent = FALSE;\r\n 			$messagesent = FALSE;\r\n 			$todaysdate 	  = date("Y-m-d");\r\n\r\n\r\n\r\n 			foreach($phonenumbers_array as &$phonenumber)\r\n 			{\r\n			 //register the new user\r\n			 $user		= Message::create(array(\r\n			 				''phone_number''		=>$phonenumber,\r\n			 				''message''		=>$message,\r\n			 				''date''			=>$todaysdate,\r\n			 				''cost''			=>$this->cost($message),\r\n			 				''active''        =>TRUE\r\n			 ));\r\n\r\n			 $phone_number_send = ''+254''.substr($phonenumber, strlen($phonenumber)-9);\r\n\r\n			// $messagesent = $this->SendSms($phone_number_send, $message);\r\n			 \r\n			if($messagesent==TRUE)\r\n			 {\r\n				$allsent = TRUE;\r\n			 }\r\n			 \r\n			}\r\n\r\n			if($allsent==TRUE)\r\n			 {\r\n			 	$newbalance = $current_balance - $cost_incurred;\r\n\r\n			 	return $newbalance;\r\n\r\n			 	$updatebalance = DB::update(''update clients.balance set balance= ? where id= ?'', array($newbalance,$ownerid));\r\n\r\n				return Redirect::route(''sendmessage-get'')\r\n					->with(''global'',''Success! Your message has been sent'');	\r\n			 }\r\n			}\r\n			else\r\n			{\r\n				return Redirect::route(''sendmessage-get'')\r\n					->with(''global'',''Sorry, your current balance is insufficient.'')->withInput();\r\n			}\r\n		}\r\n		\r\n	}\r\n\r\n	public function postSendMessageToAll()\r\n	{\r\n		//verify the user input and create account\r\n		$validator = Validator::make(Input::all(),array(\r\n			''Message''				=>''required'',\r\n\r\n		));\r\n		\r\n		if($validator->fails())\r\n		{\r\n			return Redirect::route(''sendmessagetoall-get'')\r\n			->withErrors($validator)\r\n			->withInput();\r\n		}\r\n		else {\r\n			\r\n			$message = Input::get(''Message'');\r\n\r\n			 \r\n			//get the members information\r\n			$members = Member::where(''active'',''='',TRUE)->get();\r\n\r\n			$cost_incurred = $members->count() * $this->cost($message);\r\n			$owner = Owner::where(''id'',''='',1)->first();\r\n			$ownerid = $owner->owner_id;\r\n\r\n			$balance = DB::select(''select balance from clients.balance where id= ?'', array($ownerid));\r\n			$current_balance = end($balance)->balance;\r\n\r\n			if($cost_incurred<=$current_balance)\r\n			{\r\n			\r\n			$sent = FALSE;\r\n			$todaysdate 	  = date("Y-m-d");\r\n			\r\n			foreach($members as $member){\r\n				 //register the new user\r\n			 $user		= Message::create(array(\r\n			 				''phone_number''		=>$member->phone_number,\r\n			 				''message''			=>$message,\r\n			 				''member_id''			=>$member->id,\r\n			 				''cost''				=>$this->cost($message),\r\n			 				''date''			    =>$todaysdate,\r\n			 				''active''            =>TRUE\r\n			 ));\r\n\r\n\r\n			   $phone_number_send = ''+254''.substr($member->phone_number, strlen($member->phone_number)-9);\r\n			  // $sent = $this->SendSms($phone_number_send, $message);\r\n			}\r\n			\r\n			 \r\n			 if($sent==TRUE)\r\n			 {\r\n				return Redirect::route(''sendmessagetoall-get'')\r\n					->with(''global'',''Success! Your message has been sent'');	\r\n			 }\r\n			}\r\n			else\r\n			{\r\n				return Redirect::route(''sendmessagetoall-get'')\r\n					->with(''global'',''Sorry, your current balance is insufficient.'')->withInput();\r\n			}\r\n			\r\n		}\r\n		\r\n	}\r\n	\r\n	\r\n	public function postDeleteMessage()\r\n	{\r\n		\r\n		\r\n			$messageId  = Input::get(''messageID'');\r\n			\r\n						\r\n 			$message_delete = Message::where(''id'',''='',$messageId)->first();\r\n 			$message_delete->active = FALSE;\r\n\r\n 			$message_delete = $message_delete->save();\r\n			 \r\n			 if($message_delete)\r\n			 {\r\n				return Redirect::route(''sentmessage-get'')\r\n					->with(''global'',''Success! Message information has been deleted successfully.'');	\r\n			 }	\r\n	}\r\n		\r\n		public function cost($textmessage){\r\n             return ceil(strlen($textmessage)/160)*2;\r\n		}\r\n}\r\n<?php\r\ninclude_once(app_path().''/includes/AfricasTalkingGateway.php'');\r\n\r\n\r\n\r\nclass MessageController extends BaseController {\r\n\r\n	/*\r\n	|--------------------------------------------------------------------------\r\n	| Default Home Controller\r\n	|--------------------------------------------------------------------------\r\n	|\r\n	| You may wish to use controllers instead of, or in addition to, Closure\r\n	| based routes. That''s great! Here is an example controller method to\r\n	| get you started. To route to this controller, just add the route:\r\n	|\r\n	|	Route::get(''/'', ''HomeController@showWelcome'');\r\n	|\r\n	*/\r\n\r\n	public function SendSms($my_recipient,$my_message)\r\n		{\r\n			// Specify your login credentials\r\n			$username   = "adback";\r\n			$apikey     = "c933c719506a6838d4ceac95c9411b27331f34a117ca80473529d967ff9c46b0";\r\n			\r\n			// Specify the numbers that you want to send to in a comma-separated list\r\n			// Please ensure you include the country code (+254 for Kenya in this case)\r\n			$recipients = $my_recipient;\r\n			\r\n			// And of course we want our recipients to know what we really do\r\n			$message    = $my_message;\r\n			\r\n			// Create a new instance of our awesome gateway class\r\n			$gateway    = new AfricasTalkingGateway($username, $apikey);\r\n			\r\n			// Any gateway errors will be captured by our custom Exception class below, \r\n			// so wrap the call in a try-catch block\r\n			try \r\n			{ \r\n			  // Thats it, hit send and we''ll take care of the rest. \r\n			  $results = $gateway->sendMessage($recipients, $message);\r\n			  if($results) {\r\n			    return TRUE;\r\n			  }\r\n			  else {\r\n				  return FALSE;\r\n			  }\r\n			}\r\n			catch ( AfricasTalkingGatewayException $e )\r\n			{\r\n			  return FALSE;\r\n			}\r\n			\r\n			// DONE!!! \r\n		}\r\n	\r\n	public function postSendMessage()\r\n	{\r\n		//verify the user input and create account\r\n		$validator = Validator::make(Input::all(),array(\r\n				''Phone_Number''				=>''required'',\r\n				''Message''				=>''required'',\r\n\r\n		));\r\n		\r\n		if($validator->fails())\r\n		{\r\n			return Redirect::route(''sendmessage-get'')\r\n			->withErrors($validator)\r\n			->withInput();\r\n		}\r\n		else {\r\n			$phonenumbers = Input::get(''Phone_Number'');\r\n			$message = Input::get(''Message'');\r\n			\r\n			\r\n			//remove white spaces from the numbers\r\n			$compressedphonenumbers = str_replace('' '','''', $phonenumbers);\r\n\r\n			//get the specific phone numbers from the array\r\n 			$phonenumbers_array = explode('','', $compressedphonenumbers);\r\n\r\n 			$cost_incurred = sizeof($phonenumbers_array) * $this->cost($message);\r\n\r\n\r\n\r\n 			$owner = Owner::where(''id'',''='',1)->first();\r\n			$ownerid = $owner->owner_id;\r\n\r\n			$balance = DB::select(''select balance from clients.balance where id= ?'', array($ownerid));\r\n			$current_balance = end($balance)->balance;\r\n\r\n			if($cost_incurred<=$current_balance)\r\n			{\r\n\r\n 			$allsent = FALSE;\r\n 			$messagesent = FALSE;\r\n 			$todaysdate 	  = date("Y-m-d");\r\n\r\n\r\n\r\n 			foreach($phonenumbers_array as &$phonenumber)\r\n 			{\r\n			 //register the new user\r\n			 $user		= Message::create(array(\r\n			 				''phone_number''		=>$phonenumber,\r\n			 				''message''		=>$message,\r\n			 				''date''			=>$todaysdate,\r\n			 				''cost''			=>$this->cost($message),\r\n			 				''active''        =>TRUE\r\n			 ));\r\n\r\n			 $phone_number_send = ''+254''.substr($phonenumber, strlen($phonenumber)-9);\r\n\r\n			// $messagesent = $this->SendSms($phone_number_send, $message);\r\n			 \r\n			if($messagesent==TRUE)\r\n			 {\r\n				$allsent = TRUE;\r\n			 }\r\n			 \r\n			}\r\n\r\n			if($allsent==TRUE)\r\n			 {\r\n			 	$newbalance = $current_balance - $cost_incurred;\r\n\r\n			 	return $newbalance;\r\n\r\n			 	$updatebalance = DB::update(''update clients.balance set balance= ? where id= ?'', array($newbalance,$ownerid));\r\n\r\n				return Redirect::route(''sendmessage-get'')\r\n					->with(''global'',''Success! Your message has been sent'');	\r\n			 }\r\n			}\r\n			else\r\n			{\r\n				return Redirect::route(''sendmessage-get'')\r\n					->with(''global'',''Sorry, your current balance is insufficient.'')->withInput();\r\n			}\r\n		}\r\n		\r\n	}\r\n\r\n	public function postSendMessageToAll()\r\n	{\r\n		//verify the user input and create account\r\n		$validator = Validator::make(Input::all(),array(\r\n			''Message''				=>''required'',\r\n\r\n		));\r\n		\r\n		if($validator->fails())\r\n		{\r\n			return Redirect::route(''sendmessagetoall-get'')\r\n			->withErrors($validator)\r\n			->withInput();\r\n		}\r\n		else {\r\n			\r\n			$message = Input::get(''Message'');\r\n\r\n			 \r\n			//get the members information\r\n			$members = Member::where(''active'',''='',TRUE)->get();\r\n\r\n			$cost_incurred = $members->count() * $this->cost($message);\r\n			$owner = Owner::where(''id'',''='',1)->first();\r\n			$ownerid = $owner->owner_id;\r\n\r\n			$balance = DB::select(''select balance from clients.balance where id= ?'', array($ownerid));\r\n			$current_balance = end($balance)->balance;\r\n\r\n			if($cost_incurred<=$current_balance)\r\n			{\r\n			\r\n			$sent = FALSE;\r\n			$todaysdate 	  = date("Y-m-d");\r\n			\r\n			foreach($members as $member){\r\n				 //register the new user\r\n			 $user		= Message::create(array(\r\n			 				''phone_number''		=>$member->phone_number,\r\n			 				''message''			=>$message,\r\n			 				''member_id''			=>$member->id,\r\n			 				''cost''				=>$this->cost($message),\r\n			 				''date''			    =>$todaysdate,\r\n			 				''active''            =>TRUE\r\n			 ));\r\n\r\n\r\n			   $phone_number_send = ''+254''.substr($member->phone_number, strlen($member->phone_number)-9);\r\n			  // $sent = $this->SendSms($phone_number_send, $message);\r\n			}\r\n			\r\n			 \r\n			 if($sent==TRUE)\r\n			 {\r\n				return Redirect::route(''sendmessagetoall-get'')\r\n					->with(''global'',''Success! Your message has been sent'');	\r\n			 }\r\n			}\r\n			else\r\n			{\r\n				return Redirect::route(''sendmessagetoall-get'')\r\n					->with(''global'',''Sorry, your current balance is insufficient.'')->withInput();\r\n			}\r\n			\r\n		}\r\n		\r\n	}\r\n	\r\n	\r\n	public function postDeleteMessage()\r\n	{\r\n		\r\n		\r\n			$messageId  = Input::get(''messageID'');\r\n			\r\n						\r\n 			$message_delete = Message::where(''id'',''='',$messageId)->first();\r\n 			$message_delete->active = FALSE;\r\n\r\n 			$message_delete = $message_delete->save();\r\n			 \r\n			 if($message_delete)\r\n			 {\r\n				return Redirect::route(''sentmessage-get'')\r\n					->with(''global'',''Success! Message information has been deleted successfully.'');	\r\n			 }	\r\n	}\r\n		\r\n		public function cost($textmessage){\r\n             return ceil(strlen($textmessage)/160)*2;\r\n		}\r\n}\r\n<?php\r\ninclude_once(app_path().''/includes/AfricasTalkingGateway.php'');\r\n\r\n\r\n\r\nclass MessageController extends BaseController {\r\n\r\n	/*\r\n	|--------------------------------------------------------------------------\r\n	| Default Home Controller\r\n	|--------------------------------------------------------------------------\r\n	|\r\n	| You may wish to use controllers instead of, or in addition to, Closure\r\n	| based routes. That''s great! Here is an example controller method to\r\n	| get you started. To route to this controller, just add the route:\r\n	|\r\n	|	Route::get(''/'', ''HomeController@showWelcome'');\r\n	|\r\n	*/\r\n\r\n	public function SendSms($my_recipient,$my_message)\r\n		{\r\n			// Specify your login credentials\r\n			$username   = "adback";\r\n			$apikey     = "c933c719506a6838d4ceac95c9411b27331f34a117ca80473529d967ff9c46b0";\r\n			\r\n			// Specify the numbers that you want to send to in a comma-separated list\r\n			// Please ensure you include the country code (+254 for Kenya in this case)\r\n			$recipients = $my_recipient;\r\n			\r\n			// And of course we want our recipients to know what we really do\r\n			$message    = $my_message;\r\n			\r\n			// Create a new instance of our awesome gateway class\r\n			$gateway    = new AfricasTalkingGateway($username, $apikey);\r\n			\r\n			// Any gateway errors will be captured by our custom Exception class below, \r\n			// so wrap the call in a try-catch block\r\n			try \r\n			{ \r\n			  // Thats it, hit send and we''ll take care of the rest. \r\n			  $results = $gateway->sendMessage($recipients, $message);\r\n			  if($results) {\r\n			    return TRUE;\r\n			  }\r\n			  else {\r\n				  return FALSE;\r\n			  }\r\n			}\r\n			catch ( AfricasTalkingGatewayException $e )\r\n			{\r\n			  return FALSE;\r\n			}\r\n			\r\n			// DONE!!! \r\n		}\r\n	\r\n	public function postSendMessage()\r\n	{\r\n		//verify the user input and create account\r\n		$validator = Validator::make(Input::all(),array(\r\n				''Phone_Number''				=>''required'',\r\n				''Message''				=>''required'',\r\n\r\n		));\r\n		\r\n		if($validator->fails())\r\n		{\r\n			return Redirect::route(''sendmessage-get'')\r\n			->withErrors($validator)\r\n			->withInput();\r\n		}\r\n		else {\r\n			$phonenumbers = Input::get(''Phone_Number'');\r\n			$message = Input::get(''Message'');\r\n			\r\n			\r\n			//remove white spaces from the numbers\r\n			$compressedphonenumbers = str_replace('' '','''', $phonenumbers);\r\n\r\n			//get the specific phone numbers from the array\r\n 			$phonenumbers_array = explode('','', $compressedphonenumbers);\r\n\r\n 			$cost_incurred = sizeof($phonenumbers_array) * $this->cost($message);\r\n\r\n\r\n\r\n 			$owner = Owner::where(''id'',''='',1)->first();\r\n			$ownerid = $owner->owner_id;\r\n\r\n			$balance = DB::select(''select balance from clients.balance where id= ?'', array($ownerid));\r\n			$current_balance = end($balance)->balance;\r\n\r\n			if($cost_incurred<=$current_balance)\r\n			{\r\n\r\n 			$allsent = FALSE;\r\n 			$messagesent = FALSE;\r\n 			$todaysdate 	  = date("Y-m-d");\r\n\r\n\r\n\r\n 			foreach($phonenumbers_array as &$phonenumber)\r\n 			{\r\n			 //register the new user\r\n			 $user		= Message::create(array(\r\n			 				''phone_number''		=>$phonenumber,\r\n			 				''message''		=>$message,\r\n			 				''date''			=>$todaysdate,\r\n			 				''cost''			=>$this->cost($message),\r\n			 				''active''        =>TRUE\r\n			 ));\r\n\r\n			 $phone_number_send = ''+254''.substr($phonenumber, strlen($phonenumber)-9);\r\n\r\n			// $messagesent = $this->SendSms($phone_number_send, $message);\r\n			 \r\n			if($messagesent==TRUE)\r\n			 {\r\n				$allsent = TRUE;\r\n			 }\r\n			 \r\n			}\r\n\r\n			if($allsent==TRUE)\r\n			 {\r\n			 	$newbalance = $current_balance - $cost_incurred;\r\n\r\n			 	return $newbalance;\r\n\r\n			 	$updatebalance = DB::update(''update clients.balance set balance= ? where id= ?'', array($newbalance,$ownerid));\r\n\r\n				return Redirect::route(''sendmessage-get'')\r\n					->with(''global'',''Success! Your message has been sent'');	\r\n			 }\r\n			}\r\n			else\r\n			{\r\n				return Redirect::route(''sendmessage-get'')\r\n					->with(''global'',''Sorry, your current balance is insufficient.'')->withInput();\r\n			}\r\n		}\r\n		\r\n	}\r\n\r\n	public function postSendMessageToAll()\r\n	{\r\n		//verify the user input and create account\r\n		$validator = Validator::make(Input::all(),array(\r\n			''Message''				=>''required'',\r\n\r\n		));\r\n		\r\n		if($validator->fails())\r\n		{\r\n			return Redirect::route(''sendmessagetoall-get'')\r\n			->withErrors($validator)\r\n			->withInput();\r\n		}\r\n		else {\r\n			\r\n			$message = Input::get(''Message'');\r\n\r\n			 \r\n			//get the members information\r\n			$members = Member::where(''active'',''='',TRUE)->get();\r\n\r\n			$cost_incurred = $members->count() * $this->cost($message);\r\n			$owner = Owner::where(''id'',''='',1)->first();\r\n			$ownerid = $owner->owner_id;\r\n\r\n			$balance = DB::select(''select balance from clients.balance where id= ?'', array($ownerid));\r\n			$current_balance = end($balance)->balance;\r\n\r\n			if($cost_incurred<=$current_balance)\r\n			{\r\n			\r\n			$sent = FALSE;\r\n			$todaysdate 	  = date("Y-m-d");\r\n			\r\n			foreach($members as $member){\r\n				 //register the new user\r\n			 $user		= Message::create(array(\r\n			 				''phone_number''		=>$member->phone_number,\r\n			 				''message''			=>$message,\r\n			 				''member_id''			=>$member->id,\r\n			 				''cost''				=>$this->cost($message),\r\n			 				''date''			    =>$todaysdate,\r\n			 				''active''            =>TRUE\r\n			 ));\r\n\r\n\r\n			   $phone_number_send = ''+254''.substr($member->phone_number, strlen($member->phone_number)-9);\r\n			  // $sent = $this->SendSms($phone_number_send, $message);\r\n			}\r\n			\r\n			 \r\n			 if($sent==TRUE)\r\n			 {\r\n				return Redirect::route(''sendmessagetoall-get'')\r\n					->with(''global'',''Success! Your message has been sent'');	\r\n			 }\r\n			}\r\n			else\r\n			{\r\n				return Redirect::route(''sendmessagetoall-get'')\r\n					->with(''global'',''Sorry, your current balance is insufficient.'')->withInput();\r\n			}\r\n			\r\n		}\r\n		\r\n	}\r\n	\r\n	\r\n	public function postDeleteMessage()\r\n	{\r\n		\r\n		\r\n			$messageId  = Input::get(''messageID'');\r\n			\r\n						\r\n 			$message_delete = Message::where(''id'',''='',$messageId)->first();\r\n 			$message_delete->active = FALSE;\r\n\r\n 			$message_delete = $message_delete->save();\r\n			 \r\n			 if($message_delete)\r\n			 {\r\n				return Redirect::route(''sentmessage-get'')\r\n					->with(''global'',''Success! Message information has been deleted successfully.'');	\r\n			 }	\r\n	}\r\n		\r\n		public function cost($textmessage){\r\n             return ceil(strlen($textmessage)/160)*2;\r\n		}\r\n}\r\n<?php\r\ninclude_once(app_path().''/includes/AfricasTalkingGateway.php'');\r\n\r\n\r\n\r\nclass MessageController extends BaseController {\r\n\r\n	/*\r\n	|--------------------------------------------------------------------------\r\n	| Default Home Controller\r\n	|--------------------------------------------------------------------------\r\n	|\r\n	| You may wish to use controllers instead of, or in addition to, Closure\r\n	| based routes. That''s great! Here is an example controller method to\r\n	| get you started. To route to this controller, just add the route:\r\n	|\r\n	|	Route::get(''/'', ''HomeController@showWelcome'');\r\n	|\r\n	*/\r\n\r\n	public function SendSms($my_recipient,$my_message)\r\n		{\r\n			// Specify your login credentials\r\n			$username   = "adback";\r\n			$apikey     = "c933c719506a6838d4ceac95c9411b27331f34a117ca80473529d967ff9c46b0";\r\n			\r\n			// Specify the numbers that you want to send to in a comma-separated list\r\n			// Please ensure you include the country code (+254 for Kenya in this case)\r\n			$recipients = $my_recipient;\r\n			\r\n			// And of course we want our recipients to know what we really do\r\n			$message    = $my_message;\r\n			\r\n			// Create a new instance of our awesome gateway class\r\n			$gateway    = new AfricasTalkingGateway($username, $apikey);\r\n			\r\n			// Any gateway errors will be captured by our custom Exception class below, \r\n			// so wrap the call in a try-catch block\r\n			try \r\n			{ \r\n			  // Thats it, hit send and we''ll take care of the rest. \r\n			  $results = $gateway->sendMessage($recipients, $message);\r\n			  if($results) {\r\n			    return TRUE;\r\n			  }\r\n			  else {\r\n				  return FALSE;\r\n			  }\r\n			}\r\n			catch ( AfricasTalkingGatewayException $e )\r\n			{\r\n			  return FALSE;\r\n			}\r\n			\r\n			// DONE!!! \r\n		}\r\n	\r\n	public function postSendMessage()\r\n	{\r\n		//verify the user input and create account\r\n		$validator = Validator::make(Input::all(),array(\r\n				''Phone_Number''				=>''required'',\r\n				''Message''				=>''required'',\r\n\r\n		));\r\n		\r\n		if($validator->fails())\r\n		{\r\n			return Redirect::route(''sendmessage-get'')\r\n			->withErrors($validator)\r\n			->withInput();\r\n		}\r\n		else {\r\n			$phonenumbers = Input::get(''Phone_Number'');\r\n			$message = Input::get(''Message'');\r\n			\r\n			\r\n			//remove white spaces from the numbers\r\n			$compressedphonenumbers = str_replace('' '','''', $phonenumbers);\r\n\r\n			//get the specific phone numbers from the array\r\n 			$phonenumbers_array = explode('','', $compressedphonenumbers);\r\n\r\n 			$cost_incurred = sizeof($phonenumbers_array) * $this->cost($message);\r\n\r\n\r\n\r\n 			$owner = Owner::where(''id'',''='',1)->first();\r\n			$ownerid = $owner->owner_id;\r\n\r\n			$balance = DB::select(''select balance from clients.balance where id= ?'', array($ownerid));\r\n			$current_balance = end($balance)->balance;\r\n\r\n			if($cost_incurred<=$current_balance)\r\n			{\r\n\r\n 			$allsent = FALSE;\r\n 			$messagesent = FALSE;\r\n 			$todaysdate 	  = date("Y-m-d");\r\n\r\n\r\n\r\n 			foreach($phonenumbers_array as &$phonenumber)\r\n 			{\r\n			 //register the new user\r\n			 $user		= Message::create(array(\r\n			 				''phone_number''		=>$phonenumber,\r\n			 				''message''		=>$message,\r\n			 				''date''			=>$todaysdate,\r\n			 				''cost''			=>$this->cost($message),\r\n			 				''active''        =>TRUE\r\n			 ));\r\n\r\n			 $phone_number_send = ''+254''.substr($phonenumber, strlen($phonenumber)-9);\r\n\r\n			// $messagesent = $this->SendSms($phone_number_send, $message);\r\n			 \r\n			if($messagesent==TRUE)\r\n			 {\r\n				$allsent = TRUE;\r\n			 }\r\n			 \r\n			}\r\n\r\n			if($allsent==TRUE)\r\n			 {\r\n			 	$newbalance = $current_balance - $cost_incurred;\r\n\r\n			 	return $newbalance;\r\n\r\n			 	$updatebalance = DB::update(''update clients.balance set balance= ? where id= ?'', array($newbalance,$ownerid));\r\n\r\n				return Redirect::route(''sendmessage-get'')\r\n					->with(''global'',''Success! Your message has been sent'');	\r\n			 }\r\n			}\r\n			else\r\n			{\r\n				return Redirect::route(''sendmessage-get'')\r\n					->with(''global'',''Sorry, your current balance is insufficient.'')->withInput();\r\n			}\r\n		}\r\n		\r\n	}\r\n\r\n	public function postSendMessageToAll()\r\n	{\r\n		//verify the user input and create account\r\n		$validator = Validator::make(Input::all(),array(\r\n			''Message''				=>''required'',\r\n\r\n		));\r\n		\r\n		if($validator->fails())\r\n		{\r\n			return Redirect::route(''sendmessagetoall-get'')\r\n			->withErrors($validator)\r\n			->withInput();\r\n		}\r\n		else {\r\n			\r\n			$message = Input::get(''Message'');\r\n\r\n			 \r\n			//get the members information\r\n			$members = Member::where(''active'',''='',TRUE)->get();\r\n\r\n			$cost_incurred = $members->count() * $this->cost($message);\r\n			$owner = Owner::where(''id'',''='',1)->first();\r\n			$ownerid = $owner->owner_id;\r\n\r\n			$balance = DB::select(''select balance from clients.balance where id= ?'', array($ownerid));\r\n			$current_balance = end($balance)->balance;\r\n\r\n			if($cost_incurred<=$current_balance)\r\n			{\r\n			\r\n			$sent = FALSE;\r\n			$todaysdate 	  = date("Y-m-d");\r\n			\r\n			foreach($members as $member){\r\n				 //register the new user\r\n			 $user		= Message::create(array(\r\n			 				''phone_number''		=>$member->phone_number,\r\n			 				''message''			=>$message,\r\n			 				''member_id''			=>$member->id,\r\n			 				''cost''				=>$this->cost($message),\r\n			 				''date''			    =>$todaysdate,\r\n			 				''active''            =>TRUE\r\n			 ));\r\n\r\n\r\n			   $phone_number_send = ''+254''.substr($member->phone_number, strlen($member->phone_number)-9);\r\n			  // $sent = $this->SendSms($phone_number_send, $message);\r\n			}\r\n			\r\n			 \r\n			 if($sent==TRUE)\r\n			 {\r\n				return Redirect::route(''sendmessagetoall-get'')\r\n					->with(''global'',''Success! Your message has been sent'');	\r\n			 }\r\n			}\r\n			else\r\n			{\r\n				return Redirect::route(''sendmessagetoall-get'')\r\n					->with(''global'',''Sorry, your current balance is insufficient.'')->withInput();\r\n			}\r\n			\r\n		}\r\n		\r\n	}\r\n	\r\n	\r\n	public function postDeleteMessage()\r\n	{\r\n		\r\n		\r\n			$messageId  = Input::get(''messageID'');\r\n			\r\n						\r\n 			$message_delete = Message::where(''id'',''='',$messageId)->first();\r\n 			$message_delete->active = FALSE;\r\n\r\n 			$message_delete = $message_delete->save();\r\n			 \r\n			 if($message_delete)\r\n			 {\r\n				return Redirect::route(''sentmessage-get'')\r\n					->with(''global'',''Success! Message information has been deleted successfully.'');	\r\n			 }	\r\n	}\r\n		\r\n		public function cost($textmessage){\r\n             return ceil(strlen($textmessage)/160)*2;\r\n		}\r\n}\r\n<?php\r\ninclude_once(app_path().''/includes/AfricasTalkingGateway.php'');\r\n\r\n\r\n\r\nclass MessageController extends BaseController {\r\n\r\n	/*\r\n	|--------------------------------------------------------------------------\r\n	| Default Home Controller\r\n	|--------------------------------------------------------------------------\r\n	|\r\n	| You may wish to use controllers instead of, or in addition to, Closure\r\n	| based routes. That''s great! Here is an example controller method to\r\n	| get you started. To route to this controller, just add the route:\r\n	|\r\n	|	Route::get(''/'', ''HomeController@showWelcome'');\r\n	|\r\n	*/\r\n\r\n	public function SendSms($my_recipient,$my_message)\r\n		{\r\n			// Specify your login credentials\r\n			$username   = "adback";\r\n			$apikey     = "c933c719506a6838d4ceac95c9411b27331f34a117ca80473529d967ff9c46b0";\r\n			\r\n			// Specify the numbers that you want to send to in a comma-separated list\r\n			// Please ensure you include the country code (+254 for Kenya in this case)\r\n			$recipients = $my_recipient;\r\n			\r\n			// And of course we want our recipients to know what we really do\r\n			$message    = $my_message;\r\n			\r\n			// Create a new instance of our awesome gateway class\r\n			$gateway    = new AfricasTalkingGateway($username, $apikey);\r\n			\r\n			// Any gateway errors will be captured by our custom Exception class below, \r\n			// so wrap the call in a try-catch block\r\n			try \r\n			{ \r\n			  // Thats it, hit send and we''ll take care of the rest. \r\n			  $results = $gateway->sendMessage($recipients, $message);\r\n			  if($results) {\r\n			    return TRUE;\r\n			  }\r\n			  else {\r\n				  return FALSE;\r\n			  }\r\n			}\r\n			catch ( AfricasTalkingGatewayException $e )\r\n			{\r\n			  return FALSE;\r\n			}\r\n			\r\n			// DONE!!! \r\n		}\r\n	\r\n	public function postSendMessage()\r\n	{\r\n		//verify the user input and create account\r\n		$validator = Validator::make(Input::all(),array(\r\n				''Phone_Number''				=>''required'',\r\n				''Message''				=>''required'',\r\n\r\n		));\r\n		\r\n		if($validator->fails())\r\n		{\r\n			return Redirect::route(''sendmessage-get'')\r\n			->withErrors($validator)\r\n			->withInput();\r\n		}\r\n		else {\r\n			$phonenumbers = Input::get(''Phone_Number'');\r\n			$message = Input::get(''Message'');\r\n			\r\n			\r\n			//remove white spaces from the numbers\r\n			$compressedphonenumbers = str_replace('' '','''', $phonenumbers);\r\n\r\n			//get the specific phone numbers from the array\r\n 			$phonenumbers_array = explode('','', $compressedphonenumbers);\r\n\r\n 			$cost_incurred = sizeof($phonenumbers_array) * $this->cost($message);\r\n\r\n\r\n\r\n 			$owner = Owner::where(''id'',''='',1)->first();\r\n			$ownerid = $owner->owner_id;\r\n\r\n			$balance = DB::select(''select balance from clients.balance where id= ?'', array($ownerid));\r\n			$current_balance = end($balance)->balance;\r\n\r\n			if($cost_incurred<=$current_balance)\r\n			{\r\n\r\n 			$allsent = FALSE;\r\n 			$messagesent = FALSE;\r\n 			$todaysdate 	  = date("Y-m-d");\r\n\r\n\r\n\r\n 			foreach($phonenumbers_array as &$phonenumber)\r\n 			{\r\n			 //register the new user\r\n			 $user		= Message::create(array(\r\n			 				''phone_number''		=>$phonenumber,\r\n			 				''message''		=>$message,\r\n			 				''date''			=>$todaysdate,\r\n			 				''cost''			=>$this->cost($message),\r\n			 				''active''        =>TRUE\r\n			 ));\r\n\r\n			 $phone_number_send = ''+254''.substr($phonenumber, strlen($phonenumber)-9);\r\n\r\n			// $messagesent = $this->SendSms($phone_number_send, $message);\r\n			 \r\n			if($messagesent==TRUE)\r\n			 {\r\n				$allsent = TRUE;\r\n			 }\r\n			 \r\n			}\r\n\r\n			if($allsent==TRUE)\r\n			 {\r\n			 	$newbalance = $current_balance - $cost_incurred;\r\n\r\n			 	return $newbalance;\r\n\r\n			 	$updatebalance = DB::update(''update clients.balance set balance= ? where id= ?'', array($newbalance,$ownerid));\r\n\r\n				return Redirect::route(''sendmessage-get'')\r\n					->with(''global'',''Success! Your message has been sent'');	\r\n			 }\r\n			}\r\n			else\r\n			{\r\n				return Redirect::route(''sendmessage-get'')\r\n					->with(''global'',''Sorry, your current balance is insufficient.'')->withInput();\r\n			}\r\n		}\r\n		\r\n	}\r\n\r\n	public function postSendMessageToAll()\r\n	{\r\n		//verify the user input and create account\r\n		$validator = Validator::make(Input::all(),array(\r\n			''Message''				=>''required'',\r\n\r\n		));\r\n		\r\n		if($validator->fails())\r\n		{\r\n			return Redirect::route(''sendmessagetoall-get'')\r\n			->withErrors($validator)\r\n			->withInput();\r\n		}\r\n		else {\r\n			\r\n			$message = Input::get(''Message'');\r\n\r\n			 \r\n			//get the members information\r\n			$members = Member::where(''active'',''='',TRUE)->get();\r\n\r\n			$cost_incurred = $members->count() * $this->cost($message);\r\n			$owner = Owner::where(''id'',''='',1)->first();\r\n			$ownerid = $owner->owner_id;\r\n\r\n			$balance = DB::select(''select balance from clients.balance where id= ?'', array($ownerid));\r\n			$current_balance = end($balance)->balance;\r\n\r\n			if($cost_incurred<=$current_balance)\r\n			{\r\n			\r\n			$sent = FALSE;\r\n			$todaysdate 	  = date("Y-m-d");\r\n			\r\n			foreach($members as $member){\r\n				 //register the new user\r\n			 $user		= Message::create(array(\r\n			 				''phone_number''		=>$member->phone_number,\r\n			 				''message''			=>$message,\r\n			 				''member_id''			=>$member->id,\r\n			 				''cost''				=>$this->cost($message),\r\n			 				''date''			    =>$todaysdate,\r\n			 				''active''            =>TRUE\r\n			 ));\r\n\r\n\r\n			   $phone_number_send = ''+254''.substr($member->phone_number, strlen($member->phone_number)-9);\r\n			  // $sent = $this->SendSms($phone_number_send, $message);\r\n			}\r\n			\r\n			 \r\n			 if($sent==TRUE)\r\n			 {\r\n				return Redirect::route(''sendmessagetoall-get'')\r\n					->with(''global'',''Success! Your message has been sent'');	\r\n			 }\r\n			}\r\n			else\r\n			{\r\n				return Redirect::route(''sendmessagetoall-get'')\r\n					->with(''global'',''Sorry, your current balance is insufficient.'')->withInput();\r\n			}\r\n			\r\n		}\r\n		\r\n	}\r\n	\r\n	\r\n	public function postDeleteMessage()\r\n	{\r\n		\r\n		\r\n			$messageId  = Input::get(''messageID'');\r\n			\r\n						\r\n 			$message_delete = Message::where(''id'',''='',$messageId)->first();\r\n 			$message_delete->active = FALSE;\r\n\r\n 			$message_delete = $message_delete->save();\r\n			 \r\n			 if($message_delete)\r\n			 {\r\n				return Redirect::route(''sentmessage-get'')\r\n					->with(''global'',''Success! Message information has been deleted successfully.'');	\r\n			 }	\r\n	}\r\n		\r\n		public function cost($textmessage){\r\n             return ceil(strlen($textmessage)/160)*2;\r\n		}\r\n}\r\n', '468.00', '2014-11-09 06:54:42', '2014-11-16 06:28:11', '44444', '2014-11-09', 0);
INSERT INTO `messages` (`id`, `member_id`, `message`, `cost`, `created_at`, `updated_at`, `phone_number`, `date`, `active`) VALUES
(55, 0, 'haloooo<?php\r\ninclude_once(app_path().''/includes/AfricasTalkingGateway.php'');\r\n\r\n\r\n\r\nclass MessageController extends BaseController {\r\n\r\n	/*\r\n	|--------------------------------------------------------------------------\r\n	| Default Home Controller\r\n	|--------------------------------------------------------------------------\r\n	|\r\n	| You may wish to use controllers instead of, or in addition to, Closure\r\n	| based routes. That''s great! Here is an example controller method to\r\n	| get you started. To route to this controller, just add the route:\r\n	|\r\n	|	Route::get(''/'', ''HomeController@showWelcome'');\r\n	|\r\n	*/\r\n\r\n	public function SendSms($my_recipient,$my_message)\r\n		{\r\n			// Specify your login credentials\r\n			$username   = "adback";\r\n			$apikey     = "c933c719506a6838d4ceac95c9411b27331f34a117ca80473529d967ff9c46b0";\r\n			\r\n			// Specify the numbers that you want to send to in a comma-separated list\r\n			// Please ensure you include the country code (+254 for Kenya in this case)\r\n			$recipients = $my_recipient;\r\n			\r\n			// And of course we want our recipients to know what we really do\r\n			$message    = $my_message;\r\n			\r\n			// Create a new instance of our awesome gateway class\r\n			$gateway    = new AfricasTalkingGateway($username, $apikey);\r\n			\r\n			// Any gateway errors will be captured by our custom Exception class below, \r\n			// so wrap the call in a try-catch block\r\n			try \r\n			{ \r\n			  // Thats it, hit send and we''ll take care of the rest. \r\n			  $results = $gateway->sendMessage($recipients, $message);\r\n			  if($results) {\r\n			    return TRUE;\r\n			  }\r\n			  else {\r\n				  return FALSE;\r\n			  }\r\n			}\r\n			catch ( AfricasTalkingGatewayException $e )\r\n			{\r\n			  return FALSE;\r\n			}\r\n			\r\n			// DONE!!! \r\n		}\r\n	\r\n	public function postSendMessage()\r\n	{\r\n		//verify the user input and create account\r\n		$validator = Validator::make(Input::all(),array(\r\n				''Phone_Number''				=>''required'',\r\n				''Message''				=>''required'',\r\n\r\n		));\r\n		\r\n		if($validator->fails())\r\n		{\r\n			return Redirect::route(''sendmessage-get'')\r\n			->withErrors($validator)\r\n			->withInput();\r\n		}\r\n		else {\r\n			$phonenumbers = Input::get(''Phone_Number'');\r\n			$message = Input::get(''Message'');\r\n			\r\n			\r\n			//remove white spaces from the numbers\r\n			$compressedphonenumbers = str_replace('' '','''', $phonenumbers);\r\n\r\n			//get the specific phone numbers from the array\r\n 			$phonenumbers_array = explode('','', $compressedphonenumbers);\r\n\r\n 			$cost_incurred = sizeof($phonenumbers_array) * $this->cost($message);\r\n\r\n\r\n\r\n 			$owner = Owner::where(''id'',''='',1)->first();\r\n			$ownerid = $owner->owner_id;\r\n\r\n			$balance = DB::select(''select balance from clients.balance where id= ?'', array($ownerid));\r\n			$current_balance = end($balance)->balance;\r\n\r\n			if($cost_incurred<=$current_balance)\r\n			{\r\n\r\n 			$allsent = FALSE;\r\n 			$messagesent = FALSE;\r\n 			$todaysdate 	  = date("Y-m-d");\r\n\r\n\r\n\r\n 			foreach($phonenumbers_array as &$phonenumber)\r\n 			{\r\n			 //register the new user\r\n			 $user		= Message::create(array(\r\n			 				''phone_number''		=>$phonenumber,\r\n			 				''message''		=>$message,\r\n			 				''date''			=>$todaysdate,\r\n			 				''cost''			=>$this->cost($message),\r\n			 				''active''        =>TRUE\r\n			 ));\r\n\r\n			 $phone_number_send = ''+254''.substr($phonenumber, strlen($phonenumber)-9);\r\n\r\n			// $messagesent = $this->SendSms($phone_number_send, $message);\r\n			 \r\n			if($messagesent==TRUE)\r\n			 {\r\n				$allsent = TRUE;\r\n			 }\r\n			 \r\n			}\r\n\r\n			if($allsent==TRUE)\r\n			 {\r\n			 	$newbalance = $current_balance - $cost_incurred;\r\n\r\n			 	return $newbalance;\r\n\r\n			 	$updatebalance = DB::update(''update clients.balance set balance= ? where id= ?'', array($newbalance,$ownerid));\r\n\r\n				return Redirect::route(''sendmessage-get'')\r\n					->with(''global'',''Success! Your message has been sent'');	\r\n			 }\r\n			}\r\n			else\r\n			{\r\n				return Redirect::route(''sendmessage-get'')\r\n					->with(''global'',''Sorry, your current balance is insufficient.'')->withInput();\r\n			}\r\n		}\r\n		\r\n	}\r\n\r\n	public function postSendMessageToAll()\r\n	{\r\n		//verify the user input and create account\r\n		$validator = Validator::make(Input::all(),array(\r\n			''Message''				=>''required'',\r\n\r\n		));\r\n		\r\n		if($validator->fails())\r\n		{\r\n			return Redirect::route(''sendmessagetoall-get'')\r\n			->withErrors($validator)\r\n			->withInput();\r\n		}\r\n		else {\r\n			\r\n			$message = Input::get(''Message'');\r\n\r\n			 \r\n			//get the members information\r\n			$members = Member::where(''active'',''='',TRUE)->get();\r\n\r\n			$cost_incurred = $members->count() * $this->cost($message);\r\n			$owner = Owner::where(''id'',''='',1)->first();\r\n			$ownerid = $owner->owner_id;\r\n\r\n			$balance = DB::select(''select balance from clients.balance where id= ?'', array($ownerid));\r\n			$current_balance = end($balance)->balance;\r\n\r\n			if($cost_incurred<=$current_balance)\r\n			{\r\n			\r\n			$sent = FALSE;\r\n			$todaysdate 	  = date("Y-m-d");\r\n			\r\n			foreach($members as $member){\r\n				 //register the new user\r\n			 $user		= Message::create(array(\r\n			 				''phone_number''		=>$member->phone_number,\r\n			 				''message''			=>$message,\r\n			 				''member_id''			=>$member->id,\r\n			 				''cost''				=>$this->cost($message),\r\n			 				''date''			    =>$todaysdate,\r\n			 				''active''            =>TRUE\r\n			 ));\r\n\r\n\r\n			   $phone_number_send = ''+254''.substr($member->phone_number, strlen($member->phone_number)-9);\r\n			  // $sent = $this->SendSms($phone_number_send, $message);\r\n			}\r\n			\r\n			 \r\n			 if($sent==TRUE)\r\n			 {\r\n				return Redirect::route(''sendmessagetoall-get'')\r\n					->with(''global'',''Success! Your message has been sent'');	\r\n			 }\r\n			}\r\n			else\r\n			{\r\n				return Redirect::route(''sendmessagetoall-get'')\r\n					->with(''global'',''Sorry, your current balance is insufficient.'')->withInput();\r\n			}\r\n			\r\n		}\r\n		\r\n	}\r\n	\r\n	\r\n	public function postDeleteMessage()\r\n	{\r\n		\r\n		\r\n			$messageId  = Input::get(''messageID'');\r\n			\r\n						\r\n 			$message_delete = Message::where(''id'',''='',$messageId)->first();\r\n 			$message_delete->active = FALSE;\r\n\r\n 			$message_delete = $message_delete->save();\r\n			 \r\n			 if($message_delete)\r\n			 {\r\n				return Redirect::route(''sentmessage-get'')\r\n					->with(''global'',''Success! Message information has been deleted successfully.'');	\r\n			 }	\r\n	}\r\n		\r\n		public function cost($textmessage){\r\n             return ceil(strlen($textmessage)/160)*2;\r\n		}\r\n}\r\n<?php\r\ninclude_once(app_path().''/includes/AfricasTalkingGateway.php'');\r\n\r\n\r\n\r\nclass MessageController extends BaseController {\r\n\r\n	/*\r\n	|--------------------------------------------------------------------------\r\n	| Default Home Controller\r\n	|--------------------------------------------------------------------------\r\n	|\r\n	| You may wish to use controllers instead of, or in addition to, Closure\r\n	| based routes. That''s great! Here is an example controller method to\r\n	| get you started. To route to this controller, just add the route:\r\n	|\r\n	|	Route::get(''/'', ''HomeController@showWelcome'');\r\n	|\r\n	*/\r\n\r\n	public function SendSms($my_recipient,$my_message)\r\n		{\r\n			// Specify your login credentials\r\n			$username   = "adback";\r\n			$apikey     = "c933c719506a6838d4ceac95c9411b27331f34a117ca80473529d967ff9c46b0";\r\n			\r\n			// Specify the numbers that you want to send to in a comma-separated list\r\n			// Please ensure you include the country code (+254 for Kenya in this case)\r\n			$recipients = $my_recipient;\r\n			\r\n			// And of course we want our recipients to know what we really do\r\n			$message    = $my_message;\r\n			\r\n			// Create a new instance of our awesome gateway class\r\n			$gateway    = new AfricasTalkingGateway($username, $apikey);\r\n			\r\n			// Any gateway errors will be captured by our custom Exception class below, \r\n			// so wrap the call in a try-catch block\r\n			try \r\n			{ \r\n			  // Thats it, hit send and we''ll take care of the rest. \r\n			  $results = $gateway->sendMessage($recipients, $message);\r\n			  if($results) {\r\n			    return TRUE;\r\n			  }\r\n			  else {\r\n				  return FALSE;\r\n			  }\r\n			}\r\n			catch ( AfricasTalkingGatewayException $e )\r\n			{\r\n			  return FALSE;\r\n			}\r\n			\r\n			// DONE!!! \r\n		}\r\n	\r\n	public function postSendMessage()\r\n	{\r\n		//verify the user input and create account\r\n		$validator = Validator::make(Input::all(),array(\r\n				''Phone_Number''				=>''required'',\r\n				''Message''				=>''required'',\r\n\r\n		));\r\n		\r\n		if($validator->fails())\r\n		{\r\n			return Redirect::route(''sendmessage-get'')\r\n			->withErrors($validator)\r\n			->withInput();\r\n		}\r\n		else {\r\n			$phonenumbers = Input::get(''Phone_Number'');\r\n			$message = Input::get(''Message'');\r\n			\r\n			\r\n			//remove white spaces from the numbers\r\n			$compressedphonenumbers = str_replace('' '','''', $phonenumbers);\r\n\r\n			//get the specific phone numbers from the array\r\n 			$phonenumbers_array = explode('','', $compressedphonenumbers);\r\n\r\n 			$cost_incurred = sizeof($phonenumbers_array) * $this->cost($message);\r\n\r\n\r\n\r\n 			$owner = Owner::where(''id'',''='',1)->first();\r\n			$ownerid = $owner->owner_id;\r\n\r\n			$balance = DB::select(''select balance from clients.balance where id= ?'', array($ownerid));\r\n			$current_balance = end($balance)->balance;\r\n\r\n			if($cost_incurred<=$current_balance)\r\n			{\r\n\r\n 			$allsent = FALSE;\r\n 			$messagesent = FALSE;\r\n 			$todaysdate 	  = date("Y-m-d");\r\n\r\n\r\n\r\n 			foreach($phonenumbers_array as &$phonenumber)\r\n 			{\r\n			 //register the new user\r\n			 $user		= Message::create(array(\r\n			 				''phone_number''		=>$phonenumber,\r\n			 				''message''		=>$message,\r\n			 				''date''			=>$todaysdate,\r\n			 				''cost''			=>$this->cost($message),\r\n			 				''active''        =>TRUE\r\n			 ));\r\n\r\n			 $phone_number_send = ''+254''.substr($phonenumber, strlen($phonenumber)-9);\r\n\r\n			// $messagesent = $this->SendSms($phone_number_send, $message);\r\n			 \r\n			if($messagesent==TRUE)\r\n			 {\r\n				$allsent = TRUE;\r\n			 }\r\n			 \r\n			}\r\n\r\n			if($allsent==TRUE)\r\n			 {\r\n			 	$newbalance = $current_balance - $cost_incurred;\r\n\r\n			 	return $newbalance;\r\n\r\n			 	$updatebalance = DB::update(''update clients.balance set balance= ? where id= ?'', array($newbalance,$ownerid));\r\n\r\n				return Redirect::route(''sendmessage-get'')\r\n					->with(''global'',''Success! Your message has been sent'');	\r\n			 }\r\n			}\r\n			else\r\n			{\r\n				return Redirect::route(''sendmessage-get'')\r\n					->with(''global'',''Sorry, your current balance is insufficient.'')->withInput();\r\n			}\r\n		}\r\n		\r\n	}\r\n\r\n	public function postSendMessageToAll()\r\n	{\r\n		//verify the user input and create account\r\n		$validator = Validator::make(Input::all(),array(\r\n			''Message''				=>''required'',\r\n\r\n		));\r\n		\r\n		if($validator->fails())\r\n		{\r\n			return Redirect::route(''sendmessagetoall-get'')\r\n			->withErrors($validator)\r\n			->withInput();\r\n		}\r\n		else {\r\n			\r\n			$message = Input::get(''Message'');\r\n\r\n			 \r\n			//get the members information\r\n			$members = Member::where(''active'',''='',TRUE)->get();\r\n\r\n			$cost_incurred = $members->count() * $this->cost($message);\r\n			$owner = Owner::where(''id'',''='',1)->first();\r\n			$ownerid = $owner->owner_id;\r\n\r\n			$balance = DB::select(''select balance from clients.balance where id= ?'', array($ownerid));\r\n			$current_balance = end($balance)->balance;\r\n\r\n			if($cost_incurred<=$current_balance)\r\n			{\r\n			\r\n			$sent = FALSE;\r\n			$todaysdate 	  = date("Y-m-d");\r\n			\r\n			foreach($members as $member){\r\n				 //register the new user\r\n			 $user		= Message::create(array(\r\n			 				''phone_number''		=>$member->phone_number,\r\n			 				''message''			=>$message,\r\n			 				''member_id''			=>$member->id,\r\n			 				''cost''				=>$this->cost($message),\r\n			 				''date''			    =>$todaysdate,\r\n			 				''active''            =>TRUE\r\n			 ));\r\n\r\n\r\n			   $phone_number_send = ''+254''.substr($member->phone_number, strlen($member->phone_number)-9);\r\n			  // $sent = $this->SendSms($phone_number_send, $message);\r\n			}\r\n			\r\n			 \r\n			 if($sent==TRUE)\r\n			 {\r\n				return Redirect::route(''sendmessagetoall-get'')\r\n					->with(''global'',''Success! Your message has been sent'');	\r\n			 }\r\n			}\r\n			else\r\n			{\r\n				return Redirect::route(''sendmessagetoall-get'')\r\n					->with(''global'',''Sorry, your current balance is insufficient.'')->withInput();\r\n			}\r\n			\r\n		}\r\n		\r\n	}\r\n	\r\n	\r\n	public function postDeleteMessage()\r\n	{\r\n		\r\n		\r\n			$messageId  = Input::get(''messageID'');\r\n			\r\n						\r\n 			$message_delete = Message::where(''id'',''='',$messageId)->first();\r\n 			$message_delete->active = FALSE;\r\n\r\n 			$message_delete = $message_delete->save();\r\n			 \r\n			 if($message_delete)\r\n			 {\r\n				return Redirect::route(''sentmessage-get'')\r\n					->with(''global'',''Success! Message information has been deleted successfully.'');	\r\n			 }	\r\n	}\r\n		\r\n		public function cost($textmessage){\r\n             return ceil(strlen($textmessage)/160)*2;\r\n		}\r\n}\r\n<?php\r\ninclude_once(app_path().''/includes/AfricasTalkingGateway.php'');\r\n\r\n\r\n\r\nclass MessageController extends BaseController {\r\n\r\n	/*\r\n	|--------------------------------------------------------------------------\r\n	| Default Home Controller\r\n	|--------------------------------------------------------------------------\r\n	|\r\n	| You may wish to use controllers instead of, or in addition to, Closure\r\n	| based routes. That''s great! Here is an example controller method to\r\n	| get you started. To route to this controller, just add the route:\r\n	|\r\n	|	Route::get(''/'', ''HomeController@showWelcome'');\r\n	|\r\n	*/\r\n\r\n	public function SendSms($my_recipient,$my_message)\r\n		{\r\n			// Specify your login credentials\r\n			$username   = "adback";\r\n			$apikey     = "c933c719506a6838d4ceac95c9411b27331f34a117ca80473529d967ff9c46b0";\r\n			\r\n			// Specify the numbers that you want to send to in a comma-separated list\r\n			// Please ensure you include the country code (+254 for Kenya in this case)\r\n			$recipients = $my_recipient;\r\n			\r\n			// And of course we want our recipients to know what we really do\r\n			$message    = $my_message;\r\n			\r\n			// Create a new instance of our awesome gateway class\r\n			$gateway    = new AfricasTalkingGateway($username, $apikey);\r\n			\r\n			// Any gateway errors will be captured by our custom Exception class below, \r\n			// so wrap the call in a try-catch block\r\n			try \r\n			{ \r\n			  // Thats it, hit send and we''ll take care of the rest. \r\n			  $results = $gateway->sendMessage($recipients, $message);\r\n			  if($results) {\r\n			    return TRUE;\r\n			  }\r\n			  else {\r\n				  return FALSE;\r\n			  }\r\n			}\r\n			catch ( AfricasTalkingGatewayException $e )\r\n			{\r\n			  return FALSE;\r\n			}\r\n			\r\n			// DONE!!! \r\n		}\r\n	\r\n	public function postSendMessage()\r\n	{\r\n		//verify the user input and create account\r\n		$validator = Validator::make(Input::all(),array(\r\n				''Phone_Number''				=>''required'',\r\n				''Message''				=>''required'',\r\n\r\n		));\r\n		\r\n		if($validator->fails())\r\n		{\r\n			return Redirect::route(''sendmessage-get'')\r\n			->withErrors($validator)\r\n			->withInput();\r\n		}\r\n		else {\r\n			$phonenumbers = Input::get(''Phone_Number'');\r\n			$message = Input::get(''Message'');\r\n			\r\n			\r\n			//remove white spaces from the numbers\r\n			$compressedphonenumbers = str_replace('' '','''', $phonenumbers);\r\n\r\n			//get the specific phone numbers from the array\r\n 			$phonenumbers_array = explode('','', $compressedphonenumbers);\r\n\r\n 			$cost_incurred = sizeof($phonenumbers_array) * $this->cost($message);\r\n\r\n\r\n\r\n 			$owner = Owner::where(''id'',''='',1)->first();\r\n			$ownerid = $owner->owner_id;\r\n\r\n			$balance = DB::select(''select balance from clients.balance where id= ?'', array($ownerid));\r\n			$current_balance = end($balance)->balance;\r\n\r\n			if($cost_incurred<=$current_balance)\r\n			{\r\n\r\n 			$allsent = FALSE;\r\n 			$messagesent = FALSE;\r\n 			$todaysdate 	  = date("Y-m-d");\r\n\r\n\r\n\r\n 			foreach($phonenumbers_array as &$phonenumber)\r\n 			{\r\n			 //register the new user\r\n			 $user		= Message::create(array(\r\n			 				''phone_number''		=>$phonenumber,\r\n			 				''message''		=>$message,\r\n			 				''date''			=>$todaysdate,\r\n			 				''cost''			=>$this->cost($message),\r\n			 				''active''        =>TRUE\r\n			 ));\r\n\r\n			 $phone_number_send = ''+254''.substr($phonenumber, strlen($phonenumber)-9);\r\n\r\n			// $messagesent = $this->SendSms($phone_number_send, $message);\r\n			 \r\n			if($messagesent==TRUE)\r\n			 {\r\n				$allsent = TRUE;\r\n			 }\r\n			 \r\n			}\r\n\r\n			if($allsent==TRUE)\r\n			 {\r\n			 	$newbalance = $current_balance - $cost_incurred;\r\n\r\n			 	return $newbalance;\r\n\r\n			 	$updatebalance = DB::update(''update clients.balance set balance= ? where id= ?'', array($newbalance,$ownerid));\r\n\r\n				return Redirect::route(''sendmessage-get'')\r\n					->with(''global'',''Success! Your message has been sent'');	\r\n			 }\r\n			}\r\n			else\r\n			{\r\n				return Redirect::route(''sendmessage-get'')\r\n					->with(''global'',''Sorry, your current balance is insufficient.'')->withInput();\r\n			}\r\n		}\r\n		\r\n	}\r\n\r\n	public function postSendMessageToAll()\r\n	{\r\n		//verify the user input and create account\r\n		$validator = Validator::make(Input::all(),array(\r\n			''Message''				=>''required'',\r\n\r\n		));\r\n		\r\n		if($validator->fails())\r\n		{\r\n			return Redirect::route(''sendmessagetoall-get'')\r\n			->withErrors($validator)\r\n			->withInput();\r\n		}\r\n		else {\r\n			\r\n			$message = Input::get(''Message'');\r\n\r\n			 \r\n			//get the members information\r\n			$members = Member::where(''active'',''='',TRUE)->get();\r\n\r\n			$cost_incurred = $members->count() * $this->cost($message);\r\n			$owner = Owner::where(''id'',''='',1)->first();\r\n			$ownerid = $owner->owner_id;\r\n\r\n			$balance = DB::select(''select balance from clients.balance where id= ?'', array($ownerid));\r\n			$current_balance = end($balance)->balance;\r\n\r\n			if($cost_incurred<=$current_balance)\r\n			{\r\n			\r\n			$sent = FALSE;\r\n			$todaysdate 	  = date("Y-m-d");\r\n			\r\n			foreach($members as $member){\r\n				 //register the new user\r\n			 $user		= Message::create(array(\r\n			 				''phone_number''		=>$member->phone_number,\r\n			 				''message''			=>$message,\r\n			 				''member_id''			=>$member->id,\r\n			 				''cost''				=>$this->cost($message),\r\n			 				''date''			    =>$todaysdate,\r\n			 				''active''            =>TRUE\r\n			 ));\r\n\r\n\r\n			   $phone_number_send = ''+254''.substr($member->phone_number, strlen($member->phone_number)-9);\r\n			  // $sent = $this->SendSms($phone_number_send, $message);\r\n			}\r\n			\r\n			 \r\n			 if($sent==TRUE)\r\n			 {\r\n				return Redirect::route(''sendmessagetoall-get'')\r\n					->with(''global'',''Success! Your message has been sent'');	\r\n			 }\r\n			}\r\n			else\r\n			{\r\n				return Redirect::route(''sendmessagetoall-get'')\r\n					->with(''global'',''Sorry, your current balance is insufficient.'')->withInput();\r\n			}\r\n			\r\n		}\r\n		\r\n	}\r\n	\r\n	\r\n	public function postDeleteMessage()\r\n	{\r\n		\r\n		\r\n			$messageId  = Input::get(''messageID'');\r\n			\r\n						\r\n 			$message_delete = Message::where(''id'',''='',$messageId)->first();\r\n 			$message_delete->active = FALSE;\r\n\r\n 			$message_delete = $message_delete->save();\r\n			 \r\n			 if($message_delete)\r\n			 {\r\n				return Redirect::route(''sentmessage-get'')\r\n					->with(''global'',''Success! Message information has been deleted successfully.'');	\r\n			 }	\r\n	}\r\n		\r\n		public function cost($textmessage){\r\n             return ceil(strlen($textmessage)/160)*2;\r\n		}\r\n}\r\n<?php\r\ninclude_once(app_path().''/includes/AfricasTalkingGateway.php'');\r\n\r\n\r\n\r\nclass MessageController extends BaseController {\r\n\r\n	/*\r\n	|--------------------------------------------------------------------------\r\n	| Default Home Controller\r\n	|--------------------------------------------------------------------------\r\n	|\r\n	| You may wish to use controllers instead of, or in addition to, Closure\r\n	| based routes. That''s great! Here is an example controller method to\r\n	| get you started. To route to this controller, just add the route:\r\n	|\r\n	|	Route::get(''/'', ''HomeController@showWelcome'');\r\n	|\r\n	*/\r\n\r\n	public function SendSms($my_recipient,$my_message)\r\n		{\r\n			// Specify your login credentials\r\n			$username   = "adback";\r\n			$apikey     = "c933c719506a6838d4ceac95c9411b27331f34a117ca80473529d967ff9c46b0";\r\n			\r\n			// Specify the numbers that you want to send to in a comma-separated list\r\n			// Please ensure you include the country code (+254 for Kenya in this case)\r\n			$recipients = $my_recipient;\r\n			\r\n			// And of course we want our recipients to know what we really do\r\n			$message    = $my_message;\r\n			\r\n			// Create a new instance of our awesome gateway class\r\n			$gateway    = new AfricasTalkingGateway($username, $apikey);\r\n			\r\n			// Any gateway errors will be captured by our custom Exception class below, \r\n			// so wrap the call in a try-catch block\r\n			try \r\n			{ \r\n			  // Thats it, hit send and we''ll take care of the rest. \r\n			  $results = $gateway->sendMessage($recipients, $message);\r\n			  if($results) {\r\n			    return TRUE;\r\n			  }\r\n			  else {\r\n				  return FALSE;\r\n			  }\r\n			}\r\n			catch ( AfricasTalkingGatewayException $e )\r\n			{\r\n			  return FALSE;\r\n			}\r\n			\r\n			// DONE!!! \r\n		}\r\n	\r\n	public function postSendMessage()\r\n	{\r\n		//verify the user input and create account\r\n		$validator = Validator::make(Input::all(),array(\r\n				''Phone_Number''				=>''required'',\r\n				''Message''				=>''required'',\r\n\r\n		));\r\n		\r\n		if($validator->fails())\r\n		{\r\n			return Redirect::route(''sendmessage-get'')\r\n			->withErrors($validator)\r\n			->withInput();\r\n		}\r\n		else {\r\n			$phonenumbers = Input::get(''Phone_Number'');\r\n			$message = Input::get(''Message'');\r\n			\r\n			\r\n			//remove white spaces from the numbers\r\n			$compressedphonenumbers = str_replace('' '','''', $phonenumbers);\r\n\r\n			//get the specific phone numbers from the array\r\n 			$phonenumbers_array = explode('','', $compressedphonenumbers);\r\n\r\n 			$cost_incurred = sizeof($phonenumbers_array) * $this->cost($message);\r\n\r\n\r\n\r\n 			$owner = Owner::where(''id'',''='',1)->first();\r\n			$ownerid = $owner->owner_id;\r\n\r\n			$balance = DB::select(''select balance from clients.balance where id= ?'', array($ownerid));\r\n			$current_balance = end($balance)->balance;\r\n\r\n			if($cost_incurred<=$current_balance)\r\n			{\r\n\r\n 			$allsent = FALSE;\r\n 			$messagesent = FALSE;\r\n 			$todaysdate 	  = date("Y-m-d");\r\n\r\n\r\n\r\n 			foreach($phonenumbers_array as &$phonenumber)\r\n 			{\r\n			 //register the new user\r\n			 $user		= Message::create(array(\r\n			 				''phone_number''		=>$phonenumber,\r\n			 				''message''		=>$message,\r\n			 				''date''			=>$todaysdate,\r\n			 				''cost''			=>$this->cost($message),\r\n			 				''active''        =>TRUE\r\n			 ));\r\n\r\n			 $phone_number_send = ''+254''.substr($phonenumber, strlen($phonenumber)-9);\r\n\r\n			// $messagesent = $this->SendSms($phone_number_send, $message);\r\n			 \r\n			if($messagesent==TRUE)\r\n			 {\r\n				$allsent = TRUE;\r\n			 }\r\n			 \r\n			}\r\n\r\n			if($allsent==TRUE)\r\n			 {\r\n			 	$newbalance = $current_balance - $cost_incurred;\r\n\r\n			 	return $newbalance;\r\n\r\n			 	$updatebalance = DB::update(''update clients.balance set balance= ? where id= ?'', array($newbalance,$ownerid));\r\n\r\n				return Redirect::route(''sendmessage-get'')\r\n					->with(''global'',''Success! Your message has been sent'');	\r\n			 }\r\n			}\r\n			else\r\n			{\r\n				return Redirect::route(''sendmessage-get'')\r\n					->with(''global'',''Sorry, your current balance is insufficient.'')->withInput();\r\n			}\r\n		}\r\n		\r\n	}\r\n\r\n	public function postSendMessageToAll()\r\n	{\r\n		//verify the user input and create account\r\n		$validator = Validator::make(Input::all(),array(\r\n			''Message''				=>''required'',\r\n\r\n		));\r\n		\r\n		if($validator->fails())\r\n		{\r\n			return Redirect::route(''sendmessagetoall-get'')\r\n			->withErrors($validator)\r\n			->withInput();\r\n		}\r\n		else {\r\n			\r\n			$message = Input::get(''Message'');\r\n\r\n			 \r\n			//get the members information\r\n			$members = Member::where(''active'',''='',TRUE)->get();\r\n\r\n			$cost_incurred = $members->count() * $this->cost($message);\r\n			$owner = Owner::where(''id'',''='',1)->first();\r\n			$ownerid = $owner->owner_id;\r\n\r\n			$balance = DB::select(''select balance from clients.balance where id= ?'', array($ownerid));\r\n			$current_balance = end($balance)->balance;\r\n\r\n			if($cost_incurred<=$current_balance)\r\n			{\r\n			\r\n			$sent = FALSE;\r\n			$todaysdate 	  = date("Y-m-d");\r\n			\r\n			foreach($members as $member){\r\n				 //register the new user\r\n			 $user		= Message::create(array(\r\n			 				''phone_number''		=>$member->phone_number,\r\n			 				''message''			=>$message,\r\n			 				''member_id''			=>$member->id,\r\n			 				''cost''				=>$this->cost($message),\r\n			 				''date''			    =>$todaysdate,\r\n			 				''active''            =>TRUE\r\n			 ));\r\n\r\n\r\n			   $phone_number_send = ''+254''.substr($member->phone_number, strlen($member->phone_number)-9);\r\n			  // $sent = $this->SendSms($phone_number_send, $message);\r\n			}\r\n			\r\n			 \r\n			 if($sent==TRUE)\r\n			 {\r\n				return Redirect::route(''sendmessagetoall-get'')\r\n					->with(''global'',''Success! Your message has been sent'');	\r\n			 }\r\n			}\r\n			else\r\n			{\r\n				return Redirect::route(''sendmessagetoall-get'')\r\n					->with(''global'',''Sorry, your current balance is insufficient.'')->withInput();\r\n			}\r\n			\r\n		}\r\n		\r\n	}\r\n	\r\n	\r\n	public function postDeleteMessage()\r\n	{\r\n		\r\n		\r\n			$messageId  = Input::get(''messageID'');\r\n			\r\n						\r\n 			$message_delete = Message::where(''id'',''='',$messageId)->first();\r\n 			$message_delete->active = FALSE;\r\n\r\n 			$message_delete = $message_delete->save();\r\n			 \r\n			 if($message_delete)\r\n			 {\r\n				return Redirect::route(''sentmessage-get'')\r\n					->with(''global'',''Success! Message information has been deleted successfully.'');	\r\n			 }	\r\n	}\r\n		\r\n		public function cost($textmessage){\r\n             return ceil(strlen($textmessage)/160)*2;\r\n		}\r\n}\r\n<?php\r\ninclude_once(app_path().''/includes/AfricasTalkingGateway.php'');\r\n\r\n\r\n\r\nclass MessageController extends BaseController {\r\n\r\n	/*\r\n	|--------------------------------------------------------------------------\r\n	| Default Home Controller\r\n	|--------------------------------------------------------------------------\r\n	|\r\n	| You may wish to use controllers instead of, or in addition to, Closure\r\n	| based routes. That''s great! Here is an example controller method to\r\n	| get you started. To route to this controller, just add the route:\r\n	|\r\n	|	Route::get(''/'', ''HomeController@showWelcome'');\r\n	|\r\n	*/\r\n\r\n	public function SendSms($my_recipient,$my_message)\r\n		{\r\n			// Specify your login credentials\r\n			$username   = "adback";\r\n			$apikey     = "c933c719506a6838d4ceac95c9411b27331f34a117ca80473529d967ff9c46b0";\r\n			\r\n			// Specify the numbers that you want to send to in a comma-separated list\r\n			// Please ensure you include the country code (+254 for Kenya in this case)\r\n			$recipients = $my_recipient;\r\n			\r\n			// And of course we want our recipients to know what we really do\r\n			$message    = $my_message;\r\n			\r\n			// Create a new instance of our awesome gateway class\r\n			$gateway    = new AfricasTalkingGateway($username, $apikey);\r\n			\r\n			// Any gateway errors will be captured by our custom Exception class below, \r\n			// so wrap the call in a try-catch block\r\n			try \r\n			{ \r\n			  // Thats it, hit send and we''ll take care of the rest. \r\n			  $results = $gateway->sendMessage($recipients, $message);\r\n			  if($results) {\r\n			    return TRUE;\r\n			  }\r\n			  else {\r\n				  return FALSE;\r\n			  }\r\n			}\r\n			catch ( AfricasTalkingGatewayException $e )\r\n			{\r\n			  return FALSE;\r\n			}\r\n			\r\n			// DONE!!! \r\n		}\r\n	\r\n	public function postSendMessage()\r\n	{\r\n		//verify the user input and create account\r\n		$validator = Validator::make(Input::all(),array(\r\n				''Phone_Number''				=>''required'',\r\n				''Message''				=>''required'',\r\n\r\n		));\r\n		\r\n		if($validator->fails())\r\n		{\r\n			return Redirect::route(''sendmessage-get'')\r\n			->withErrors($validator)\r\n			->withInput();\r\n		}\r\n		else {\r\n			$phonenumbers = Input::get(''Phone_Number'');\r\n			$message = Input::get(''Message'');\r\n			\r\n			\r\n			//remove white spaces from the numbers\r\n			$compressedphonenumbers = str_replace('' '','''', $phonenumbers);\r\n\r\n			//get the specific phone numbers from the array\r\n 			$phonenumbers_array = explode('','', $compressedphonenumbers);\r\n\r\n 			$cost_incurred = sizeof($phonenumbers_array) * $this->cost($message);\r\n\r\n\r\n\r\n 			$owner = Owner::where(''id'',''='',1)->first();\r\n			$ownerid = $owner->owner_id;\r\n\r\n			$balance = DB::select(''select balance from clients.balance where id= ?'', array($ownerid));\r\n			$current_balance = end($balance)->balance;\r\n\r\n			if($cost_incurred<=$current_balance)\r\n			{\r\n\r\n 			$allsent = FALSE;\r\n 			$messagesent = FALSE;\r\n 			$todaysdate 	  = date("Y-m-d");\r\n\r\n\r\n\r\n 			foreach($phonenumbers_array as &$phonenumber)\r\n 			{\r\n			 //register the new user\r\n			 $user		= Message::create(array(\r\n			 				''phone_number''		=>$phonenumber,\r\n			 				''message''		=>$message,\r\n			 				''date''			=>$todaysdate,\r\n			 				''cost''			=>$this->cost($message),\r\n			 				''active''        =>TRUE\r\n			 ));\r\n\r\n			 $phone_number_send = ''+254''.substr($phonenumber, strlen($phonenumber)-9);\r\n\r\n			// $messagesent = $this->SendSms($phone_number_send, $message);\r\n			 \r\n			if($messagesent==TRUE)\r\n			 {\r\n				$allsent = TRUE;\r\n			 }\r\n			 \r\n			}\r\n\r\n			if($allsent==TRUE)\r\n			 {\r\n			 	$newbalance = $current_balance - $cost_incurred;\r\n\r\n			 	return $newbalance;\r\n\r\n			 	$updatebalance = DB::update(''update clients.balance set balance= ? where id= ?'', array($newbalance,$ownerid));\r\n\r\n				return Redirect::route(''sendmessage-get'')\r\n					->with(''global'',''Success! Your message has been sent'');	\r\n			 }\r\n			}\r\n			else\r\n			{\r\n				return Redirect::route(''sendmessage-get'')\r\n					->with(''global'',''Sorry, your current balance is insufficient.'')->withInput();\r\n			}\r\n		}\r\n		\r\n	}\r\n\r\n	public function postSendMessageToAll()\r\n	{\r\n		//verify the user input and create account\r\n		$validator = Validator::make(Input::all(),array(\r\n			''Message''				=>''required'',\r\n\r\n		));\r\n		\r\n		if($validator->fails())\r\n		{\r\n			return Redirect::route(''sendmessagetoall-get'')\r\n			->withErrors($validator)\r\n			->withInput();\r\n		}\r\n		else {\r\n			\r\n			$message = Input::get(''Message'');\r\n\r\n			 \r\n			//get the members information\r\n			$members = Member::where(''active'',''='',TRUE)->get();\r\n\r\n			$cost_incurred = $members->count() * $this->cost($message);\r\n			$owner = Owner::where(''id'',''='',1)->first();\r\n			$ownerid = $owner->owner_id;\r\n\r\n			$balance = DB::select(''select balance from clients.balance where id= ?'', array($ownerid));\r\n			$current_balance = end($balance)->balance;\r\n\r\n			if($cost_incurred<=$current_balance)\r\n			{\r\n			\r\n			$sent = FALSE;\r\n			$todaysdate 	  = date("Y-m-d");\r\n			\r\n			foreach($members as $member){\r\n				 //register the new user\r\n			 $user		= Message::create(array(\r\n			 				''phone_number''		=>$member->phone_number,\r\n			 				''message''			=>$message,\r\n			 				''member_id''			=>$member->id,\r\n			 				''cost''				=>$this->cost($message),\r\n			 				''date''			    =>$todaysdate,\r\n			 				''active''            =>TRUE\r\n			 ));\r\n\r\n\r\n			   $phone_number_send = ''+254''.substr($member->phone_number, strlen($member->phone_number)-9);\r\n			  // $sent = $this->SendSms($phone_number_send, $message);\r\n			}\r\n			\r\n			 \r\n			 if($sent==TRUE)\r\n			 {\r\n				return Redirect::route(''sendmessagetoall-get'')\r\n					->with(''global'',''Success! Your message has been sent'');	\r\n			 }\r\n			}\r\n			else\r\n			{\r\n				return Redirect::route(''sendmessagetoall-get'')\r\n					->with(''global'',''Sorry, your current balance is insufficient.'')->withInput();\r\n			}\r\n			\r\n		}\r\n		\r\n	}\r\n	\r\n	\r\n	public function postDeleteMessage()\r\n	{\r\n		\r\n		\r\n			$messageId  = Input::get(''messageID'');\r\n			\r\n						\r\n 			$message_delete = Message::where(''id'',''='',$messageId)->first();\r\n 			$message_delete->active = FALSE;\r\n\r\n 			$message_delete = $message_delete->save();\r\n			 \r\n			 if($message_delete)\r\n			 {\r\n				return Redirect::route(''sentmessage-get'')\r\n					->with(''global'',''Success! Message information has been deleted successfully.'');	\r\n			 }	\r\n	}\r\n		\r\n		public function cost($textmessage){\r\n             return ceil(strlen($textmessage)/160)*2;\r\n		}\r\n}\r\n<?php\r\ninclude_once(app_path().''/includes/AfricasTalkingGateway.php'');\r\n\r\n\r\n\r\nclass MessageController extends BaseController {\r\n\r\n	/*\r\n	|--------------------------------------------------------------------------\r\n	| Default Home Controller\r\n	|--------------------------------------------------------------------------\r\n	|\r\n	| You may wish to use controllers instead of, or in addition to, Closure\r\n	| based routes. That''s great! Here is an example controller method to\r\n	| get you started. To route to this controller, just add the route:\r\n	|\r\n	|	Route::get(''/'', ''HomeController@showWelcome'');\r\n	|\r\n	*/\r\n\r\n	public function SendSms($my_recipient,$my_message)\r\n		{\r\n			// Specify your login credentials\r\n			$username   = "adback";\r\n			$apikey     = "c933c719506a6838d4ceac95c9411b27331f34a117ca80473529d967ff9c46b0";\r\n			\r\n			// Specify the numbers that you want to send to in a comma-separated list\r\n			// Please ensure you include the country code (+254 for Kenya in this case)\r\n			$recipients = $my_recipient;\r\n			\r\n			// And of course we want our recipients to know what we really do\r\n			$message    = $my_message;\r\n			\r\n			// Create a new instance of our awesome gateway class\r\n			$gateway    = new AfricasTalkingGateway($username, $apikey);\r\n			\r\n			// Any gateway errors will be captured by our custom Exception class below, \r\n			// so wrap the call in a try-catch block\r\n			try \r\n			{ \r\n			  // Thats it, hit send and we''ll take care of the rest. \r\n			  $results = $gateway->sendMessage($recipients, $message);\r\n			  if($results) {\r\n			    return TRUE;\r\n			  }\r\n			  else {\r\n				  return FALSE;\r\n			  }\r\n			}\r\n			catch ( AfricasTalkingGatewayException $e )\r\n			{\r\n			  return FALSE;\r\n			}\r\n			\r\n			// DONE!!! \r\n		}\r\n	\r\n	public function postSendMessage()\r\n	{\r\n		//verify the user input and create account\r\n		$validator = Validator::make(Input::all(),array(\r\n				''Phone_Number''				=>''required'',\r\n				''Message''				=>''required'',\r\n\r\n		));\r\n		\r\n		if($validator->fails())\r\n		{\r\n			return Redirect::route(''sendmessage-get'')\r\n			->withErrors($validator)\r\n			->withInput();\r\n		}\r\n		else {\r\n			$phonenumbers = Input::get(''Phone_Number'');\r\n			$message = Input::get(''Message'');\r\n			\r\n			\r\n			//remove white spaces from the numbers\r\n			$compressedphonenumbers = str_replace('' '','''', $phonenumbers);\r\n\r\n			//get the specific phone numbers from the array\r\n 			$phonenumbers_array = explode('','', $compressedphonenumbers);\r\n\r\n 			$cost_incurred = sizeof($phonenumbers_array) * $this->cost($message);\r\n\r\n\r\n\r\n 			$owner = Owner::where(''id'',''='',1)->first();\r\n			$ownerid = $owner->owner_id;\r\n\r\n			$balance = DB::select(''select balance from clients.balance where id= ?'', array($ownerid));\r\n			$current_balance = end($balance)->balance;\r\n\r\n			if($cost_incurred<=$current_balance)\r\n			{\r\n\r\n 			$allsent = FALSE;\r\n 			$messagesent = FALSE;\r\n 			$todaysdate 	  = date("Y-m-d");\r\n\r\n\r\n\r\n 			foreach($phonenumbers_array as &$phonenumber)\r\n 			{\r\n			 //register the new user\r\n			 $user		= Message::create(array(\r\n			 				''phone_number''		=>$phonenumber,\r\n			 				''message''		=>$message,\r\n			 				''date''			=>$todaysdate,\r\n			 				''cost''			=>$this->cost($message),\r\n			 				''active''        =>TRUE\r\n			 ));\r\n\r\n			 $phone_number_send = ''+254''.substr($phonenumber, strlen($phonenumber)-9);\r\n\r\n			// $messagesent = $this->SendSms($phone_number_send, $message);\r\n			 \r\n			if($messagesent==TRUE)\r\n			 {\r\n				$allsent = TRUE;\r\n			 }\r\n			 \r\n			}\r\n\r\n			if($allsent==TRUE)\r\n			 {\r\n			 	$newbalance = $current_balance - $cost_incurred;\r\n\r\n			 	return $newbalance;\r\n\r\n			 	$updatebalance = DB::update(''update clients.balance set balance= ? where id= ?'', array($newbalance,$ownerid));\r\n\r\n				return Redirect::route(''sendmessage-get'')\r\n					->with(''global'',''Success! Your message has been sent'');	\r\n			 }\r\n			}\r\n			else\r\n			{\r\n				return Redirect::route(''sendmessage-get'')\r\n					->with(''global'',''Sorry, your current balance is insufficient.'')->withInput();\r\n			}\r\n		}\r\n		\r\n	}\r\n\r\n	public function postSendMessageToAll()\r\n	{\r\n		//verify the user input and create account\r\n		$validator = Validator::make(Input::all(),array(\r\n			''Message''				=>''required'',\r\n\r\n		));\r\n		\r\n		if($validator->fails())\r\n		{\r\n			return Redirect::route(''sendmessagetoall-get'')\r\n			->withErrors($validator)\r\n			->withInput();\r\n		}\r\n		else {\r\n			\r\n			$message = Input::get(''Message'');\r\n\r\n			 \r\n			//get the members information\r\n			$members = Member::where(''active'',''='',TRUE)->get();\r\n\r\n			$cost_incurred = $members->count() * $this->cost($message);\r\n			$owner = Owner::where(''id'',''='',1)->first();\r\n			$ownerid = $owner->owner_id;\r\n\r\n			$balance = DB::select(''select balance from clients.balance where id= ?'', array($ownerid));\r\n			$current_balance = end($balance)->balance;\r\n\r\n			if($cost_incurred<=$current_balance)\r\n			{\r\n			\r\n			$sent = FALSE;\r\n			$todaysdate 	  = date("Y-m-d");\r\n			\r\n			foreach($members as $member){\r\n				 //register the new user\r\n			 $user		= Message::create(array(\r\n			 				''phone_number''		=>$member->phone_number,\r\n			 				''message''			=>$message,\r\n			 				''member_id''			=>$member->id,\r\n			 				''cost''				=>$this->cost($message),\r\n			 				''date''			    =>$todaysdate,\r\n			 				''active''            =>TRUE\r\n			 ));\r\n\r\n\r\n			   $phone_number_send = ''+254''.substr($member->phone_number, strlen($member->phone_number)-9);\r\n			  // $sent = $this->SendSms($phone_number_send, $message);\r\n			}\r\n			\r\n			 \r\n			 if($sent==TRUE)\r\n			 {\r\n				return Redirect::route(''sendmessagetoall-get'')\r\n					->with(''global'',''Success! Your message has been sent'');	\r\n			 }\r\n			}\r\n			else\r\n			{\r\n				return Redirect::route(''sendmessagetoall-get'')\r\n					->with(''global'',''Sorry, your current balance is insufficient.'')->withInput();\r\n			}\r\n			\r\n		}\r\n		\r\n	}\r\n	\r\n	\r\n	public function postDeleteMessage()\r\n	{\r\n		\r\n		\r\n			$messageId  = Input::get(''messageID'');\r\n			\r\n						\r\n 			$message_delete = Message::where(''id'',''='',$messageId)->first();\r\n 			$message_delete->active = FALSE;\r\n\r\n 			$message_delete = $message_delete->save();\r\n			 \r\n			 if($message_delete)\r\n			 {\r\n				return Redirect::route(''sentmessage-get'')\r\n					->with(''global'',''Success! Message information has been deleted successfully.'');	\r\n			 }	\r\n	}\r\n		\r\n		public function cost($textmessage){\r\n             return ceil(strlen($textmessage)/160)*2;\r\n		}\r\n}\r\n', '468.00', '2014-11-09 06:55:16', '2014-11-10 12:01:47', '44444', '2014-11-09', 0);
INSERT INTO `messages` (`id`, `member_id`, `message`, `cost`, `created_at`, `updated_at`, `phone_number`, `date`, `active`) VALUES
(56, 0, 'haloooo<?php\r\ninclude_once(app_path().''/includes/AfricasTalkingGateway.php'');\r\n\r\n\r\n\r\nclass MessageController extends BaseController {\r\n\r\n	/*\r\n	|--------------------------------------------------------------------------\r\n	| Default Home Controller\r\n	|--------------------------------------------------------------------------\r\n	|\r\n	| You may wish to use controllers instead of, or in addition to, Closure\r\n	| based routes. That''s great! Here is an example controller method to\r\n	| get you started. To route to this controller, just add the route:\r\n	|\r\n	|	Route::get(''/'', ''HomeController@showWelcome'');\r\n	|\r\n	*/\r\n\r\n	public function SendSms($my_recipient,$my_message)\r\n		{\r\n			// Specify your login credentials\r\n			$username   = "adback";\r\n			$apikey     = "c933c719506a6838d4ceac95c9411b27331f34a117ca80473529d967ff9c46b0";\r\n			\r\n			// Specify the numbers that you want to send to in a comma-separated list\r\n			// Please ensure you include the country code (+254 for Kenya in this case)\r\n			$recipients = $my_recipient;\r\n			\r\n			// And of course we want our recipients to know what we really do\r\n			$message    = $my_message;\r\n			\r\n			// Create a new instance of our awesome gateway class\r\n			$gateway    = new AfricasTalkingGateway($username, $apikey);\r\n			\r\n			// Any gateway errors will be captured by our custom Exception class below, \r\n			// so wrap the call in a try-catch block\r\n			try \r\n			{ \r\n			  // Thats it, hit send and we''ll take care of the rest. \r\n			  $results = $gateway->sendMessage($recipients, $message);\r\n			  if($results) {\r\n			    return TRUE;\r\n			  }\r\n			  else {\r\n				  return FALSE;\r\n			  }\r\n			}\r\n			catch ( AfricasTalkingGatewayException $e )\r\n			{\r\n			  return FALSE;\r\n			}\r\n			\r\n			// DONE!!! \r\n		}\r\n	\r\n	public function postSendMessage()\r\n	{\r\n		//verify the user input and create account\r\n		$validator = Validator::make(Input::all(),array(\r\n				''Phone_Number''				=>''required'',\r\n				''Message''				=>''required'',\r\n\r\n		));\r\n		\r\n		if($validator->fails())\r\n		{\r\n			return Redirect::route(''sendmessage-get'')\r\n			->withErrors($validator)\r\n			->withInput();\r\n		}\r\n		else {\r\n			$phonenumbers = Input::get(''Phone_Number'');\r\n			$message = Input::get(''Message'');\r\n			\r\n			\r\n			//remove white spaces from the numbers\r\n			$compressedphonenumbers = str_replace('' '','''', $phonenumbers);\r\n\r\n			//get the specific phone numbers from the array\r\n 			$phonenumbers_array = explode('','', $compressedphonenumbers);\r\n\r\n 			$cost_incurred = sizeof($phonenumbers_array) * $this->cost($message);\r\n\r\n\r\n\r\n 			$owner = Owner::where(''id'',''='',1)->first();\r\n			$ownerid = $owner->owner_id;\r\n\r\n			$balance = DB::select(''select balance from clients.balance where id= ?'', array($ownerid));\r\n			$current_balance = end($balance)->balance;\r\n\r\n			if($cost_incurred<=$current_balance)\r\n			{\r\n\r\n 			$allsent = FALSE;\r\n 			$messagesent = FALSE;\r\n 			$todaysdate 	  = date("Y-m-d");\r\n\r\n\r\n\r\n 			foreach($phonenumbers_array as &$phonenumber)\r\n 			{\r\n			 //register the new user\r\n			 $user		= Message::create(array(\r\n			 				''phone_number''		=>$phonenumber,\r\n			 				''message''		=>$message,\r\n			 				''date''			=>$todaysdate,\r\n			 				''cost''			=>$this->cost($message),\r\n			 				''active''        =>TRUE\r\n			 ));\r\n\r\n			 $phone_number_send = ''+254''.substr($phonenumber, strlen($phonenumber)-9);\r\n\r\n			// $messagesent = $this->SendSms($phone_number_send, $message);\r\n			 \r\n			if($messagesent==TRUE)\r\n			 {\r\n				$allsent = TRUE;\r\n			 }\r\n			 \r\n			}\r\n\r\n			if($allsent==TRUE)\r\n			 {\r\n			 	$newbalance = $current_balance - $cost_incurred;\r\n\r\n			 	return $newbalance;\r\n\r\n			 	$updatebalance = DB::update(''update clients.balance set balance= ? where id= ?'', array($newbalance,$ownerid));\r\n\r\n				return Redirect::route(''sendmessage-get'')\r\n					->with(''global'',''Success! Your message has been sent'');	\r\n			 }\r\n			}\r\n			else\r\n			{\r\n				return Redirect::route(''sendmessage-get'')\r\n					->with(''global'',''Sorry, your current balance is insufficient.'')->withInput();\r\n			}\r\n		}\r\n		\r\n	}\r\n\r\n	public function postSendMessageToAll()\r\n	{\r\n		//verify the user input and create account\r\n		$validator = Validator::make(Input::all(),array(\r\n			''Message''				=>''required'',\r\n\r\n		));\r\n		\r\n		if($validator->fails())\r\n		{\r\n			return Redirect::route(''sendmessagetoall-get'')\r\n			->withErrors($validator)\r\n			->withInput();\r\n		}\r\n		else {\r\n			\r\n			$message = Input::get(''Message'');\r\n\r\n			 \r\n			//get the members information\r\n			$members = Member::where(''active'',''='',TRUE)->get();\r\n\r\n			$cost_incurred = $members->count() * $this->cost($message);\r\n			$owner = Owner::where(''id'',''='',1)->first();\r\n			$ownerid = $owner->owner_id;\r\n\r\n			$balance = DB::select(''select balance from clients.balance where id= ?'', array($ownerid));\r\n			$current_balance = end($balance)->balance;\r\n\r\n			if($cost_incurred<=$current_balance)\r\n			{\r\n			\r\n			$sent = FALSE;\r\n			$todaysdate 	  = date("Y-m-d");\r\n			\r\n			foreach($members as $member){\r\n				 //register the new user\r\n			 $user		= Message::create(array(\r\n			 				''phone_number''		=>$member->phone_number,\r\n			 				''message''			=>$message,\r\n			 				''member_id''			=>$member->id,\r\n			 				''cost''				=>$this->cost($message),\r\n			 				''date''			    =>$todaysdate,\r\n			 				''active''            =>TRUE\r\n			 ));\r\n\r\n\r\n			   $phone_number_send = ''+254''.substr($member->phone_number, strlen($member->phone_number)-9);\r\n			  // $sent = $this->SendSms($phone_number_send, $message);\r\n			}\r\n			\r\n			 \r\n			 if($sent==TRUE)\r\n			 {\r\n				return Redirect::route(''sendmessagetoall-get'')\r\n					->with(''global'',''Success! Your message has been sent'');	\r\n			 }\r\n			}\r\n			else\r\n			{\r\n				return Redirect::route(''sendmessagetoall-get'')\r\n					->with(''global'',''Sorry, your current balance is insufficient.'')->withInput();\r\n			}\r\n			\r\n		}\r\n		\r\n	}\r\n	\r\n	\r\n	public function postDeleteMessage()\r\n	{\r\n		\r\n		\r\n			$messageId  = Input::get(''messageID'');\r\n			\r\n						\r\n 			$message_delete = Message::where(''id'',''='',$messageId)->first();\r\n 			$message_delete->active = FALSE;\r\n\r\n 			$message_delete = $message_delete->save();\r\n			 \r\n			 if($message_delete)\r\n			 {\r\n				return Redirect::route(''sentmessage-get'')\r\n					->with(''global'',''Success! Message information has been deleted successfully.'');	\r\n			 }	\r\n	}\r\n		\r\n		public function cost($textmessage){\r\n             return ceil(strlen($textmessage)/160)*2;\r\n		}\r\n}\r\n<?php\r\ninclude_once(app_path().''/includes/AfricasTalkingGateway.php'');\r\n\r\n\r\n\r\nclass MessageController extends BaseController {\r\n\r\n	/*\r\n	|--------------------------------------------------------------------------\r\n	| Default Home Controller\r\n	|--------------------------------------------------------------------------\r\n	|\r\n	| You may wish to use controllers instead of, or in addition to, Closure\r\n	| based routes. That''s great! Here is an example controller method to\r\n	| get you started. To route to this controller, just add the route:\r\n	|\r\n	|	Route::get(''/'', ''HomeController@showWelcome'');\r\n	|\r\n	*/\r\n\r\n	public function SendSms($my_recipient,$my_message)\r\n		{\r\n			// Specify your login credentials\r\n			$username   = "adback";\r\n			$apikey     = "c933c719506a6838d4ceac95c9411b27331f34a117ca80473529d967ff9c46b0";\r\n			\r\n			// Specify the numbers that you want to send to in a comma-separated list\r\n			// Please ensure you include the country code (+254 for Kenya in this case)\r\n			$recipients = $my_recipient;\r\n			\r\n			// And of course we want our recipients to know what we really do\r\n			$message    = $my_message;\r\n			\r\n			// Create a new instance of our awesome gateway class\r\n			$gateway    = new AfricasTalkingGateway($username, $apikey);\r\n			\r\n			// Any gateway errors will be captured by our custom Exception class below, \r\n			// so wrap the call in a try-catch block\r\n			try \r\n			{ \r\n			  // Thats it, hit send and we''ll take care of the rest. \r\n			  $results = $gateway->sendMessage($recipients, $message);\r\n			  if($results) {\r\n			    return TRUE;\r\n			  }\r\n			  else {\r\n				  return FALSE;\r\n			  }\r\n			}\r\n			catch ( AfricasTalkingGatewayException $e )\r\n			{\r\n			  return FALSE;\r\n			}\r\n			\r\n			// DONE!!! \r\n		}\r\n	\r\n	public function postSendMessage()\r\n	{\r\n		//verify the user input and create account\r\n		$validator = Validator::make(Input::all(),array(\r\n				''Phone_Number''				=>''required'',\r\n				''Message''				=>''required'',\r\n\r\n		));\r\n		\r\n		if($validator->fails())\r\n		{\r\n			return Redirect::route(''sendmessage-get'')\r\n			->withErrors($validator)\r\n			->withInput();\r\n		}\r\n		else {\r\n			$phonenumbers = Input::get(''Phone_Number'');\r\n			$message = Input::get(''Message'');\r\n			\r\n			\r\n			//remove white spaces from the numbers\r\n			$compressedphonenumbers = str_replace('' '','''', $phonenumbers);\r\n\r\n			//get the specific phone numbers from the array\r\n 			$phonenumbers_array = explode('','', $compressedphonenumbers);\r\n\r\n 			$cost_incurred = sizeof($phonenumbers_array) * $this->cost($message);\r\n\r\n\r\n\r\n 			$owner = Owner::where(''id'',''='',1)->first();\r\n			$ownerid = $owner->owner_id;\r\n\r\n			$balance = DB::select(''select balance from clients.balance where id= ?'', array($ownerid));\r\n			$current_balance = end($balance)->balance;\r\n\r\n			if($cost_incurred<=$current_balance)\r\n			{\r\n\r\n 			$allsent = FALSE;\r\n 			$messagesent = FALSE;\r\n 			$todaysdate 	  = date("Y-m-d");\r\n\r\n\r\n\r\n 			foreach($phonenumbers_array as &$phonenumber)\r\n 			{\r\n			 //register the new user\r\n			 $user		= Message::create(array(\r\n			 				''phone_number''		=>$phonenumber,\r\n			 				''message''		=>$message,\r\n			 				''date''			=>$todaysdate,\r\n			 				''cost''			=>$this->cost($message),\r\n			 				''active''        =>TRUE\r\n			 ));\r\n\r\n			 $phone_number_send = ''+254''.substr($phonenumber, strlen($phonenumber)-9);\r\n\r\n			// $messagesent = $this->SendSms($phone_number_send, $message);\r\n			 \r\n			if($messagesent==TRUE)\r\n			 {\r\n				$allsent = TRUE;\r\n			 }\r\n			 \r\n			}\r\n\r\n			if($allsent==TRUE)\r\n			 {\r\n			 	$newbalance = $current_balance - $cost_incurred;\r\n\r\n			 	return $newbalance;\r\n\r\n			 	$updatebalance = DB::update(''update clients.balance set balance= ? where id= ?'', array($newbalance,$ownerid));\r\n\r\n				return Redirect::route(''sendmessage-get'')\r\n					->with(''global'',''Success! Your message has been sent'');	\r\n			 }\r\n			}\r\n			else\r\n			{\r\n				return Redirect::route(''sendmessage-get'')\r\n					->with(''global'',''Sorry, your current balance is insufficient.'')->withInput();\r\n			}\r\n		}\r\n		\r\n	}\r\n\r\n	public function postSendMessageToAll()\r\n	{\r\n		//verify the user input and create account\r\n		$validator = Validator::make(Input::all(),array(\r\n			''Message''				=>''required'',\r\n\r\n		));\r\n		\r\n		if($validator->fails())\r\n		{\r\n			return Redirect::route(''sendmessagetoall-get'')\r\n			->withErrors($validator)\r\n			->withInput();\r\n		}\r\n		else {\r\n			\r\n			$message = Input::get(''Message'');\r\n\r\n			 \r\n			//get the members information\r\n			$members = Member::where(''active'',''='',TRUE)->get();\r\n\r\n			$cost_incurred = $members->count() * $this->cost($message);\r\n			$owner = Owner::where(''id'',''='',1)->first();\r\n			$ownerid = $owner->owner_id;\r\n\r\n			$balance = DB::select(''select balance from clients.balance where id= ?'', array($ownerid));\r\n			$current_balance = end($balance)->balance;\r\n\r\n			if($cost_incurred<=$current_balance)\r\n			{\r\n			\r\n			$sent = FALSE;\r\n			$todaysdate 	  = date("Y-m-d");\r\n			\r\n			foreach($members as $member){\r\n				 //register the new user\r\n			 $user		= Message::create(array(\r\n			 				''phone_number''		=>$member->phone_number,\r\n			 				''message''			=>$message,\r\n			 				''member_id''			=>$member->id,\r\n			 				''cost''				=>$this->cost($message),\r\n			 				''date''			    =>$todaysdate,\r\n			 				''active''            =>TRUE\r\n			 ));\r\n\r\n\r\n			   $phone_number_send = ''+254''.substr($member->phone_number, strlen($member->phone_number)-9);\r\n			  // $sent = $this->SendSms($phone_number_send, $message);\r\n			}\r\n			\r\n			 \r\n			 if($sent==TRUE)\r\n			 {\r\n				return Redirect::route(''sendmessagetoall-get'')\r\n					->with(''global'',''Success! Your message has been sent'');	\r\n			 }\r\n			}\r\n			else\r\n			{\r\n				return Redirect::route(''sendmessagetoall-get'')\r\n					->with(''global'',''Sorry, your current balance is insufficient.'')->withInput();\r\n			}\r\n			\r\n		}\r\n		\r\n	}\r\n	\r\n	\r\n	public function postDeleteMessage()\r\n	{\r\n		\r\n		\r\n			$messageId  = Input::get(''messageID'');\r\n			\r\n						\r\n 			$message_delete = Message::where(''id'',''='',$messageId)->first();\r\n 			$message_delete->active = FALSE;\r\n\r\n 			$message_delete = $message_delete->save();\r\n			 \r\n			 if($message_delete)\r\n			 {\r\n				return Redirect::route(''sentmessage-get'')\r\n					->with(''global'',''Success! Message information has been deleted successfully.'');	\r\n			 }	\r\n	}\r\n		\r\n		public function cost($textmessage){\r\n             return ceil(strlen($textmessage)/160)*2;\r\n		}\r\n}\r\n<?php\r\ninclude_once(app_path().''/includes/AfricasTalkingGateway.php'');\r\n\r\n\r\n\r\nclass MessageController extends BaseController {\r\n\r\n	/*\r\n	|--------------------------------------------------------------------------\r\n	| Default Home Controller\r\n	|--------------------------------------------------------------------------\r\n	|\r\n	| You may wish to use controllers instead of, or in addition to, Closure\r\n	| based routes. That''s great! Here is an example controller method to\r\n	| get you started. To route to this controller, just add the route:\r\n	|\r\n	|	Route::get(''/'', ''HomeController@showWelcome'');\r\n	|\r\n	*/\r\n\r\n	public function SendSms($my_recipient,$my_message)\r\n		{\r\n			// Specify your login credentials\r\n			$username   = "adback";\r\n			$apikey     = "c933c719506a6838d4ceac95c9411b27331f34a117ca80473529d967ff9c46b0";\r\n			\r\n			// Specify the numbers that you want to send to in a comma-separated list\r\n			// Please ensure you include the country code (+254 for Kenya in this case)\r\n			$recipients = $my_recipient;\r\n			\r\n			// And of course we want our recipients to know what we really do\r\n			$message    = $my_message;\r\n			\r\n			// Create a new instance of our awesome gateway class\r\n			$gateway    = new AfricasTalkingGateway($username, $apikey);\r\n			\r\n			// Any gateway errors will be captured by our custom Exception class below, \r\n			// so wrap the call in a try-catch block\r\n			try \r\n			{ \r\n			  // Thats it, hit send and we''ll take care of the rest. \r\n			  $results = $gateway->sendMessage($recipients, $message);\r\n			  if($results) {\r\n			    return TRUE;\r\n			  }\r\n			  else {\r\n				  return FALSE;\r\n			  }\r\n			}\r\n			catch ( AfricasTalkingGatewayException $e )\r\n			{\r\n			  return FALSE;\r\n			}\r\n			\r\n			// DONE!!! \r\n		}\r\n	\r\n	public function postSendMessage()\r\n	{\r\n		//verify the user input and create account\r\n		$validator = Validator::make(Input::all(),array(\r\n				''Phone_Number''				=>''required'',\r\n				''Message''				=>''required'',\r\n\r\n		));\r\n		\r\n		if($validator->fails())\r\n		{\r\n			return Redirect::route(''sendmessage-get'')\r\n			->withErrors($validator)\r\n			->withInput();\r\n		}\r\n		else {\r\n			$phonenumbers = Input::get(''Phone_Number'');\r\n			$message = Input::get(''Message'');\r\n			\r\n			\r\n			//remove white spaces from the numbers\r\n			$compressedphonenumbers = str_replace('' '','''', $phonenumbers);\r\n\r\n			//get the specific phone numbers from the array\r\n 			$phonenumbers_array = explode('','', $compressedphonenumbers);\r\n\r\n 			$cost_incurred = sizeof($phonenumbers_array) * $this->cost($message);\r\n\r\n\r\n\r\n 			$owner = Owner::where(''id'',''='',1)->first();\r\n			$ownerid = $owner->owner_id;\r\n\r\n			$balance = DB::select(''select balance from clients.balance where id= ?'', array($ownerid));\r\n			$current_balance = end($balance)->balance;\r\n\r\n			if($cost_incurred<=$current_balance)\r\n			{\r\n\r\n 			$allsent = FALSE;\r\n 			$messagesent = FALSE;\r\n 			$todaysdate 	  = date("Y-m-d");\r\n\r\n\r\n\r\n 			foreach($phonenumbers_array as &$phonenumber)\r\n 			{\r\n			 //register the new user\r\n			 $user		= Message::create(array(\r\n			 				''phone_number''		=>$phonenumber,\r\n			 				''message''		=>$message,\r\n			 				''date''			=>$todaysdate,\r\n			 				''cost''			=>$this->cost($message),\r\n			 				''active''        =>TRUE\r\n			 ));\r\n\r\n			 $phone_number_send = ''+254''.substr($phonenumber, strlen($phonenumber)-9);\r\n\r\n			// $messagesent = $this->SendSms($phone_number_send, $message);\r\n			 \r\n			if($messagesent==TRUE)\r\n			 {\r\n				$allsent = TRUE;\r\n			 }\r\n			 \r\n			}\r\n\r\n			if($allsent==TRUE)\r\n			 {\r\n			 	$newbalance = $current_balance - $cost_incurred;\r\n\r\n			 	return $newbalance;\r\n\r\n			 	$updatebalance = DB::update(''update clients.balance set balance= ? where id= ?'', array($newbalance,$ownerid));\r\n\r\n				return Redirect::route(''sendmessage-get'')\r\n					->with(''global'',''Success! Your message has been sent'');	\r\n			 }\r\n			}\r\n			else\r\n			{\r\n				return Redirect::route(''sendmessage-get'')\r\n					->with(''global'',''Sorry, your current balance is insufficient.'')->withInput();\r\n			}\r\n		}\r\n		\r\n	}\r\n\r\n	public function postSendMessageToAll()\r\n	{\r\n		//verify the user input and create account\r\n		$validator = Validator::make(Input::all(),array(\r\n			''Message''				=>''required'',\r\n\r\n		));\r\n		\r\n		if($validator->fails())\r\n		{\r\n			return Redirect::route(''sendmessagetoall-get'')\r\n			->withErrors($validator)\r\n			->withInput();\r\n		}\r\n		else {\r\n			\r\n			$message = Input::get(''Message'');\r\n\r\n			 \r\n			//get the members information\r\n			$members = Member::where(''active'',''='',TRUE)->get();\r\n\r\n			$cost_incurred = $members->count() * $this->cost($message);\r\n			$owner = Owner::where(''id'',''='',1)->first();\r\n			$ownerid = $owner->owner_id;\r\n\r\n			$balance = DB::select(''select balance from clients.balance where id= ?'', array($ownerid));\r\n			$current_balance = end($balance)->balance;\r\n\r\n			if($cost_incurred<=$current_balance)\r\n			{\r\n			\r\n			$sent = FALSE;\r\n			$todaysdate 	  = date("Y-m-d");\r\n			\r\n			foreach($members as $member){\r\n				 //register the new user\r\n			 $user		= Message::create(array(\r\n			 				''phone_number''		=>$member->phone_number,\r\n			 				''message''			=>$message,\r\n			 				''member_id''			=>$member->id,\r\n			 				''cost''				=>$this->cost($message),\r\n			 				''date''			    =>$todaysdate,\r\n			 				''active''            =>TRUE\r\n			 ));\r\n\r\n\r\n			   $phone_number_send = ''+254''.substr($member->phone_number, strlen($member->phone_number)-9);\r\n			  // $sent = $this->SendSms($phone_number_send, $message);\r\n			}\r\n			\r\n			 \r\n			 if($sent==TRUE)\r\n			 {\r\n				return Redirect::route(''sendmessagetoall-get'')\r\n					->with(''global'',''Success! Your message has been sent'');	\r\n			 }\r\n			}\r\n			else\r\n			{\r\n				return Redirect::route(''sendmessagetoall-get'')\r\n					->with(''global'',''Sorry, your current balance is insufficient.'')->withInput();\r\n			}\r\n			\r\n		}\r\n		\r\n	}\r\n	\r\n	\r\n	public function postDeleteMessage()\r\n	{\r\n		\r\n		\r\n			$messageId  = Input::get(''messageID'');\r\n			\r\n						\r\n 			$message_delete = Message::where(''id'',''='',$messageId)->first();\r\n 			$message_delete->active = FALSE;\r\n\r\n 			$message_delete = $message_delete->save();\r\n			 \r\n			 if($message_delete)\r\n			 {\r\n				return Redirect::route(''sentmessage-get'')\r\n					->with(''global'',''Success! Message information has been deleted successfully.'');	\r\n			 }	\r\n	}\r\n		\r\n		public function cost($textmessage){\r\n             return ceil(strlen($textmessage)/160)*2;\r\n		}\r\n}\r\n<?php\r\ninclude_once(app_path().''/includes/AfricasTalkingGateway.php'');\r\n\r\n\r\n\r\nclass MessageController extends BaseController {\r\n\r\n	/*\r\n	|--------------------------------------------------------------------------\r\n	| Default Home Controller\r\n	|--------------------------------------------------------------------------\r\n	|\r\n	| You may wish to use controllers instead of, or in addition to, Closure\r\n	| based routes. That''s great! Here is an example controller method to\r\n	| get you started. To route to this controller, just add the route:\r\n	|\r\n	|	Route::get(''/'', ''HomeController@showWelcome'');\r\n	|\r\n	*/\r\n\r\n	public function SendSms($my_recipient,$my_message)\r\n		{\r\n			// Specify your login credentials\r\n			$username   = "adback";\r\n			$apikey     = "c933c719506a6838d4ceac95c9411b27331f34a117ca80473529d967ff9c46b0";\r\n			\r\n			// Specify the numbers that you want to send to in a comma-separated list\r\n			// Please ensure you include the country code (+254 for Kenya in this case)\r\n			$recipients = $my_recipient;\r\n			\r\n			// And of course we want our recipients to know what we really do\r\n			$message    = $my_message;\r\n			\r\n			// Create a new instance of our awesome gateway class\r\n			$gateway    = new AfricasTalkingGateway($username, $apikey);\r\n			\r\n			// Any gateway errors will be captured by our custom Exception class below, \r\n			// so wrap the call in a try-catch block\r\n			try \r\n			{ \r\n			  // Thats it, hit send and we''ll take care of the rest. \r\n			  $results = $gateway->sendMessage($recipients, $message);\r\n			  if($results) {\r\n			    return TRUE;\r\n			  }\r\n			  else {\r\n				  return FALSE;\r\n			  }\r\n			}\r\n			catch ( AfricasTalkingGatewayException $e )\r\n			{\r\n			  return FALSE;\r\n			}\r\n			\r\n			// DONE!!! \r\n		}\r\n	\r\n	public function postSendMessage()\r\n	{\r\n		//verify the user input and create account\r\n		$validator = Validator::make(Input::all(),array(\r\n				''Phone_Number''				=>''required'',\r\n				''Message''				=>''required'',\r\n\r\n		));\r\n		\r\n		if($validator->fails())\r\n		{\r\n			return Redirect::route(''sendmessage-get'')\r\n			->withErrors($validator)\r\n			->withInput();\r\n		}\r\n		else {\r\n			$phonenumbers = Input::get(''Phone_Number'');\r\n			$message = Input::get(''Message'');\r\n			\r\n			\r\n			//remove white spaces from the numbers\r\n			$compressedphonenumbers = str_replace('' '','''', $phonenumbers);\r\n\r\n			//get the specific phone numbers from the array\r\n 			$phonenumbers_array = explode('','', $compressedphonenumbers);\r\n\r\n 			$cost_incurred = sizeof($phonenumbers_array) * $this->cost($message);\r\n\r\n\r\n\r\n 			$owner = Owner::where(''id'',''='',1)->first();\r\n			$ownerid = $owner->owner_id;\r\n\r\n			$balance = DB::select(''select balance from clients.balance where id= ?'', array($ownerid));\r\n			$current_balance = end($balance)->balance;\r\n\r\n			if($cost_incurred<=$current_balance)\r\n			{\r\n\r\n 			$allsent = FALSE;\r\n 			$messagesent = FALSE;\r\n 			$todaysdate 	  = date("Y-m-d");\r\n\r\n\r\n\r\n 			foreach($phonenumbers_array as &$phonenumber)\r\n 			{\r\n			 //register the new user\r\n			 $user		= Message::create(array(\r\n			 				''phone_number''		=>$phonenumber,\r\n			 				''message''		=>$message,\r\n			 				''date''			=>$todaysdate,\r\n			 				''cost''			=>$this->cost($message),\r\n			 				''active''        =>TRUE\r\n			 ));\r\n\r\n			 $phone_number_send = ''+254''.substr($phonenumber, strlen($phonenumber)-9);\r\n\r\n			// $messagesent = $this->SendSms($phone_number_send, $message);\r\n			 \r\n			if($messagesent==TRUE)\r\n			 {\r\n				$allsent = TRUE;\r\n			 }\r\n			 \r\n			}\r\n\r\n			if($allsent==TRUE)\r\n			 {\r\n			 	$newbalance = $current_balance - $cost_incurred;\r\n\r\n			 	return $newbalance;\r\n\r\n			 	$updatebalance = DB::update(''update clients.balance set balance= ? where id= ?'', array($newbalance,$ownerid));\r\n\r\n				return Redirect::route(''sendmessage-get'')\r\n					->with(''global'',''Success! Your message has been sent'');	\r\n			 }\r\n			}\r\n			else\r\n			{\r\n				return Redirect::route(''sendmessage-get'')\r\n					->with(''global'',''Sorry, your current balance is insufficient.'')->withInput();\r\n			}\r\n		}\r\n		\r\n	}\r\n\r\n	public function postSendMessageToAll()\r\n	{\r\n		//verify the user input and create account\r\n		$validator = Validator::make(Input::all(),array(\r\n			''Message''				=>''required'',\r\n\r\n		));\r\n		\r\n		if($validator->fails())\r\n		{\r\n			return Redirect::route(''sendmessagetoall-get'')\r\n			->withErrors($validator)\r\n			->withInput();\r\n		}\r\n		else {\r\n			\r\n			$message = Input::get(''Message'');\r\n\r\n			 \r\n			//get the members information\r\n			$members = Member::where(''active'',''='',TRUE)->get();\r\n\r\n			$cost_incurred = $members->count() * $this->cost($message);\r\n			$owner = Owner::where(''id'',''='',1)->first();\r\n			$ownerid = $owner->owner_id;\r\n\r\n			$balance = DB::select(''select balance from clients.balance where id= ?'', array($ownerid));\r\n			$current_balance = end($balance)->balance;\r\n\r\n			if($cost_incurred<=$current_balance)\r\n			{\r\n			\r\n			$sent = FALSE;\r\n			$todaysdate 	  = date("Y-m-d");\r\n			\r\n			foreach($members as $member){\r\n				 //register the new user\r\n			 $user		= Message::create(array(\r\n			 				''phone_number''		=>$member->phone_number,\r\n			 				''message''			=>$message,\r\n			 				''member_id''			=>$member->id,\r\n			 				''cost''				=>$this->cost($message),\r\n			 				''date''			    =>$todaysdate,\r\n			 				''active''            =>TRUE\r\n			 ));\r\n\r\n\r\n			   $phone_number_send = ''+254''.substr($member->phone_number, strlen($member->phone_number)-9);\r\n			  // $sent = $this->SendSms($phone_number_send, $message);\r\n			}\r\n			\r\n			 \r\n			 if($sent==TRUE)\r\n			 {\r\n				return Redirect::route(''sendmessagetoall-get'')\r\n					->with(''global'',''Success! Your message has been sent'');	\r\n			 }\r\n			}\r\n			else\r\n			{\r\n				return Redirect::route(''sendmessagetoall-get'')\r\n					->with(''global'',''Sorry, your current balance is insufficient.'')->withInput();\r\n			}\r\n			\r\n		}\r\n		\r\n	}\r\n	\r\n	\r\n	public function postDeleteMessage()\r\n	{\r\n		\r\n		\r\n			$messageId  = Input::get(''messageID'');\r\n			\r\n						\r\n 			$message_delete = Message::where(''id'',''='',$messageId)->first();\r\n 			$message_delete->active = FALSE;\r\n\r\n 			$message_delete = $message_delete->save();\r\n			 \r\n			 if($message_delete)\r\n			 {\r\n				return Redirect::route(''sentmessage-get'')\r\n					->with(''global'',''Success! Message information has been deleted successfully.'');	\r\n			 }	\r\n	}\r\n		\r\n		public function cost($textmessage){\r\n             return ceil(strlen($textmessage)/160)*2;\r\n		}\r\n}\r\n<?php\r\ninclude_once(app_path().''/includes/AfricasTalkingGateway.php'');\r\n\r\n\r\n\r\nclass MessageController extends BaseController {\r\n\r\n	/*\r\n	|--------------------------------------------------------------------------\r\n	| Default Home Controller\r\n	|--------------------------------------------------------------------------\r\n	|\r\n	| You may wish to use controllers instead of, or in addition to, Closure\r\n	| based routes. That''s great! Here is an example controller method to\r\n	| get you started. To route to this controller, just add the route:\r\n	|\r\n	|	Route::get(''/'', ''HomeController@showWelcome'');\r\n	|\r\n	*/\r\n\r\n	public function SendSms($my_recipient,$my_message)\r\n		{\r\n			// Specify your login credentials\r\n			$username   = "adback";\r\n			$apikey     = "c933c719506a6838d4ceac95c9411b27331f34a117ca80473529d967ff9c46b0";\r\n			\r\n			// Specify the numbers that you want to send to in a comma-separated list\r\n			// Please ensure you include the country code (+254 for Kenya in this case)\r\n			$recipients = $my_recipient;\r\n			\r\n			// And of course we want our recipients to know what we really do\r\n			$message    = $my_message;\r\n			\r\n			// Create a new instance of our awesome gateway class\r\n			$gateway    = new AfricasTalkingGateway($username, $apikey);\r\n			\r\n			// Any gateway errors will be captured by our custom Exception class below, \r\n			// so wrap the call in a try-catch block\r\n			try \r\n			{ \r\n			  // Thats it, hit send and we''ll take care of the rest. \r\n			  $results = $gateway->sendMessage($recipients, $message);\r\n			  if($results) {\r\n			    return TRUE;\r\n			  }\r\n			  else {\r\n				  return FALSE;\r\n			  }\r\n			}\r\n			catch ( AfricasTalkingGatewayException $e )\r\n			{\r\n			  return FALSE;\r\n			}\r\n			\r\n			// DONE!!! \r\n		}\r\n	\r\n	public function postSendMessage()\r\n	{\r\n		//verify the user input and create account\r\n		$validator = Validator::make(Input::all(),array(\r\n				''Phone_Number''				=>''required'',\r\n				''Message''				=>''required'',\r\n\r\n		));\r\n		\r\n		if($validator->fails())\r\n		{\r\n			return Redirect::route(''sendmessage-get'')\r\n			->withErrors($validator)\r\n			->withInput();\r\n		}\r\n		else {\r\n			$phonenumbers = Input::get(''Phone_Number'');\r\n			$message = Input::get(''Message'');\r\n			\r\n			\r\n			//remove white spaces from the numbers\r\n			$compressedphonenumbers = str_replace('' '','''', $phonenumbers);\r\n\r\n			//get the specific phone numbers from the array\r\n 			$phonenumbers_array = explode('','', $compressedphonenumbers);\r\n\r\n 			$cost_incurred = sizeof($phonenumbers_array) * $this->cost($message);\r\n\r\n\r\n\r\n 			$owner = Owner::where(''id'',''='',1)->first();\r\n			$ownerid = $owner->owner_id;\r\n\r\n			$balance = DB::select(''select balance from clients.balance where id= ?'', array($ownerid));\r\n			$current_balance = end($balance)->balance;\r\n\r\n			if($cost_incurred<=$current_balance)\r\n			{\r\n\r\n 			$allsent = FALSE;\r\n 			$messagesent = FALSE;\r\n 			$todaysdate 	  = date("Y-m-d");\r\n\r\n\r\n\r\n 			foreach($phonenumbers_array as &$phonenumber)\r\n 			{\r\n			 //register the new user\r\n			 $user		= Message::create(array(\r\n			 				''phone_number''		=>$phonenumber,\r\n			 				''message''		=>$message,\r\n			 				''date''			=>$todaysdate,\r\n			 				''cost''			=>$this->cost($message),\r\n			 				''active''        =>TRUE\r\n			 ));\r\n\r\n			 $phone_number_send = ''+254''.substr($phonenumber, strlen($phonenumber)-9);\r\n\r\n			// $messagesent = $this->SendSms($phone_number_send, $message);\r\n			 \r\n			if($messagesent==TRUE)\r\n			 {\r\n				$allsent = TRUE;\r\n			 }\r\n			 \r\n			}\r\n\r\n			if($allsent==TRUE)\r\n			 {\r\n			 	$newbalance = $current_balance - $cost_incurred;\r\n\r\n			 	return $newbalance;\r\n\r\n			 	$updatebalance = DB::update(''update clients.balance set balance= ? where id= ?'', array($newbalance,$ownerid));\r\n\r\n				return Redirect::route(''sendmessage-get'')\r\n					->with(''global'',''Success! Your message has been sent'');	\r\n			 }\r\n			}\r\n			else\r\n			{\r\n				return Redirect::route(''sendmessage-get'')\r\n					->with(''global'',''Sorry, your current balance is insufficient.'')->withInput();\r\n			}\r\n		}\r\n		\r\n	}\r\n\r\n	public function postSendMessageToAll()\r\n	{\r\n		//verify the user input and create account\r\n		$validator = Validator::make(Input::all(),array(\r\n			''Message''				=>''required'',\r\n\r\n		));\r\n		\r\n		if($validator->fails())\r\n		{\r\n			return Redirect::route(''sendmessagetoall-get'')\r\n			->withErrors($validator)\r\n			->withInput();\r\n		}\r\n		else {\r\n			\r\n			$message = Input::get(''Message'');\r\n\r\n			 \r\n			//get the members information\r\n			$members = Member::where(''active'',''='',TRUE)->get();\r\n\r\n			$cost_incurred = $members->count() * $this->cost($message);\r\n			$owner = Owner::where(''id'',''='',1)->first();\r\n			$ownerid = $owner->owner_id;\r\n\r\n			$balance = DB::select(''select balance from clients.balance where id= ?'', array($ownerid));\r\n			$current_balance = end($balance)->balance;\r\n\r\n			if($cost_incurred<=$current_balance)\r\n			{\r\n			\r\n			$sent = FALSE;\r\n			$todaysdate 	  = date("Y-m-d");\r\n			\r\n			foreach($members as $member){\r\n				 //register the new user\r\n			 $user		= Message::create(array(\r\n			 				''phone_number''		=>$member->phone_number,\r\n			 				''message''			=>$message,\r\n			 				''member_id''			=>$member->id,\r\n			 				''cost''				=>$this->cost($message),\r\n			 				''date''			    =>$todaysdate,\r\n			 				''active''            =>TRUE\r\n			 ));\r\n\r\n\r\n			   $phone_number_send = ''+254''.substr($member->phone_number, strlen($member->phone_number)-9);\r\n			  // $sent = $this->SendSms($phone_number_send, $message);\r\n			}\r\n			\r\n			 \r\n			 if($sent==TRUE)\r\n			 {\r\n				return Redirect::route(''sendmessagetoall-get'')\r\n					->with(''global'',''Success! Your message has been sent'');	\r\n			 }\r\n			}\r\n			else\r\n			{\r\n				return Redirect::route(''sendmessagetoall-get'')\r\n					->with(''global'',''Sorry, your current balance is insufficient.'')->withInput();\r\n			}\r\n			\r\n		}\r\n		\r\n	}\r\n	\r\n	\r\n	public function postDeleteMessage()\r\n	{\r\n		\r\n		\r\n			$messageId  = Input::get(''messageID'');\r\n			\r\n						\r\n 			$message_delete = Message::where(''id'',''='',$messageId)->first();\r\n 			$message_delete->active = FALSE;\r\n\r\n 			$message_delete = $message_delete->save();\r\n			 \r\n			 if($message_delete)\r\n			 {\r\n				return Redirect::route(''sentmessage-get'')\r\n					->with(''global'',''Success! Message information has been deleted successfully.'');	\r\n			 }	\r\n	}\r\n		\r\n		public function cost($textmessage){\r\n             return ceil(strlen($textmessage)/160)*2;\r\n		}\r\n}\r\n<?php\r\ninclude_once(app_path().''/includes/AfricasTalkingGateway.php'');\r\n\r\n\r\n\r\nclass MessageController extends BaseController {\r\n\r\n	/*\r\n	|--------------------------------------------------------------------------\r\n	| Default Home Controller\r\n	|--------------------------------------------------------------------------\r\n	|\r\n	| You may wish to use controllers instead of, or in addition to, Closure\r\n	| based routes. That''s great! Here is an example controller method to\r\n	| get you started. To route to this controller, just add the route:\r\n	|\r\n	|	Route::get(''/'', ''HomeController@showWelcome'');\r\n	|\r\n	*/\r\n\r\n	public function SendSms($my_recipient,$my_message)\r\n		{\r\n			// Specify your login credentials\r\n			$username   = "adback";\r\n			$apikey     = "c933c719506a6838d4ceac95c9411b27331f34a117ca80473529d967ff9c46b0";\r\n			\r\n			// Specify the numbers that you want to send to in a comma-separated list\r\n			// Please ensure you include the country code (+254 for Kenya in this case)\r\n			$recipients = $my_recipient;\r\n			\r\n			// And of course we want our recipients to know what we really do\r\n			$message    = $my_message;\r\n			\r\n			// Create a new instance of our awesome gateway class\r\n			$gateway    = new AfricasTalkingGateway($username, $apikey);\r\n			\r\n			// Any gateway errors will be captured by our custom Exception class below, \r\n			// so wrap the call in a try-catch block\r\n			try \r\n			{ \r\n			  // Thats it, hit send and we''ll take care of the rest. \r\n			  $results = $gateway->sendMessage($recipients, $message);\r\n			  if($results) {\r\n			    return TRUE;\r\n			  }\r\n			  else {\r\n				  return FALSE;\r\n			  }\r\n			}\r\n			catch ( AfricasTalkingGatewayException $e )\r\n			{\r\n			  return FALSE;\r\n			}\r\n			\r\n			// DONE!!! \r\n		}\r\n	\r\n	public function postSendMessage()\r\n	{\r\n		//verify the user input and create account\r\n		$validator = Validator::make(Input::all(),array(\r\n				''Phone_Number''				=>''required'',\r\n				''Message''				=>''required'',\r\n\r\n		));\r\n		\r\n		if($validator->fails())\r\n		{\r\n			return Redirect::route(''sendmessage-get'')\r\n			->withErrors($validator)\r\n			->withInput();\r\n		}\r\n		else {\r\n			$phonenumbers = Input::get(''Phone_Number'');\r\n			$message = Input::get(''Message'');\r\n			\r\n			\r\n			//remove white spaces from the numbers\r\n			$compressedphonenumbers = str_replace('' '','''', $phonenumbers);\r\n\r\n			//get the specific phone numbers from the array\r\n 			$phonenumbers_array = explode('','', $compressedphonenumbers);\r\n\r\n 			$cost_incurred = sizeof($phonenumbers_array) * $this->cost($message);\r\n\r\n\r\n\r\n 			$owner = Owner::where(''id'',''='',1)->first();\r\n			$ownerid = $owner->owner_id;\r\n\r\n			$balance = DB::select(''select balance from clients.balance where id= ?'', array($ownerid));\r\n			$current_balance = end($balance)->balance;\r\n\r\n			if($cost_incurred<=$current_balance)\r\n			{\r\n\r\n 			$allsent = FALSE;\r\n 			$messagesent = FALSE;\r\n 			$todaysdate 	  = date("Y-m-d");\r\n\r\n\r\n\r\n 			foreach($phonenumbers_array as &$phonenumber)\r\n 			{\r\n			 //register the new user\r\n			 $user		= Message::create(array(\r\n			 				''phone_number''		=>$phonenumber,\r\n			 				''message''		=>$message,\r\n			 				''date''			=>$todaysdate,\r\n			 				''cost''			=>$this->cost($message),\r\n			 				''active''        =>TRUE\r\n			 ));\r\n\r\n			 $phone_number_send = ''+254''.substr($phonenumber, strlen($phonenumber)-9);\r\n\r\n			// $messagesent = $this->SendSms($phone_number_send, $message);\r\n			 \r\n			if($messagesent==TRUE)\r\n			 {\r\n				$allsent = TRUE;\r\n			 }\r\n			 \r\n			}\r\n\r\n			if($allsent==TRUE)\r\n			 {\r\n			 	$newbalance = $current_balance - $cost_incurred;\r\n\r\n			 	return $newbalance;\r\n\r\n			 	$updatebalance = DB::update(''update clients.balance set balance= ? where id= ?'', array($newbalance,$ownerid));\r\n\r\n				return Redirect::route(''sendmessage-get'')\r\n					->with(''global'',''Success! Your message has been sent'');	\r\n			 }\r\n			}\r\n			else\r\n			{\r\n				return Redirect::route(''sendmessage-get'')\r\n					->with(''global'',''Sorry, your current balance is insufficient.'')->withInput();\r\n			}\r\n		}\r\n		\r\n	}\r\n\r\n	public function postSendMessageToAll()\r\n	{\r\n		//verify the user input and create account\r\n		$validator = Validator::make(Input::all(),array(\r\n			''Message''				=>''required'',\r\n\r\n		));\r\n		\r\n		if($validator->fails())\r\n		{\r\n			return Redirect::route(''sendmessagetoall-get'')\r\n			->withErrors($validator)\r\n			->withInput();\r\n		}\r\n		else {\r\n			\r\n			$message = Input::get(''Message'');\r\n\r\n			 \r\n			//get the members information\r\n			$members = Member::where(''active'',''='',TRUE)->get();\r\n\r\n			$cost_incurred = $members->count() * $this->cost($message);\r\n			$owner = Owner::where(''id'',''='',1)->first();\r\n			$ownerid = $owner->owner_id;\r\n\r\n			$balance = DB::select(''select balance from clients.balance where id= ?'', array($ownerid));\r\n			$current_balance = end($balance)->balance;\r\n\r\n			if($cost_incurred<=$current_balance)\r\n			{\r\n			\r\n			$sent = FALSE;\r\n			$todaysdate 	  = date("Y-m-d");\r\n			\r\n			foreach($members as $member){\r\n				 //register the new user\r\n			 $user		= Message::create(array(\r\n			 				''phone_number''		=>$member->phone_number,\r\n			 				''message''			=>$message,\r\n			 				''member_id''			=>$member->id,\r\n			 				''cost''				=>$this->cost($message),\r\n			 				''date''			    =>$todaysdate,\r\n			 				''active''            =>TRUE\r\n			 ));\r\n\r\n\r\n			   $phone_number_send = ''+254''.substr($member->phone_number, strlen($member->phone_number)-9);\r\n			  // $sent = $this->SendSms($phone_number_send, $message);\r\n			}\r\n			\r\n			 \r\n			 if($sent==TRUE)\r\n			 {\r\n				return Redirect::route(''sendmessagetoall-get'')\r\n					->with(''global'',''Success! Your message has been sent'');	\r\n			 }\r\n			}\r\n			else\r\n			{\r\n				return Redirect::route(''sendmessagetoall-get'')\r\n					->with(''global'',''Sorry, your current balance is insufficient.'')->withInput();\r\n			}\r\n			\r\n		}\r\n		\r\n	}\r\n	\r\n	\r\n	public function postDeleteMessage()\r\n	{\r\n		\r\n		\r\n			$messageId  = Input::get(''messageID'');\r\n			\r\n						\r\n 			$message_delete = Message::where(''id'',''='',$messageId)->first();\r\n 			$message_delete->active = FALSE;\r\n\r\n 			$message_delete = $message_delete->save();\r\n			 \r\n			 if($message_delete)\r\n			 {\r\n				return Redirect::route(''sentmessage-get'')\r\n					->with(''global'',''Success! Message information has been deleted successfully.'');	\r\n			 }	\r\n	}\r\n		\r\n		public function cost($textmessage){\r\n             return ceil(strlen($textmessage)/160)*2;\r\n		}\r\n}\r\n', '468.00', '2014-11-09 06:55:51', '2014-11-16 06:29:15', '44444', '2014-11-09', 0);
INSERT INTO `messages` (`id`, `member_id`, `message`, `cost`, `created_at`, `updated_at`, `phone_number`, `date`, `active`) VALUES
(57, 0, 'haloooo<?php\r\ninclude_once(app_path().''/includes/AfricasTalkingGateway.php'');\r\n\r\n\r\n\r\nclass MessageController extends BaseController {\r\n\r\n	/*\r\n	|--------------------------------------------------------------------------\r\n	| Default Home Controller\r\n	|--------------------------------------------------------------------------\r\n	|\r\n	| You may wish to use controllers instead of, or in addition to, Closure\r\n	| based routes. That''s great! Here is an example controller method to\r\n	| get you started. To route to this controller, just add the route:\r\n	|\r\n	|	Route::get(''/'', ''HomeController@showWelcome'');\r\n	|\r\n	*/\r\n\r\n	public function SendSms($my_recipient,$my_message)\r\n		{\r\n			// Specify your login credentials\r\n			$username   = "adback";\r\n			$apikey     = "c933c719506a6838d4ceac95c9411b27331f34a117ca80473529d967ff9c46b0";\r\n			\r\n			// Specify the numbers that you want to send to in a comma-separated list\r\n			// Please ensure you include the country code (+254 for Kenya in this case)\r\n			$recipients = $my_recipient;\r\n			\r\n			// And of course we want our recipients to know what we really do\r\n			$message    = $my_message;\r\n			\r\n			// Create a new instance of our awesome gateway class\r\n			$gateway    = new AfricasTalkingGateway($username, $apikey);\r\n			\r\n			// Any gateway errors will be captured by our custom Exception class below, \r\n			// so wrap the call in a try-catch block\r\n			try \r\n			{ \r\n			  // Thats it, hit send and we''ll take care of the rest. \r\n			  $results = $gateway->sendMessage($recipients, $message);\r\n			  if($results) {\r\n			    return TRUE;\r\n			  }\r\n			  else {\r\n				  return FALSE;\r\n			  }\r\n			}\r\n			catch ( AfricasTalkingGatewayException $e )\r\n			{\r\n			  return FALSE;\r\n			}\r\n			\r\n			// DONE!!! \r\n		}\r\n	\r\n	public function postSendMessage()\r\n	{\r\n		//verify the user input and create account\r\n		$validator = Validator::make(Input::all(),array(\r\n				''Phone_Number''				=>''required'',\r\n				''Message''				=>''required'',\r\n\r\n		));\r\n		\r\n		if($validator->fails())\r\n		{\r\n			return Redirect::route(''sendmessage-get'')\r\n			->withErrors($validator)\r\n			->withInput();\r\n		}\r\n		else {\r\n			$phonenumbers = Input::get(''Phone_Number'');\r\n			$message = Input::get(''Message'');\r\n			\r\n			\r\n			//remove white spaces from the numbers\r\n			$compressedphonenumbers = str_replace('' '','''', $phonenumbers);\r\n\r\n			//get the specific phone numbers from the array\r\n 			$phonenumbers_array = explode('','', $compressedphonenumbers);\r\n\r\n 			$cost_incurred = sizeof($phonenumbers_array) * $this->cost($message);\r\n\r\n\r\n\r\n 			$owner = Owner::where(''id'',''='',1)->first();\r\n			$ownerid = $owner->owner_id;\r\n\r\n			$balance = DB::select(''select balance from clients.balance where id= ?'', array($ownerid));\r\n			$current_balance = end($balance)->balance;\r\n\r\n			if($cost_incurred<=$current_balance)\r\n			{\r\n\r\n 			$allsent = FALSE;\r\n 			$messagesent = FALSE;\r\n 			$todaysdate 	  = date("Y-m-d");\r\n\r\n\r\n\r\n 			foreach($phonenumbers_array as &$phonenumber)\r\n 			{\r\n			 //register the new user\r\n			 $user		= Message::create(array(\r\n			 				''phone_number''		=>$phonenumber,\r\n			 				''message''		=>$message,\r\n			 				''date''			=>$todaysdate,\r\n			 				''cost''			=>$this->cost($message),\r\n			 				''active''        =>TRUE\r\n			 ));\r\n\r\n			 $phone_number_send = ''+254''.substr($phonenumber, strlen($phonenumber)-9);\r\n\r\n			// $messagesent = $this->SendSms($phone_number_send, $message);\r\n			 \r\n			if($messagesent==TRUE)\r\n			 {\r\n				$allsent = TRUE;\r\n			 }\r\n			 \r\n			}\r\n\r\n			if($allsent==TRUE)\r\n			 {\r\n			 	$newbalance = $current_balance - $cost_incurred;\r\n\r\n			 	return $newbalance;\r\n\r\n			 	$updatebalance = DB::update(''update clients.balance set balance= ? where id= ?'', array($newbalance,$ownerid));\r\n\r\n				return Redirect::route(''sendmessage-get'')\r\n					->with(''global'',''Success! Your message has been sent'');	\r\n			 }\r\n			}\r\n			else\r\n			{\r\n				return Redirect::route(''sendmessage-get'')\r\n					->with(''global'',''Sorry, your current balance is insufficient.'')->withInput();\r\n			}\r\n		}\r\n		\r\n	}\r\n\r\n	public function postSendMessageToAll()\r\n	{\r\n		//verify the user input and create account\r\n		$validator = Validator::make(Input::all(),array(\r\n			''Message''				=>''required'',\r\n\r\n		));\r\n		\r\n		if($validator->fails())\r\n		{\r\n			return Redirect::route(''sendmessagetoall-get'')\r\n			->withErrors($validator)\r\n			->withInput();\r\n		}\r\n		else {\r\n			\r\n			$message = Input::get(''Message'');\r\n\r\n			 \r\n			//get the members information\r\n			$members = Member::where(''active'',''='',TRUE)->get();\r\n\r\n			$cost_incurred = $members->count() * $this->cost($message);\r\n			$owner = Owner::where(''id'',''='',1)->first();\r\n			$ownerid = $owner->owner_id;\r\n\r\n			$balance = DB::select(''select balance from clients.balance where id= ?'', array($ownerid));\r\n			$current_balance = end($balance)->balance;\r\n\r\n			if($cost_incurred<=$current_balance)\r\n			{\r\n			\r\n			$sent = FALSE;\r\n			$todaysdate 	  = date("Y-m-d");\r\n			\r\n			foreach($members as $member){\r\n				 //register the new user\r\n			 $user		= Message::create(array(\r\n			 				''phone_number''		=>$member->phone_number,\r\n			 				''message''			=>$message,\r\n			 				''member_id''			=>$member->id,\r\n			 				''cost''				=>$this->cost($message),\r\n			 				''date''			    =>$todaysdate,\r\n			 				''active''            =>TRUE\r\n			 ));\r\n\r\n\r\n			   $phone_number_send = ''+254''.substr($member->phone_number, strlen($member->phone_number)-9);\r\n			  // $sent = $this->SendSms($phone_number_send, $message);\r\n			}\r\n			\r\n			 \r\n			 if($sent==TRUE)\r\n			 {\r\n				return Redirect::route(''sendmessagetoall-get'')\r\n					->with(''global'',''Success! Your message has been sent'');	\r\n			 }\r\n			}\r\n			else\r\n			{\r\n				return Redirect::route(''sendmessagetoall-get'')\r\n					->with(''global'',''Sorry, your current balance is insufficient.'')->withInput();\r\n			}\r\n			\r\n		}\r\n		\r\n	}\r\n	\r\n	\r\n	public function postDeleteMessage()\r\n	{\r\n		\r\n		\r\n			$messageId  = Input::get(''messageID'');\r\n			\r\n						\r\n 			$message_delete = Message::where(''id'',''='',$messageId)->first();\r\n 			$message_delete->active = FALSE;\r\n\r\n 			$message_delete = $message_delete->save();\r\n			 \r\n			 if($message_delete)\r\n			 {\r\n				return Redirect::route(''sentmessage-get'')\r\n					->with(''global'',''Success! Message information has been deleted successfully.'');	\r\n			 }	\r\n	}\r\n		\r\n		public function cost($textmessage){\r\n             return ceil(strlen($textmessage)/160)*2;\r\n		}\r\n}\r\n<?php\r\ninclude_once(app_path().''/includes/AfricasTalkingGateway.php'');\r\n\r\n\r\n\r\nclass MessageController extends BaseController {\r\n\r\n	/*\r\n	|--------------------------------------------------------------------------\r\n	| Default Home Controller\r\n	|--------------------------------------------------------------------------\r\n	|\r\n	| You may wish to use controllers instead of, or in addition to, Closure\r\n	| based routes. That''s great! Here is an example controller method to\r\n	| get you started. To route to this controller, just add the route:\r\n	|\r\n	|	Route::get(''/'', ''HomeController@showWelcome'');\r\n	|\r\n	*/\r\n\r\n	public function SendSms($my_recipient,$my_message)\r\n		{\r\n			// Specify your login credentials\r\n			$username   = "adback";\r\n			$apikey     = "c933c719506a6838d4ceac95c9411b27331f34a117ca80473529d967ff9c46b0";\r\n			\r\n			// Specify the numbers that you want to send to in a comma-separated list\r\n			// Please ensure you include the country code (+254 for Kenya in this case)\r\n			$recipients = $my_recipient;\r\n			\r\n			// And of course we want our recipients to know what we really do\r\n			$message    = $my_message;\r\n			\r\n			// Create a new instance of our awesome gateway class\r\n			$gateway    = new AfricasTalkingGateway($username, $apikey);\r\n			\r\n			// Any gateway errors will be captured by our custom Exception class below, \r\n			// so wrap the call in a try-catch block\r\n			try \r\n			{ \r\n			  // Thats it, hit send and we''ll take care of the rest. \r\n			  $results = $gateway->sendMessage($recipients, $message);\r\n			  if($results) {\r\n			    return TRUE;\r\n			  }\r\n			  else {\r\n				  return FALSE;\r\n			  }\r\n			}\r\n			catch ( AfricasTalkingGatewayException $e )\r\n			{\r\n			  return FALSE;\r\n			}\r\n			\r\n			// DONE!!! \r\n		}\r\n	\r\n	public function postSendMessage()\r\n	{\r\n		//verify the user input and create account\r\n		$validator = Validator::make(Input::all(),array(\r\n				''Phone_Number''				=>''required'',\r\n				''Message''				=>''required'',\r\n\r\n		));\r\n		\r\n		if($validator->fails())\r\n		{\r\n			return Redirect::route(''sendmessage-get'')\r\n			->withErrors($validator)\r\n			->withInput();\r\n		}\r\n		else {\r\n			$phonenumbers = Input::get(''Phone_Number'');\r\n			$message = Input::get(''Message'');\r\n			\r\n			\r\n			//remove white spaces from the numbers\r\n			$compressedphonenumbers = str_replace('' '','''', $phonenumbers);\r\n\r\n			//get the specific phone numbers from the array\r\n 			$phonenumbers_array = explode('','', $compressedphonenumbers);\r\n\r\n 			$cost_incurred = sizeof($phonenumbers_array) * $this->cost($message);\r\n\r\n\r\n\r\n 			$owner = Owner::where(''id'',''='',1)->first();\r\n			$ownerid = $owner->owner_id;\r\n\r\n			$balance = DB::select(''select balance from clients.balance where id= ?'', array($ownerid));\r\n			$current_balance = end($balance)->balance;\r\n\r\n			if($cost_incurred<=$current_balance)\r\n			{\r\n\r\n 			$allsent = FALSE;\r\n 			$messagesent = FALSE;\r\n 			$todaysdate 	  = date("Y-m-d");\r\n\r\n\r\n\r\n 			foreach($phonenumbers_array as &$phonenumber)\r\n 			{\r\n			 //register the new user\r\n			 $user		= Message::create(array(\r\n			 				''phone_number''		=>$phonenumber,\r\n			 				''message''		=>$message,\r\n			 				''date''			=>$todaysdate,\r\n			 				''cost''			=>$this->cost($message),\r\n			 				''active''        =>TRUE\r\n			 ));\r\n\r\n			 $phone_number_send = ''+254''.substr($phonenumber, strlen($phonenumber)-9);\r\n\r\n			// $messagesent = $this->SendSms($phone_number_send, $message);\r\n			 \r\n			if($messagesent==TRUE)\r\n			 {\r\n				$allsent = TRUE;\r\n			 }\r\n			 \r\n			}\r\n\r\n			if($allsent==TRUE)\r\n			 {\r\n			 	$newbalance = $current_balance - $cost_incurred;\r\n\r\n			 	return $newbalance;\r\n\r\n			 	$updatebalance = DB::update(''update clients.balance set balance= ? where id= ?'', array($newbalance,$ownerid));\r\n\r\n				return Redirect::route(''sendmessage-get'')\r\n					->with(''global'',''Success! Your message has been sent'');	\r\n			 }\r\n			}\r\n			else\r\n			{\r\n				return Redirect::route(''sendmessage-get'')\r\n					->with(''global'',''Sorry, your current balance is insufficient.'')->withInput();\r\n			}\r\n		}\r\n		\r\n	}\r\n\r\n	public function postSendMessageToAll()\r\n	{\r\n		//verify the user input and create account\r\n		$validator = Validator::make(Input::all(),array(\r\n			''Message''				=>''required'',\r\n\r\n		));\r\n		\r\n		if($validator->fails())\r\n		{\r\n			return Redirect::route(''sendmessagetoall-get'')\r\n			->withErrors($validator)\r\n			->withInput();\r\n		}\r\n		else {\r\n			\r\n			$message = Input::get(''Message'');\r\n\r\n			 \r\n			//get the members information\r\n			$members = Member::where(''active'',''='',TRUE)->get();\r\n\r\n			$cost_incurred = $members->count() * $this->cost($message);\r\n			$owner = Owner::where(''id'',''='',1)->first();\r\n			$ownerid = $owner->owner_id;\r\n\r\n			$balance = DB::select(''select balance from clients.balance where id= ?'', array($ownerid));\r\n			$current_balance = end($balance)->balance;\r\n\r\n			if($cost_incurred<=$current_balance)\r\n			{\r\n			\r\n			$sent = FALSE;\r\n			$todaysdate 	  = date("Y-m-d");\r\n			\r\n			foreach($members as $member){\r\n				 //register the new user\r\n			 $user		= Message::create(array(\r\n			 				''phone_number''		=>$member->phone_number,\r\n			 				''message''			=>$message,\r\n			 				''member_id''			=>$member->id,\r\n			 				''cost''				=>$this->cost($message),\r\n			 				''date''			    =>$todaysdate,\r\n			 				''active''            =>TRUE\r\n			 ));\r\n\r\n\r\n			   $phone_number_send = ''+254''.substr($member->phone_number, strlen($member->phone_number)-9);\r\n			  // $sent = $this->SendSms($phone_number_send, $message);\r\n			}\r\n			\r\n			 \r\n			 if($sent==TRUE)\r\n			 {\r\n				return Redirect::route(''sendmessagetoall-get'')\r\n					->with(''global'',''Success! Your message has been sent'');	\r\n			 }\r\n			}\r\n			else\r\n			{\r\n				return Redirect::route(''sendmessagetoall-get'')\r\n					->with(''global'',''Sorry, your current balance is insufficient.'')->withInput();\r\n			}\r\n			\r\n		}\r\n		\r\n	}\r\n	\r\n	\r\n	public function postDeleteMessage()\r\n	{\r\n		\r\n		\r\n			$messageId  = Input::get(''messageID'');\r\n			\r\n						\r\n 			$message_delete = Message::where(''id'',''='',$messageId)->first();\r\n 			$message_delete->active = FALSE;\r\n\r\n 			$message_delete = $message_delete->save();\r\n			 \r\n			 if($message_delete)\r\n			 {\r\n				return Redirect::route(''sentmessage-get'')\r\n					->with(''global'',''Success! Message information has been deleted successfully.'');	\r\n			 }	\r\n	}\r\n		\r\n		public function cost($textmessage){\r\n             return ceil(strlen($textmessage)/160)*2;\r\n		}\r\n}\r\n<?php\r\ninclude_once(app_path().''/includes/AfricasTalkingGateway.php'');\r\n\r\n\r\n\r\nclass MessageController extends BaseController {\r\n\r\n	/*\r\n	|--------------------------------------------------------------------------\r\n	| Default Home Controller\r\n	|--------------------------------------------------------------------------\r\n	|\r\n	| You may wish to use controllers instead of, or in addition to, Closure\r\n	| based routes. That''s great! Here is an example controller method to\r\n	| get you started. To route to this controller, just add the route:\r\n	|\r\n	|	Route::get(''/'', ''HomeController@showWelcome'');\r\n	|\r\n	*/\r\n\r\n	public function SendSms($my_recipient,$my_message)\r\n		{\r\n			// Specify your login credentials\r\n			$username   = "adback";\r\n			$apikey     = "c933c719506a6838d4ceac95c9411b27331f34a117ca80473529d967ff9c46b0";\r\n			\r\n			// Specify the numbers that you want to send to in a comma-separated list\r\n			// Please ensure you include the country code (+254 for Kenya in this case)\r\n			$recipients = $my_recipient;\r\n			\r\n			// And of course we want our recipients to know what we really do\r\n			$message    = $my_message;\r\n			\r\n			// Create a new instance of our awesome gateway class\r\n			$gateway    = new AfricasTalkingGateway($username, $apikey);\r\n			\r\n			// Any gateway errors will be captured by our custom Exception class below, \r\n			// so wrap the call in a try-catch block\r\n			try \r\n			{ \r\n			  // Thats it, hit send and we''ll take care of the rest. \r\n			  $results = $gateway->sendMessage($recipients, $message);\r\n			  if($results) {\r\n			    return TRUE;\r\n			  }\r\n			  else {\r\n				  return FALSE;\r\n			  }\r\n			}\r\n			catch ( AfricasTalkingGatewayException $e )\r\n			{\r\n			  return FALSE;\r\n			}\r\n			\r\n			// DONE!!! \r\n		}\r\n	\r\n	public function postSendMessage()\r\n	{\r\n		//verify the user input and create account\r\n		$validator = Validator::make(Input::all(),array(\r\n				''Phone_Number''				=>''required'',\r\n				''Message''				=>''required'',\r\n\r\n		));\r\n		\r\n		if($validator->fails())\r\n		{\r\n			return Redirect::route(''sendmessage-get'')\r\n			->withErrors($validator)\r\n			->withInput();\r\n		}\r\n		else {\r\n			$phonenumbers = Input::get(''Phone_Number'');\r\n			$message = Input::get(''Message'');\r\n			\r\n			\r\n			//remove white spaces from the numbers\r\n			$compressedphonenumbers = str_replace('' '','''', $phonenumbers);\r\n\r\n			//get the specific phone numbers from the array\r\n 			$phonenumbers_array = explode('','', $compressedphonenumbers);\r\n\r\n 			$cost_incurred = sizeof($phonenumbers_array) * $this->cost($message);\r\n\r\n\r\n\r\n 			$owner = Owner::where(''id'',''='',1)->first();\r\n			$ownerid = $owner->owner_id;\r\n\r\n			$balance = DB::select(''select balance from clients.balance where id= ?'', array($ownerid));\r\n			$current_balance = end($balance)->balance;\r\n\r\n			if($cost_incurred<=$current_balance)\r\n			{\r\n\r\n 			$allsent = FALSE;\r\n 			$messagesent = FALSE;\r\n 			$todaysdate 	  = date("Y-m-d");\r\n\r\n\r\n\r\n 			foreach($phonenumbers_array as &$phonenumber)\r\n 			{\r\n			 //register the new user\r\n			 $user		= Message::create(array(\r\n			 				''phone_number''		=>$phonenumber,\r\n			 				''message''		=>$message,\r\n			 				''date''			=>$todaysdate,\r\n			 				''cost''			=>$this->cost($message),\r\n			 				''active''        =>TRUE\r\n			 ));\r\n\r\n			 $phone_number_send = ''+254''.substr($phonenumber, strlen($phonenumber)-9);\r\n\r\n			// $messagesent = $this->SendSms($phone_number_send, $message);\r\n			 \r\n			if($messagesent==TRUE)\r\n			 {\r\n				$allsent = TRUE;\r\n			 }\r\n			 \r\n			}\r\n\r\n			if($allsent==TRUE)\r\n			 {\r\n			 	$newbalance = $current_balance - $cost_incurred;\r\n\r\n			 	return $newbalance;\r\n\r\n			 	$updatebalance = DB::update(''update clients.balance set balance= ? where id= ?'', array($newbalance,$ownerid));\r\n\r\n				return Redirect::route(''sendmessage-get'')\r\n					->with(''global'',''Success! Your message has been sent'');	\r\n			 }\r\n			}\r\n			else\r\n			{\r\n				return Redirect::route(''sendmessage-get'')\r\n					->with(''global'',''Sorry, your current balance is insufficient.'')->withInput();\r\n			}\r\n		}\r\n		\r\n	}\r\n\r\n	public function postSendMessageToAll()\r\n	{\r\n		//verify the user input and create account\r\n		$validator = Validator::make(Input::all(),array(\r\n			''Message''				=>''required'',\r\n\r\n		));\r\n		\r\n		if($validator->fails())\r\n		{\r\n			return Redirect::route(''sendmessagetoall-get'')\r\n			->withErrors($validator)\r\n			->withInput();\r\n		}\r\n		else {\r\n			\r\n			$message = Input::get(''Message'');\r\n\r\n			 \r\n			//get the members information\r\n			$members = Member::where(''active'',''='',TRUE)->get();\r\n\r\n			$cost_incurred = $members->count() * $this->cost($message);\r\n			$owner = Owner::where(''id'',''='',1)->first();\r\n			$ownerid = $owner->owner_id;\r\n\r\n			$balance = DB::select(''select balance from clients.balance where id= ?'', array($ownerid));\r\n			$current_balance = end($balance)->balance;\r\n\r\n			if($cost_incurred<=$current_balance)\r\n			{\r\n			\r\n			$sent = FALSE;\r\n			$todaysdate 	  = date("Y-m-d");\r\n			\r\n			foreach($members as $member){\r\n				 //register the new user\r\n			 $user		= Message::create(array(\r\n			 				''phone_number''		=>$member->phone_number,\r\n			 				''message''			=>$message,\r\n			 				''member_id''			=>$member->id,\r\n			 				''cost''				=>$this->cost($message),\r\n			 				''date''			    =>$todaysdate,\r\n			 				''active''            =>TRUE\r\n			 ));\r\n\r\n\r\n			   $phone_number_send = ''+254''.substr($member->phone_number, strlen($member->phone_number)-9);\r\n			  // $sent = $this->SendSms($phone_number_send, $message);\r\n			}\r\n			\r\n			 \r\n			 if($sent==TRUE)\r\n			 {\r\n				return Redirect::route(''sendmessagetoall-get'')\r\n					->with(''global'',''Success! Your message has been sent'');	\r\n			 }\r\n			}\r\n			else\r\n			{\r\n				return Redirect::route(''sendmessagetoall-get'')\r\n					->with(''global'',''Sorry, your current balance is insufficient.'')->withInput();\r\n			}\r\n			\r\n		}\r\n		\r\n	}\r\n	\r\n	\r\n	public function postDeleteMessage()\r\n	{\r\n		\r\n		\r\n			$messageId  = Input::get(''messageID'');\r\n			\r\n						\r\n 			$message_delete = Message::where(''id'',''='',$messageId)->first();\r\n 			$message_delete->active = FALSE;\r\n\r\n 			$message_delete = $message_delete->save();\r\n			 \r\n			 if($message_delete)\r\n			 {\r\n				return Redirect::route(''sentmessage-get'')\r\n					->with(''global'',''Success! Message information has been deleted successfully.'');	\r\n			 }	\r\n	}\r\n		\r\n		public function cost($textmessage){\r\n             return ceil(strlen($textmessage)/160)*2;\r\n		}\r\n}\r\n<?php\r\ninclude_once(app_path().''/includes/AfricasTalkingGateway.php'');\r\n\r\n\r\n\r\nclass MessageController extends BaseController {\r\n\r\n	/*\r\n	|--------------------------------------------------------------------------\r\n	| Default Home Controller\r\n	|--------------------------------------------------------------------------\r\n	|\r\n	| You may wish to use controllers instead of, or in addition to, Closure\r\n	| based routes. That''s great! Here is an example controller method to\r\n	| get you started. To route to this controller, just add the route:\r\n	|\r\n	|	Route::get(''/'', ''HomeController@showWelcome'');\r\n	|\r\n	*/\r\n\r\n	public function SendSms($my_recipient,$my_message)\r\n		{\r\n			// Specify your login credentials\r\n			$username   = "adback";\r\n			$apikey     = "c933c719506a6838d4ceac95c9411b27331f34a117ca80473529d967ff9c46b0";\r\n			\r\n			// Specify the numbers that you want to send to in a comma-separated list\r\n			// Please ensure you include the country code (+254 for Kenya in this case)\r\n			$recipients = $my_recipient;\r\n			\r\n			// And of course we want our recipients to know what we really do\r\n			$message    = $my_message;\r\n			\r\n			// Create a new instance of our awesome gateway class\r\n			$gateway    = new AfricasTalkingGateway($username, $apikey);\r\n			\r\n			// Any gateway errors will be captured by our custom Exception class below, \r\n			// so wrap the call in a try-catch block\r\n			try \r\n			{ \r\n			  // Thats it, hit send and we''ll take care of the rest. \r\n			  $results = $gateway->sendMessage($recipients, $message);\r\n			  if($results) {\r\n			    return TRUE;\r\n			  }\r\n			  else {\r\n				  return FALSE;\r\n			  }\r\n			}\r\n			catch ( AfricasTalkingGatewayException $e )\r\n			{\r\n			  return FALSE;\r\n			}\r\n			\r\n			// DONE!!! \r\n		}\r\n	\r\n	public function postSendMessage()\r\n	{\r\n		//verify the user input and create account\r\n		$validator = Validator::make(Input::all(),array(\r\n				''Phone_Number''				=>''required'',\r\n				''Message''				=>''required'',\r\n\r\n		));\r\n		\r\n		if($validator->fails())\r\n		{\r\n			return Redirect::route(''sendmessage-get'')\r\n			->withErrors($validator)\r\n			->withInput();\r\n		}\r\n		else {\r\n			$phonenumbers = Input::get(''Phone_Number'');\r\n			$message = Input::get(''Message'');\r\n			\r\n			\r\n			//remove white spaces from the numbers\r\n			$compressedphonenumbers = str_replace('' '','''', $phonenumbers);\r\n\r\n			//get the specific phone numbers from the array\r\n 			$phonenumbers_array = explode('','', $compressedphonenumbers);\r\n\r\n 			$cost_incurred = sizeof($phonenumbers_array) * $this->cost($message);\r\n\r\n\r\n\r\n 			$owner = Owner::where(''id'',''='',1)->first();\r\n			$ownerid = $owner->owner_id;\r\n\r\n			$balance = DB::select(''select balance from clients.balance where id= ?'', array($ownerid));\r\n			$current_balance = end($balance)->balance;\r\n\r\n			if($cost_incurred<=$current_balance)\r\n			{\r\n\r\n 			$allsent = FALSE;\r\n 			$messagesent = FALSE;\r\n 			$todaysdate 	  = date("Y-m-d");\r\n\r\n\r\n\r\n 			foreach($phonenumbers_array as &$phonenumber)\r\n 			{\r\n			 //register the new user\r\n			 $user		= Message::create(array(\r\n			 				''phone_number''		=>$phonenumber,\r\n			 				''message''		=>$message,\r\n			 				''date''			=>$todaysdate,\r\n			 				''cost''			=>$this->cost($message),\r\n			 				''active''        =>TRUE\r\n			 ));\r\n\r\n			 $phone_number_send = ''+254''.substr($phonenumber, strlen($phonenumber)-9);\r\n\r\n			// $messagesent = $this->SendSms($phone_number_send, $message);\r\n			 \r\n			if($messagesent==TRUE)\r\n			 {\r\n				$allsent = TRUE;\r\n			 }\r\n			 \r\n			}\r\n\r\n			if($allsent==TRUE)\r\n			 {\r\n			 	$newbalance = $current_balance - $cost_incurred;\r\n\r\n			 	return $newbalance;\r\n\r\n			 	$updatebalance = DB::update(''update clients.balance set balance= ? where id= ?'', array($newbalance,$ownerid));\r\n\r\n				return Redirect::route(''sendmessage-get'')\r\n					->with(''global'',''Success! Your message has been sent'');	\r\n			 }\r\n			}\r\n			else\r\n			{\r\n				return Redirect::route(''sendmessage-get'')\r\n					->with(''global'',''Sorry, your current balance is insufficient.'')->withInput();\r\n			}\r\n		}\r\n		\r\n	}\r\n\r\n	public function postSendMessageToAll()\r\n	{\r\n		//verify the user input and create account\r\n		$validator = Validator::make(Input::all(),array(\r\n			''Message''				=>''required'',\r\n\r\n		));\r\n		\r\n		if($validator->fails())\r\n		{\r\n			return Redirect::route(''sendmessagetoall-get'')\r\n			->withErrors($validator)\r\n			->withInput();\r\n		}\r\n		else {\r\n			\r\n			$message = Input::get(''Message'');\r\n\r\n			 \r\n			//get the members information\r\n			$members = Member::where(''active'',''='',TRUE)->get();\r\n\r\n			$cost_incurred = $members->count() * $this->cost($message);\r\n			$owner = Owner::where(''id'',''='',1)->first();\r\n			$ownerid = $owner->owner_id;\r\n\r\n			$balance = DB::select(''select balance from clients.balance where id= ?'', array($ownerid));\r\n			$current_balance = end($balance)->balance;\r\n\r\n			if($cost_incurred<=$current_balance)\r\n			{\r\n			\r\n			$sent = FALSE;\r\n			$todaysdate 	  = date("Y-m-d");\r\n			\r\n			foreach($members as $member){\r\n				 //register the new user\r\n			 $user		= Message::create(array(\r\n			 				''phone_number''		=>$member->phone_number,\r\n			 				''message''			=>$message,\r\n			 				''member_id''			=>$member->id,\r\n			 				''cost''				=>$this->cost($message),\r\n			 				''date''			    =>$todaysdate,\r\n			 				''active''            =>TRUE\r\n			 ));\r\n\r\n\r\n			   $phone_number_send = ''+254''.substr($member->phone_number, strlen($member->phone_number)-9);\r\n			  // $sent = $this->SendSms($phone_number_send, $message);\r\n			}\r\n			\r\n			 \r\n			 if($sent==TRUE)\r\n			 {\r\n				return Redirect::route(''sendmessagetoall-get'')\r\n					->with(''global'',''Success! Your message has been sent'');	\r\n			 }\r\n			}\r\n			else\r\n			{\r\n				return Redirect::route(''sendmessagetoall-get'')\r\n					->with(''global'',''Sorry, your current balance is insufficient.'')->withInput();\r\n			}\r\n			\r\n		}\r\n		\r\n	}\r\n	\r\n	\r\n	public function postDeleteMessage()\r\n	{\r\n		\r\n		\r\n			$messageId  = Input::get(''messageID'');\r\n			\r\n						\r\n 			$message_delete = Message::where(''id'',''='',$messageId)->first();\r\n 			$message_delete->active = FALSE;\r\n\r\n 			$message_delete = $message_delete->save();\r\n			 \r\n			 if($message_delete)\r\n			 {\r\n				return Redirect::route(''sentmessage-get'')\r\n					->with(''global'',''Success! Message information has been deleted successfully.'');	\r\n			 }	\r\n	}\r\n		\r\n		public function cost($textmessage){\r\n             return ceil(strlen($textmessage)/160)*2;\r\n		}\r\n}\r\n<?php\r\ninclude_once(app_path().''/includes/AfricasTalkingGateway.php'');\r\n\r\n\r\n\r\nclass MessageController extends BaseController {\r\n\r\n	/*\r\n	|--------------------------------------------------------------------------\r\n	| Default Home Controller\r\n	|--------------------------------------------------------------------------\r\n	|\r\n	| You may wish to use controllers instead of, or in addition to, Closure\r\n	| based routes. That''s great! Here is an example controller method to\r\n	| get you started. To route to this controller, just add the route:\r\n	|\r\n	|	Route::get(''/'', ''HomeController@showWelcome'');\r\n	|\r\n	*/\r\n\r\n	public function SendSms($my_recipient,$my_message)\r\n		{\r\n			// Specify your login credentials\r\n			$username   = "adback";\r\n			$apikey     = "c933c719506a6838d4ceac95c9411b27331f34a117ca80473529d967ff9c46b0";\r\n			\r\n			// Specify the numbers that you want to send to in a comma-separated list\r\n			// Please ensure you include the country code (+254 for Kenya in this case)\r\n			$recipients = $my_recipient;\r\n			\r\n			// And of course we want our recipients to know what we really do\r\n			$message    = $my_message;\r\n			\r\n			// Create a new instance of our awesome gateway class\r\n			$gateway    = new AfricasTalkingGateway($username, $apikey);\r\n			\r\n			// Any gateway errors will be captured by our custom Exception class below, \r\n			// so wrap the call in a try-catch block\r\n			try \r\n			{ \r\n			  // Thats it, hit send and we''ll take care of the rest. \r\n			  $results = $gateway->sendMessage($recipients, $message);\r\n			  if($results) {\r\n			    return TRUE;\r\n			  }\r\n			  else {\r\n				  return FALSE;\r\n			  }\r\n			}\r\n			catch ( AfricasTalkingGatewayException $e )\r\n			{\r\n			  return FALSE;\r\n			}\r\n			\r\n			// DONE!!! \r\n		}\r\n	\r\n	public function postSendMessage()\r\n	{\r\n		//verify the user input and create account\r\n		$validator = Validator::make(Input::all(),array(\r\n				''Phone_Number''				=>''required'',\r\n				''Message''				=>''required'',\r\n\r\n		));\r\n		\r\n		if($validator->fails())\r\n		{\r\n			return Redirect::route(''sendmessage-get'')\r\n			->withErrors($validator)\r\n			->withInput();\r\n		}\r\n		else {\r\n			$phonenumbers = Input::get(''Phone_Number'');\r\n			$message = Input::get(''Message'');\r\n			\r\n			\r\n			//remove white spaces from the numbers\r\n			$compressedphonenumbers = str_replace('' '','''', $phonenumbers);\r\n\r\n			//get the specific phone numbers from the array\r\n 			$phonenumbers_array = explode('','', $compressedphonenumbers);\r\n\r\n 			$cost_incurred = sizeof($phonenumbers_array) * $this->cost($message);\r\n\r\n\r\n\r\n 			$owner = Owner::where(''id'',''='',1)->first();\r\n			$ownerid = $owner->owner_id;\r\n\r\n			$balance = DB::select(''select balance from clients.balance where id= ?'', array($ownerid));\r\n			$current_balance = end($balance)->balance;\r\n\r\n			if($cost_incurred<=$current_balance)\r\n			{\r\n\r\n 			$allsent = FALSE;\r\n 			$messagesent = FALSE;\r\n 			$todaysdate 	  = date("Y-m-d");\r\n\r\n\r\n\r\n 			foreach($phonenumbers_array as &$phonenumber)\r\n 			{\r\n			 //register the new user\r\n			 $user		= Message::create(array(\r\n			 				''phone_number''		=>$phonenumber,\r\n			 				''message''		=>$message,\r\n			 				''date''			=>$todaysdate,\r\n			 				''cost''			=>$this->cost($message),\r\n			 				''active''        =>TRUE\r\n			 ));\r\n\r\n			 $phone_number_send = ''+254''.substr($phonenumber, strlen($phonenumber)-9);\r\n\r\n			// $messagesent = $this->SendSms($phone_number_send, $message);\r\n			 \r\n			if($messagesent==TRUE)\r\n			 {\r\n				$allsent = TRUE;\r\n			 }\r\n			 \r\n			}\r\n\r\n			if($allsent==TRUE)\r\n			 {\r\n			 	$newbalance = $current_balance - $cost_incurred;\r\n\r\n			 	return $newbalance;\r\n\r\n			 	$updatebalance = DB::update(''update clients.balance set balance= ? where id= ?'', array($newbalance,$ownerid));\r\n\r\n				return Redirect::route(''sendmessage-get'')\r\n					->with(''global'',''Success! Your message has been sent'');	\r\n			 }\r\n			}\r\n			else\r\n			{\r\n				return Redirect::route(''sendmessage-get'')\r\n					->with(''global'',''Sorry, your current balance is insufficient.'')->withInput();\r\n			}\r\n		}\r\n		\r\n	}\r\n\r\n	public function postSendMessageToAll()\r\n	{\r\n		//verify the user input and create account\r\n		$validator = Validator::make(Input::all(),array(\r\n			''Message''				=>''required'',\r\n\r\n		));\r\n		\r\n		if($validator->fails())\r\n		{\r\n			return Redirect::route(''sendmessagetoall-get'')\r\n			->withErrors($validator)\r\n			->withInput();\r\n		}\r\n		else {\r\n			\r\n			$message = Input::get(''Message'');\r\n\r\n			 \r\n			//get the members information\r\n			$members = Member::where(''active'',''='',TRUE)->get();\r\n\r\n			$cost_incurred = $members->count() * $this->cost($message);\r\n			$owner = Owner::where(''id'',''='',1)->first();\r\n			$ownerid = $owner->owner_id;\r\n\r\n			$balance = DB::select(''select balance from clients.balance where id= ?'', array($ownerid));\r\n			$current_balance = end($balance)->balance;\r\n\r\n			if($cost_incurred<=$current_balance)\r\n			{\r\n			\r\n			$sent = FALSE;\r\n			$todaysdate 	  = date("Y-m-d");\r\n			\r\n			foreach($members as $member){\r\n				 //register the new user\r\n			 $user		= Message::create(array(\r\n			 				''phone_number''		=>$member->phone_number,\r\n			 				''message''			=>$message,\r\n			 				''member_id''			=>$member->id,\r\n			 				''cost''				=>$this->cost($message),\r\n			 				''date''			    =>$todaysdate,\r\n			 				''active''            =>TRUE\r\n			 ));\r\n\r\n\r\n			   $phone_number_send = ''+254''.substr($member->phone_number, strlen($member->phone_number)-9);\r\n			  // $sent = $this->SendSms($phone_number_send, $message);\r\n			}\r\n			\r\n			 \r\n			 if($sent==TRUE)\r\n			 {\r\n				return Redirect::route(''sendmessagetoall-get'')\r\n					->with(''global'',''Success! Your message has been sent'');	\r\n			 }\r\n			}\r\n			else\r\n			{\r\n				return Redirect::route(''sendmessagetoall-get'')\r\n					->with(''global'',''Sorry, your current balance is insufficient.'')->withInput();\r\n			}\r\n			\r\n		}\r\n		\r\n	}\r\n	\r\n	\r\n	public function postDeleteMessage()\r\n	{\r\n		\r\n		\r\n			$messageId  = Input::get(''messageID'');\r\n			\r\n						\r\n 			$message_delete = Message::where(''id'',''='',$messageId)->first();\r\n 			$message_delete->active = FALSE;\r\n\r\n 			$message_delete = $message_delete->save();\r\n			 \r\n			 if($message_delete)\r\n			 {\r\n				return Redirect::route(''sentmessage-get'')\r\n					->with(''global'',''Success! Message information has been deleted successfully.'');	\r\n			 }	\r\n	}\r\n		\r\n		public function cost($textmessage){\r\n             return ceil(strlen($textmessage)/160)*2;\r\n		}\r\n}\r\n<?php\r\ninclude_once(app_path().''/includes/AfricasTalkingGateway.php'');\r\n\r\n\r\n\r\nclass MessageController extends BaseController {\r\n\r\n	/*\r\n	|--------------------------------------------------------------------------\r\n	| Default Home Controller\r\n	|--------------------------------------------------------------------------\r\n	|\r\n	| You may wish to use controllers instead of, or in addition to, Closure\r\n	| based routes. That''s great! Here is an example controller method to\r\n	| get you started. To route to this controller, just add the route:\r\n	|\r\n	|	Route::get(''/'', ''HomeController@showWelcome'');\r\n	|\r\n	*/\r\n\r\n	public function SendSms($my_recipient,$my_message)\r\n		{\r\n			// Specify your login credentials\r\n			$username   = "adback";\r\n			$apikey     = "c933c719506a6838d4ceac95c9411b27331f34a117ca80473529d967ff9c46b0";\r\n			\r\n			// Specify the numbers that you want to send to in a comma-separated list\r\n			// Please ensure you include the country code (+254 for Kenya in this case)\r\n			$recipients = $my_recipient;\r\n			\r\n			// And of course we want our recipients to know what we really do\r\n			$message    = $my_message;\r\n			\r\n			// Create a new instance of our awesome gateway class\r\n			$gateway    = new AfricasTalkingGateway($username, $apikey);\r\n			\r\n			// Any gateway errors will be captured by our custom Exception class below, \r\n			// so wrap the call in a try-catch block\r\n			try \r\n			{ \r\n			  // Thats it, hit send and we''ll take care of the rest. \r\n			  $results = $gateway->sendMessage($recipients, $message);\r\n			  if($results) {\r\n			    return TRUE;\r\n			  }\r\n			  else {\r\n				  return FALSE;\r\n			  }\r\n			}\r\n			catch ( AfricasTalkingGatewayException $e )\r\n			{\r\n			  return FALSE;\r\n			}\r\n			\r\n			// DONE!!! \r\n		}\r\n	\r\n	public function postSendMessage()\r\n	{\r\n		//verify the user input and create account\r\n		$validator = Validator::make(Input::all(),array(\r\n				''Phone_Number''				=>''required'',\r\n				''Message''				=>''required'',\r\n\r\n		));\r\n		\r\n		if($validator->fails())\r\n		{\r\n			return Redirect::route(''sendmessage-get'')\r\n			->withErrors($validator)\r\n			->withInput();\r\n		}\r\n		else {\r\n			$phonenumbers = Input::get(''Phone_Number'');\r\n			$message = Input::get(''Message'');\r\n			\r\n			\r\n			//remove white spaces from the numbers\r\n			$compressedphonenumbers = str_replace('' '','''', $phonenumbers);\r\n\r\n			//get the specific phone numbers from the array\r\n 			$phonenumbers_array = explode('','', $compressedphonenumbers);\r\n\r\n 			$cost_incurred = sizeof($phonenumbers_array) * $this->cost($message);\r\n\r\n\r\n\r\n 			$owner = Owner::where(''id'',''='',1)->first();\r\n			$ownerid = $owner->owner_id;\r\n\r\n			$balance = DB::select(''select balance from clients.balance where id= ?'', array($ownerid));\r\n			$current_balance = end($balance)->balance;\r\n\r\n			if($cost_incurred<=$current_balance)\r\n			{\r\n\r\n 			$allsent = FALSE;\r\n 			$messagesent = FALSE;\r\n 			$todaysdate 	  = date("Y-m-d");\r\n\r\n\r\n\r\n 			foreach($phonenumbers_array as &$phonenumber)\r\n 			{\r\n			 //register the new user\r\n			 $user		= Message::create(array(\r\n			 				''phone_number''		=>$phonenumber,\r\n			 				''message''		=>$message,\r\n			 				''date''			=>$todaysdate,\r\n			 				''cost''			=>$this->cost($message),\r\n			 				''active''        =>TRUE\r\n			 ));\r\n\r\n			 $phone_number_send = ''+254''.substr($phonenumber, strlen($phonenumber)-9);\r\n\r\n			// $messagesent = $this->SendSms($phone_number_send, $message);\r\n			 \r\n			if($messagesent==TRUE)\r\n			 {\r\n				$allsent = TRUE;\r\n			 }\r\n			 \r\n			}\r\n\r\n			if($allsent==TRUE)\r\n			 {\r\n			 	$newbalance = $current_balance - $cost_incurred;\r\n\r\n			 	return $newbalance;\r\n\r\n			 	$updatebalance = DB::update(''update clients.balance set balance= ? where id= ?'', array($newbalance,$ownerid));\r\n\r\n				return Redirect::route(''sendmessage-get'')\r\n					->with(''global'',''Success! Your message has been sent'');	\r\n			 }\r\n			}\r\n			else\r\n			{\r\n				return Redirect::route(''sendmessage-get'')\r\n					->with(''global'',''Sorry, your current balance is insufficient.'')->withInput();\r\n			}\r\n		}\r\n		\r\n	}\r\n\r\n	public function postSendMessageToAll()\r\n	{\r\n		//verify the user input and create account\r\n		$validator = Validator::make(Input::all(),array(\r\n			''Message''				=>''required'',\r\n\r\n		));\r\n		\r\n		if($validator->fails())\r\n		{\r\n			return Redirect::route(''sendmessagetoall-get'')\r\n			->withErrors($validator)\r\n			->withInput();\r\n		}\r\n		else {\r\n			\r\n			$message = Input::get(''Message'');\r\n\r\n			 \r\n			//get the members information\r\n			$members = Member::where(''active'',''='',TRUE)->get();\r\n\r\n			$cost_incurred = $members->count() * $this->cost($message);\r\n			$owner = Owner::where(''id'',''='',1)->first();\r\n			$ownerid = $owner->owner_id;\r\n\r\n			$balance = DB::select(''select balance from clients.balance where id= ?'', array($ownerid));\r\n			$current_balance = end($balance)->balance;\r\n\r\n			if($cost_incurred<=$current_balance)\r\n			{\r\n			\r\n			$sent = FALSE;\r\n			$todaysdate 	  = date("Y-m-d");\r\n			\r\n			foreach($members as $member){\r\n				 //register the new user\r\n			 $user		= Message::create(array(\r\n			 				''phone_number''		=>$member->phone_number,\r\n			 				''message''			=>$message,\r\n			 				''member_id''			=>$member->id,\r\n			 				''cost''				=>$this->cost($message),\r\n			 				''date''			    =>$todaysdate,\r\n			 				''active''            =>TRUE\r\n			 ));\r\n\r\n\r\n			   $phone_number_send = ''+254''.substr($member->phone_number, strlen($member->phone_number)-9);\r\n			  // $sent = $this->SendSms($phone_number_send, $message);\r\n			}\r\n			\r\n			 \r\n			 if($sent==TRUE)\r\n			 {\r\n				return Redirect::route(''sendmessagetoall-get'')\r\n					->with(''global'',''Success! Your message has been sent'');	\r\n			 }\r\n			}\r\n			else\r\n			{\r\n				return Redirect::route(''sendmessagetoall-get'')\r\n					->with(''global'',''Sorry, your current balance is insufficient.'')->withInput();\r\n			}\r\n			\r\n		}\r\n		\r\n	}\r\n	\r\n	\r\n	public function postDeleteMessage()\r\n	{\r\n		\r\n		\r\n			$messageId  = Input::get(''messageID'');\r\n			\r\n						\r\n 			$message_delete = Message::where(''id'',''='',$messageId)->first();\r\n 			$message_delete->active = FALSE;\r\n\r\n 			$message_delete = $message_delete->save();\r\n			 \r\n			 if($message_delete)\r\n			 {\r\n				return Redirect::route(''sentmessage-get'')\r\n					->with(''global'',''Success! Message information has been deleted successfully.'');	\r\n			 }	\r\n	}\r\n		\r\n		public function cost($textmessage){\r\n             return ceil(strlen($textmessage)/160)*2;\r\n		}\r\n}\r\n', '468.00', '2014-11-09 06:59:22', '2014-11-16 06:27:54', '44444', '2014-11-09', 0);
INSERT INTO `messages` (`id`, `member_id`, `message`, `cost`, `created_at`, `updated_at`, `phone_number`, `date`, `active`) VALUES
(58, 0, 'haloooo<?php\r\ninclude_once(app_path().''/includes/AfricasTalkingGateway.php'');\r\n\r\n\r\n\r\nclass MessageController extends BaseController {\r\n\r\n	/*\r\n	|--------------------------------------------------------------------------\r\n	| Default Home Controller\r\n	|--------------------------------------------------------------------------\r\n	|\r\n	| You may wish to use controllers instead of, or in addition to, Closure\r\n	| based routes. That''s great! Here is an example controller method to\r\n	| get you started. To route to this controller, just add the route:\r\n	|\r\n	|	Route::get(''/'', ''HomeController@showWelcome'');\r\n	|\r\n	*/\r\n\r\n	public function SendSms($my_recipient,$my_message)\r\n		{\r\n			// Specify your login credentials\r\n			$username   = "adback";\r\n			$apikey     = "c933c719506a6838d4ceac95c9411b27331f34a117ca80473529d967ff9c46b0";\r\n			\r\n			// Specify the numbers that you want to send to in a comma-separated list\r\n			// Please ensure you include the country code (+254 for Kenya in this case)\r\n			$recipients = $my_recipient;\r\n			\r\n			// And of course we want our recipients to know what we really do\r\n			$message    = $my_message;\r\n			\r\n			// Create a new instance of our awesome gateway class\r\n			$gateway    = new AfricasTalkingGateway($username, $apikey);\r\n			\r\n			// Any gateway errors will be captured by our custom Exception class below, \r\n			// so wrap the call in a try-catch block\r\n			try \r\n			{ \r\n			  // Thats it, hit send and we''ll take care of the rest. \r\n			  $results = $gateway->sendMessage($recipients, $message);\r\n			  if($results) {\r\n			    return TRUE;\r\n			  }\r\n			  else {\r\n				  return FALSE;\r\n			  }\r\n			}\r\n			catch ( AfricasTalkingGatewayException $e )\r\n			{\r\n			  return FALSE;\r\n			}\r\n			\r\n			// DONE!!! \r\n		}\r\n	\r\n	public function postSendMessage()\r\n	{\r\n		//verify the user input and create account\r\n		$validator = Validator::make(Input::all(),array(\r\n				''Phone_Number''				=>''required'',\r\n				''Message''				=>''required'',\r\n\r\n		));\r\n		\r\n		if($validator->fails())\r\n		{\r\n			return Redirect::route(''sendmessage-get'')\r\n			->withErrors($validator)\r\n			->withInput();\r\n		}\r\n		else {\r\n			$phonenumbers = Input::get(''Phone_Number'');\r\n			$message = Input::get(''Message'');\r\n			\r\n			\r\n			//remove white spaces from the numbers\r\n			$compressedphonenumbers = str_replace('' '','''', $phonenumbers);\r\n\r\n			//get the specific phone numbers from the array\r\n 			$phonenumbers_array = explode('','', $compressedphonenumbers);\r\n\r\n 			$cost_incurred = sizeof($phonenumbers_array) * $this->cost($message);\r\n\r\n\r\n\r\n 			$owner = Owner::where(''id'',''='',1)->first();\r\n			$ownerid = $owner->owner_id;\r\n\r\n			$balance = DB::select(''select balance from clients.balance where id= ?'', array($ownerid));\r\n			$current_balance = end($balance)->balance;\r\n\r\n			if($cost_incurred<=$current_balance)\r\n			{\r\n\r\n 			$allsent = FALSE;\r\n 			$messagesent = FALSE;\r\n 			$todaysdate 	  = date("Y-m-d");\r\n\r\n\r\n\r\n 			foreach($phonenumbers_array as &$phonenumber)\r\n 			{\r\n			 //register the new user\r\n			 $user		= Message::create(array(\r\n			 				''phone_number''		=>$phonenumber,\r\n			 				''message''		=>$message,\r\n			 				''date''			=>$todaysdate,\r\n			 				''cost''			=>$this->cost($message),\r\n			 				''active''        =>TRUE\r\n			 ));\r\n\r\n			 $phone_number_send = ''+254''.substr($phonenumber, strlen($phonenumber)-9);\r\n\r\n			// $messagesent = $this->SendSms($phone_number_send, $message);\r\n			 \r\n			if($messagesent==TRUE)\r\n			 {\r\n				$allsent = TRUE;\r\n			 }\r\n			 \r\n			}\r\n\r\n			if($allsent==TRUE)\r\n			 {\r\n			 	$newbalance = $current_balance - $cost_incurred;\r\n\r\n			 	return $newbalance;\r\n\r\n			 	$updatebalance = DB::update(''update clients.balance set balance= ? where id= ?'', array($newbalance,$ownerid));\r\n\r\n				return Redirect::route(''sendmessage-get'')\r\n					->with(''global'',''Success! Your message has been sent'');	\r\n			 }\r\n			}\r\n			else\r\n			{\r\n				return Redirect::route(''sendmessage-get'')\r\n					->with(''global'',''Sorry, your current balance is insufficient.'')->withInput();\r\n			}\r\n		}\r\n		\r\n	}\r\n\r\n	public function postSendMessageToAll()\r\n	{\r\n		//verify the user input and create account\r\n		$validator = Validator::make(Input::all(),array(\r\n			''Message''				=>''required'',\r\n\r\n		));\r\n		\r\n		if($validator->fails())\r\n		{\r\n			return Redirect::route(''sendmessagetoall-get'')\r\n			->withErrors($validator)\r\n			->withInput();\r\n		}\r\n		else {\r\n			\r\n			$message = Input::get(''Message'');\r\n\r\n			 \r\n			//get the members information\r\n			$members = Member::where(''active'',''='',TRUE)->get();\r\n\r\n			$cost_incurred = $members->count() * $this->cost($message);\r\n			$owner = Owner::where(''id'',''='',1)->first();\r\n			$ownerid = $owner->owner_id;\r\n\r\n			$balance = DB::select(''select balance from clients.balance where id= ?'', array($ownerid));\r\n			$current_balance = end($balance)->balance;\r\n\r\n			if($cost_incurred<=$current_balance)\r\n			{\r\n			\r\n			$sent = FALSE;\r\n			$todaysdate 	  = date("Y-m-d");\r\n			\r\n			foreach($members as $member){\r\n				 //register the new user\r\n			 $user		= Message::create(array(\r\n			 				''phone_number''		=>$member->phone_number,\r\n			 				''message''			=>$message,\r\n			 				''member_id''			=>$member->id,\r\n			 				''cost''				=>$this->cost($message),\r\n			 				''date''			    =>$todaysdate,\r\n			 				''active''            =>TRUE\r\n			 ));\r\n\r\n\r\n			   $phone_number_send = ''+254''.substr($member->phone_number, strlen($member->phone_number)-9);\r\n			  // $sent = $this->SendSms($phone_number_send, $message);\r\n			}\r\n			\r\n			 \r\n			 if($sent==TRUE)\r\n			 {\r\n				return Redirect::route(''sendmessagetoall-get'')\r\n					->with(''global'',''Success! Your message has been sent'');	\r\n			 }\r\n			}\r\n			else\r\n			{\r\n				return Redirect::route(''sendmessagetoall-get'')\r\n					->with(''global'',''Sorry, your current balance is insufficient.'')->withInput();\r\n			}\r\n			\r\n		}\r\n		\r\n	}\r\n	\r\n	\r\n	public function postDeleteMessage()\r\n	{\r\n		\r\n		\r\n			$messageId  = Input::get(''messageID'');\r\n			\r\n						\r\n 			$message_delete = Message::where(''id'',''='',$messageId)->first();\r\n 			$message_delete->active = FALSE;\r\n\r\n 			$message_delete = $message_delete->save();\r\n			 \r\n			 if($message_delete)\r\n			 {\r\n				return Redirect::route(''sentmessage-get'')\r\n					->with(''global'',''Success! Message information has been deleted successfully.'');	\r\n			 }	\r\n	}\r\n		\r\n		public function cost($textmessage){\r\n             return ceil(strlen($textmessage)/160)*2;\r\n		}\r\n}\r\n<?php\r\ninclude_once(app_path().''/includes/AfricasTalkingGateway.php'');\r\n\r\n\r\n\r\nclass MessageController extends BaseController {\r\n\r\n	/*\r\n	|--------------------------------------------------------------------------\r\n	| Default Home Controller\r\n	|--------------------------------------------------------------------------\r\n	|\r\n	| You may wish to use controllers instead of, or in addition to, Closure\r\n	| based routes. That''s great! Here is an example controller method to\r\n	| get you started. To route to this controller, just add the route:\r\n	|\r\n	|	Route::get(''/'', ''HomeController@showWelcome'');\r\n	|\r\n	*/\r\n\r\n	public function SendSms($my_recipient,$my_message)\r\n		{\r\n			// Specify your login credentials\r\n			$username   = "adback";\r\n			$apikey     = "c933c719506a6838d4ceac95c9411b27331f34a117ca80473529d967ff9c46b0";\r\n			\r\n			// Specify the numbers that you want to send to in a comma-separated list\r\n			// Please ensure you include the country code (+254 for Kenya in this case)\r\n			$recipients = $my_recipient;\r\n			\r\n			// And of course we want our recipients to know what we really do\r\n			$message    = $my_message;\r\n			\r\n			// Create a new instance of our awesome gateway class\r\n			$gateway    = new AfricasTalkingGateway($username, $apikey);\r\n			\r\n			// Any gateway errors will be captured by our custom Exception class below, \r\n			// so wrap the call in a try-catch block\r\n			try \r\n			{ \r\n			  // Thats it, hit send and we''ll take care of the rest. \r\n			  $results = $gateway->sendMessage($recipients, $message);\r\n			  if($results) {\r\n			    return TRUE;\r\n			  }\r\n			  else {\r\n				  return FALSE;\r\n			  }\r\n			}\r\n			catch ( AfricasTalkingGatewayException $e )\r\n			{\r\n			  return FALSE;\r\n			}\r\n			\r\n			// DONE!!! \r\n		}\r\n	\r\n	public function postSendMessage()\r\n	{\r\n		//verify the user input and create account\r\n		$validator = Validator::make(Input::all(),array(\r\n				''Phone_Number''				=>''required'',\r\n				''Message''				=>''required'',\r\n\r\n		));\r\n		\r\n		if($validator->fails())\r\n		{\r\n			return Redirect::route(''sendmessage-get'')\r\n			->withErrors($validator)\r\n			->withInput();\r\n		}\r\n		else {\r\n			$phonenumbers = Input::get(''Phone_Number'');\r\n			$message = Input::get(''Message'');\r\n			\r\n			\r\n			//remove white spaces from the numbers\r\n			$compressedphonenumbers = str_replace('' '','''', $phonenumbers);\r\n\r\n			//get the specific phone numbers from the array\r\n 			$phonenumbers_array = explode('','', $compressedphonenumbers);\r\n\r\n 			$cost_incurred = sizeof($phonenumbers_array) * $this->cost($message);\r\n\r\n\r\n\r\n 			$owner = Owner::where(''id'',''='',1)->first();\r\n			$ownerid = $owner->owner_id;\r\n\r\n			$balance = DB::select(''select balance from clients.balance where id= ?'', array($ownerid));\r\n			$current_balance = end($balance)->balance;\r\n\r\n			if($cost_incurred<=$current_balance)\r\n			{\r\n\r\n 			$allsent = FALSE;\r\n 			$messagesent = FALSE;\r\n 			$todaysdate 	  = date("Y-m-d");\r\n\r\n\r\n\r\n 			foreach($phonenumbers_array as &$phonenumber)\r\n 			{\r\n			 //register the new user\r\n			 $user		= Message::create(array(\r\n			 				''phone_number''		=>$phonenumber,\r\n			 				''message''		=>$message,\r\n			 				''date''			=>$todaysdate,\r\n			 				''cost''			=>$this->cost($message),\r\n			 				''active''        =>TRUE\r\n			 ));\r\n\r\n			 $phone_number_send = ''+254''.substr($phonenumber, strlen($phonenumber)-9);\r\n\r\n			// $messagesent = $this->SendSms($phone_number_send, $message);\r\n			 \r\n			if($messagesent==TRUE)\r\n			 {\r\n				$allsent = TRUE;\r\n			 }\r\n			 \r\n			}\r\n\r\n			if($allsent==TRUE)\r\n			 {\r\n			 	$newbalance = $current_balance - $cost_incurred;\r\n\r\n			 	return $newbalance;\r\n\r\n			 	$updatebalance = DB::update(''update clients.balance set balance= ? where id= ?'', array($newbalance,$ownerid));\r\n\r\n				return Redirect::route(''sendmessage-get'')\r\n					->with(''global'',''Success! Your message has been sent'');	\r\n			 }\r\n			}\r\n			else\r\n			{\r\n				return Redirect::route(''sendmessage-get'')\r\n					->with(''global'',''Sorry, your current balance is insufficient.'')->withInput();\r\n			}\r\n		}\r\n		\r\n	}\r\n\r\n	public function postSendMessageToAll()\r\n	{\r\n		//verify the user input and create account\r\n		$validator = Validator::make(Input::all(),array(\r\n			''Message''				=>''required'',\r\n\r\n		));\r\n		\r\n		if($validator->fails())\r\n		{\r\n			return Redirect::route(''sendmessagetoall-get'')\r\n			->withErrors($validator)\r\n			->withInput();\r\n		}\r\n		else {\r\n			\r\n			$message = Input::get(''Message'');\r\n\r\n			 \r\n			//get the members information\r\n			$members = Member::where(''active'',''='',TRUE)->get();\r\n\r\n			$cost_incurred = $members->count() * $this->cost($message);\r\n			$owner = Owner::where(''id'',''='',1)->first();\r\n			$ownerid = $owner->owner_id;\r\n\r\n			$balance = DB::select(''select balance from clients.balance where id= ?'', array($ownerid));\r\n			$current_balance = end($balance)->balance;\r\n\r\n			if($cost_incurred<=$current_balance)\r\n			{\r\n			\r\n			$sent = FALSE;\r\n			$todaysdate 	  = date("Y-m-d");\r\n			\r\n			foreach($members as $member){\r\n				 //register the new user\r\n			 $user		= Message::create(array(\r\n			 				''phone_number''		=>$member->phone_number,\r\n			 				''message''			=>$message,\r\n			 				''member_id''			=>$member->id,\r\n			 				''cost''				=>$this->cost($message),\r\n			 				''date''			    =>$todaysdate,\r\n			 				''active''            =>TRUE\r\n			 ));\r\n\r\n\r\n			   $phone_number_send = ''+254''.substr($member->phone_number, strlen($member->phone_number)-9);\r\n			  // $sent = $this->SendSms($phone_number_send, $message);\r\n			}\r\n			\r\n			 \r\n			 if($sent==TRUE)\r\n			 {\r\n				return Redirect::route(''sendmessagetoall-get'')\r\n					->with(''global'',''Success! Your message has been sent'');	\r\n			 }\r\n			}\r\n			else\r\n			{\r\n				return Redirect::route(''sendmessagetoall-get'')\r\n					->with(''global'',''Sorry, your current balance is insufficient.'')->withInput();\r\n			}\r\n			\r\n		}\r\n		\r\n	}\r\n	\r\n	\r\n	public function postDeleteMessage()\r\n	{\r\n		\r\n		\r\n			$messageId  = Input::get(''messageID'');\r\n			\r\n						\r\n 			$message_delete = Message::where(''id'',''='',$messageId)->first();\r\n 			$message_delete->active = FALSE;\r\n\r\n 			$message_delete = $message_delete->save();\r\n			 \r\n			 if($message_delete)\r\n			 {\r\n				return Redirect::route(''sentmessage-get'')\r\n					->with(''global'',''Success! Message information has been deleted successfully.'');	\r\n			 }	\r\n	}\r\n		\r\n		public function cost($textmessage){\r\n             return ceil(strlen($textmessage)/160)*2;\r\n		}\r\n}\r\n<?php\r\ninclude_once(app_path().''/includes/AfricasTalkingGateway.php'');\r\n\r\n\r\n\r\nclass MessageController extends BaseController {\r\n\r\n	/*\r\n	|--------------------------------------------------------------------------\r\n	| Default Home Controller\r\n	|--------------------------------------------------------------------------\r\n	|\r\n	| You may wish to use controllers instead of, or in addition to, Closure\r\n	| based routes. That''s great! Here is an example controller method to\r\n	| get you started. To route to this controller, just add the route:\r\n	|\r\n	|	Route::get(''/'', ''HomeController@showWelcome'');\r\n	|\r\n	*/\r\n\r\n	public function SendSms($my_recipient,$my_message)\r\n		{\r\n			// Specify your login credentials\r\n			$username   = "adback";\r\n			$apikey     = "c933c719506a6838d4ceac95c9411b27331f34a117ca80473529d967ff9c46b0";\r\n			\r\n			// Specify the numbers that you want to send to in a comma-separated list\r\n			// Please ensure you include the country code (+254 for Kenya in this case)\r\n			$recipients = $my_recipient;\r\n			\r\n			// And of course we want our recipients to know what we really do\r\n			$message    = $my_message;\r\n			\r\n			// Create a new instance of our awesome gateway class\r\n			$gateway    = new AfricasTalkingGateway($username, $apikey);\r\n			\r\n			// Any gateway errors will be captured by our custom Exception class below, \r\n			// so wrap the call in a try-catch block\r\n			try \r\n			{ \r\n			  // Thats it, hit send and we''ll take care of the rest. \r\n			  $results = $gateway->sendMessage($recipients, $message);\r\n			  if($results) {\r\n			    return TRUE;\r\n			  }\r\n			  else {\r\n				  return FALSE;\r\n			  }\r\n			}\r\n			catch ( AfricasTalkingGatewayException $e )\r\n			{\r\n			  return FALSE;\r\n			}\r\n			\r\n			// DONE!!! \r\n		}\r\n	\r\n	public function postSendMessage()\r\n	{\r\n		//verify the user input and create account\r\n		$validator = Validator::make(Input::all(),array(\r\n				''Phone_Number''				=>''required'',\r\n				''Message''				=>''required'',\r\n\r\n		));\r\n		\r\n		if($validator->fails())\r\n		{\r\n			return Redirect::route(''sendmessage-get'')\r\n			->withErrors($validator)\r\n			->withInput();\r\n		}\r\n		else {\r\n			$phonenumbers = Input::get(''Phone_Number'');\r\n			$message = Input::get(''Message'');\r\n			\r\n			\r\n			//remove white spaces from the numbers\r\n			$compressedphonenumbers = str_replace('' '','''', $phonenumbers);\r\n\r\n			//get the specific phone numbers from the array\r\n 			$phonenumbers_array = explode('','', $compressedphonenumbers);\r\n\r\n 			$cost_incurred = sizeof($phonenumbers_array) * $this->cost($message);\r\n\r\n\r\n\r\n 			$owner = Owner::where(''id'',''='',1)->first();\r\n			$ownerid = $owner->owner_id;\r\n\r\n			$balance = DB::select(''select balance from clients.balance where id= ?'', array($ownerid));\r\n			$current_balance = end($balance)->balance;\r\n\r\n			if($cost_incurred<=$current_balance)\r\n			{\r\n\r\n 			$allsent = FALSE;\r\n 			$messagesent = FALSE;\r\n 			$todaysdate 	  = date("Y-m-d");\r\n\r\n\r\n\r\n 			foreach($phonenumbers_array as &$phonenumber)\r\n 			{\r\n			 //register the new user\r\n			 $user		= Message::create(array(\r\n			 				''phone_number''		=>$phonenumber,\r\n			 				''message''		=>$message,\r\n			 				''date''			=>$todaysdate,\r\n			 				''cost''			=>$this->cost($message),\r\n			 				''active''        =>TRUE\r\n			 ));\r\n\r\n			 $phone_number_send = ''+254''.substr($phonenumber, strlen($phonenumber)-9);\r\n\r\n			// $messagesent = $this->SendSms($phone_number_send, $message);\r\n			 \r\n			if($messagesent==TRUE)\r\n			 {\r\n				$allsent = TRUE;\r\n			 }\r\n			 \r\n			}\r\n\r\n			if($allsent==TRUE)\r\n			 {\r\n			 	$newbalance = $current_balance - $cost_incurred;\r\n\r\n			 	return $newbalance;\r\n\r\n			 	$updatebalance = DB::update(''update clients.balance set balance= ? where id= ?'', array($newbalance,$ownerid));\r\n\r\n				return Redirect::route(''sendmessage-get'')\r\n					->with(''global'',''Success! Your message has been sent'');	\r\n			 }\r\n			}\r\n			else\r\n			{\r\n				return Redirect::route(''sendmessage-get'')\r\n					->with(''global'',''Sorry, your current balance is insufficient.'')->withInput();\r\n			}\r\n		}\r\n		\r\n	}\r\n\r\n	public function postSendMessageToAll()\r\n	{\r\n		//verify the user input and create account\r\n		$validator = Validator::make(Input::all(),array(\r\n			''Message''				=>''required'',\r\n\r\n		));\r\n		\r\n		if($validator->fails())\r\n		{\r\n			return Redirect::route(''sendmessagetoall-get'')\r\n			->withErrors($validator)\r\n			->withInput();\r\n		}\r\n		else {\r\n			\r\n			$message = Input::get(''Message'');\r\n\r\n			 \r\n			//get the members information\r\n			$members = Member::where(''active'',''='',TRUE)->get();\r\n\r\n			$cost_incurred = $members->count() * $this->cost($message);\r\n			$owner = Owner::where(''id'',''='',1)->first();\r\n			$ownerid = $owner->owner_id;\r\n\r\n			$balance = DB::select(''select balance from clients.balance where id= ?'', array($ownerid));\r\n			$current_balance = end($balance)->balance;\r\n\r\n			if($cost_incurred<=$current_balance)\r\n			{\r\n			\r\n			$sent = FALSE;\r\n			$todaysdate 	  = date("Y-m-d");\r\n			\r\n			foreach($members as $member){\r\n				 //register the new user\r\n			 $user		= Message::create(array(\r\n			 				''phone_number''		=>$member->phone_number,\r\n			 				''message''			=>$message,\r\n			 				''member_id''			=>$member->id,\r\n			 				''cost''				=>$this->cost($message),\r\n			 				''date''			    =>$todaysdate,\r\n			 				''active''            =>TRUE\r\n			 ));\r\n\r\n\r\n			   $phone_number_send = ''+254''.substr($member->phone_number, strlen($member->phone_number)-9);\r\n			  // $sent = $this->SendSms($phone_number_send, $message);\r\n			}\r\n			\r\n			 \r\n			 if($sent==TRUE)\r\n			 {\r\n				return Redirect::route(''sendmessagetoall-get'')\r\n					->with(''global'',''Success! Your message has been sent'');	\r\n			 }\r\n			}\r\n			else\r\n			{\r\n				return Redirect::route(''sendmessagetoall-get'')\r\n					->with(''global'',''Sorry, your current balance is insufficient.'')->withInput();\r\n			}\r\n			\r\n		}\r\n		\r\n	}\r\n	\r\n	\r\n	public function postDeleteMessage()\r\n	{\r\n		\r\n		\r\n			$messageId  = Input::get(''messageID'');\r\n			\r\n						\r\n 			$message_delete = Message::where(''id'',''='',$messageId)->first();\r\n 			$message_delete->active = FALSE;\r\n\r\n 			$message_delete = $message_delete->save();\r\n			 \r\n			 if($message_delete)\r\n			 {\r\n				return Redirect::route(''sentmessage-get'')\r\n					->with(''global'',''Success! Message information has been deleted successfully.'');	\r\n			 }	\r\n	}\r\n		\r\n		public function cost($textmessage){\r\n             return ceil(strlen($textmessage)/160)*2;\r\n		}\r\n}\r\n<?php\r\ninclude_once(app_path().''/includes/AfricasTalkingGateway.php'');\r\n\r\n\r\n\r\nclass MessageController extends BaseController {\r\n\r\n	/*\r\n	|--------------------------------------------------------------------------\r\n	| Default Home Controller\r\n	|--------------------------------------------------------------------------\r\n	|\r\n	| You may wish to use controllers instead of, or in addition to, Closure\r\n	| based routes. That''s great! Here is an example controller method to\r\n	| get you started. To route to this controller, just add the route:\r\n	|\r\n	|	Route::get(''/'', ''HomeController@showWelcome'');\r\n	|\r\n	*/\r\n\r\n	public function SendSms($my_recipient,$my_message)\r\n		{\r\n			// Specify your login credentials\r\n			$username   = "adback";\r\n			$apikey     = "c933c719506a6838d4ceac95c9411b27331f34a117ca80473529d967ff9c46b0";\r\n			\r\n			// Specify the numbers that you want to send to in a comma-separated list\r\n			// Please ensure you include the country code (+254 for Kenya in this case)\r\n			$recipients = $my_recipient;\r\n			\r\n			// And of course we want our recipients to know what we really do\r\n			$message    = $my_message;\r\n			\r\n			// Create a new instance of our awesome gateway class\r\n			$gateway    = new AfricasTalkingGateway($username, $apikey);\r\n			\r\n			// Any gateway errors will be captured by our custom Exception class below, \r\n			// so wrap the call in a try-catch block\r\n			try \r\n			{ \r\n			  // Thats it, hit send and we''ll take care of the rest. \r\n			  $results = $gateway->sendMessage($recipients, $message);\r\n			  if($results) {\r\n			    return TRUE;\r\n			  }\r\n			  else {\r\n				  return FALSE;\r\n			  }\r\n			}\r\n			catch ( AfricasTalkingGatewayException $e )\r\n			{\r\n			  return FALSE;\r\n			}\r\n			\r\n			// DONE!!! \r\n		}\r\n	\r\n	public function postSendMessage()\r\n	{\r\n		//verify the user input and create account\r\n		$validator = Validator::make(Input::all(),array(\r\n				''Phone_Number''				=>''required'',\r\n				''Message''				=>''required'',\r\n\r\n		));\r\n		\r\n		if($validator->fails())\r\n		{\r\n			return Redirect::route(''sendmessage-get'')\r\n			->withErrors($validator)\r\n			->withInput();\r\n		}\r\n		else {\r\n			$phonenumbers = Input::get(''Phone_Number'');\r\n			$message = Input::get(''Message'');\r\n			\r\n			\r\n			//remove white spaces from the numbers\r\n			$compressedphonenumbers = str_replace('' '','''', $phonenumbers);\r\n\r\n			//get the specific phone numbers from the array\r\n 			$phonenumbers_array = explode('','', $compressedphonenumbers);\r\n\r\n 			$cost_incurred = sizeof($phonenumbers_array) * $this->cost($message);\r\n\r\n\r\n\r\n 			$owner = Owner::where(''id'',''='',1)->first();\r\n			$ownerid = $owner->owner_id;\r\n\r\n			$balance = DB::select(''select balance from clients.balance where id= ?'', array($ownerid));\r\n			$current_balance = end($balance)->balance;\r\n\r\n			if($cost_incurred<=$current_balance)\r\n			{\r\n\r\n 			$allsent = FALSE;\r\n 			$messagesent = FALSE;\r\n 			$todaysdate 	  = date("Y-m-d");\r\n\r\n\r\n\r\n 			foreach($phonenumbers_array as &$phonenumber)\r\n 			{\r\n			 //register the new user\r\n			 $user		= Message::create(array(\r\n			 				''phone_number''		=>$phonenumber,\r\n			 				''message''		=>$message,\r\n			 				''date''			=>$todaysdate,\r\n			 				''cost''			=>$this->cost($message),\r\n			 				''active''        =>TRUE\r\n			 ));\r\n\r\n			 $phone_number_send = ''+254''.substr($phonenumber, strlen($phonenumber)-9);\r\n\r\n			// $messagesent = $this->SendSms($phone_number_send, $message);\r\n			 \r\n			if($messagesent==TRUE)\r\n			 {\r\n				$allsent = TRUE;\r\n			 }\r\n			 \r\n			}\r\n\r\n			if($allsent==TRUE)\r\n			 {\r\n			 	$newbalance = $current_balance - $cost_incurred;\r\n\r\n			 	return $newbalance;\r\n\r\n			 	$updatebalance = DB::update(''update clients.balance set balance= ? where id= ?'', array($newbalance,$ownerid));\r\n\r\n				return Redirect::route(''sendmessage-get'')\r\n					->with(''global'',''Success! Your message has been sent'');	\r\n			 }\r\n			}\r\n			else\r\n			{\r\n				return Redirect::route(''sendmessage-get'')\r\n					->with(''global'',''Sorry, your current balance is insufficient.'')->withInput();\r\n			}\r\n		}\r\n		\r\n	}\r\n\r\n	public function postSendMessageToAll()\r\n	{\r\n		//verify the user input and create account\r\n		$validator = Validator::make(Input::all(),array(\r\n			''Message''				=>''required'',\r\n\r\n		));\r\n		\r\n		if($validator->fails())\r\n		{\r\n			return Redirect::route(''sendmessagetoall-get'')\r\n			->withErrors($validator)\r\n			->withInput();\r\n		}\r\n		else {\r\n			\r\n			$message = Input::get(''Message'');\r\n\r\n			 \r\n			//get the members information\r\n			$members = Member::where(''active'',''='',TRUE)->get();\r\n\r\n			$cost_incurred = $members->count() * $this->cost($message);\r\n			$owner = Owner::where(''id'',''='',1)->first();\r\n			$ownerid = $owner->owner_id;\r\n\r\n			$balance = DB::select(''select balance from clients.balance where id= ?'', array($ownerid));\r\n			$current_balance = end($balance)->balance;\r\n\r\n			if($cost_incurred<=$current_balance)\r\n			{\r\n			\r\n			$sent = FALSE;\r\n			$todaysdate 	  = date("Y-m-d");\r\n			\r\n			foreach($members as $member){\r\n				 //register the new user\r\n			 $user		= Message::create(array(\r\n			 				''phone_number''		=>$member->phone_number,\r\n			 				''message''			=>$message,\r\n			 				''member_id''			=>$member->id,\r\n			 				''cost''				=>$this->cost($message),\r\n			 				''date''			    =>$todaysdate,\r\n			 				''active''            =>TRUE\r\n			 ));\r\n\r\n\r\n			   $phone_number_send = ''+254''.substr($member->phone_number, strlen($member->phone_number)-9);\r\n			  // $sent = $this->SendSms($phone_number_send, $message);\r\n			}\r\n			\r\n			 \r\n			 if($sent==TRUE)\r\n			 {\r\n				return Redirect::route(''sendmessagetoall-get'')\r\n					->with(''global'',''Success! Your message has been sent'');	\r\n			 }\r\n			}\r\n			else\r\n			{\r\n				return Redirect::route(''sendmessagetoall-get'')\r\n					->with(''global'',''Sorry, your current balance is insufficient.'')->withInput();\r\n			}\r\n			\r\n		}\r\n		\r\n	}\r\n	\r\n	\r\n	public function postDeleteMessage()\r\n	{\r\n		\r\n		\r\n			$messageId  = Input::get(''messageID'');\r\n			\r\n						\r\n 			$message_delete = Message::where(''id'',''='',$messageId)->first();\r\n 			$message_delete->active = FALSE;\r\n\r\n 			$message_delete = $message_delete->save();\r\n			 \r\n			 if($message_delete)\r\n			 {\r\n				return Redirect::route(''sentmessage-get'')\r\n					->with(''global'',''Success! Message information has been deleted successfully.'');	\r\n			 }	\r\n	}\r\n		\r\n		public function cost($textmessage){\r\n             return ceil(strlen($textmessage)/160)*2;\r\n		}\r\n}\r\n<?php\r\ninclude_once(app_path().''/includes/AfricasTalkingGateway.php'');\r\n\r\n\r\n\r\nclass MessageController extends BaseController {\r\n\r\n	/*\r\n	|--------------------------------------------------------------------------\r\n	| Default Home Controller\r\n	|--------------------------------------------------------------------------\r\n	|\r\n	| You may wish to use controllers instead of, or in addition to, Closure\r\n	| based routes. That''s great! Here is an example controller method to\r\n	| get you started. To route to this controller, just add the route:\r\n	|\r\n	|	Route::get(''/'', ''HomeController@showWelcome'');\r\n	|\r\n	*/\r\n\r\n	public function SendSms($my_recipient,$my_message)\r\n		{\r\n			// Specify your login credentials\r\n			$username   = "adback";\r\n			$apikey     = "c933c719506a6838d4ceac95c9411b27331f34a117ca80473529d967ff9c46b0";\r\n			\r\n			// Specify the numbers that you want to send to in a comma-separated list\r\n			// Please ensure you include the country code (+254 for Kenya in this case)\r\n			$recipients = $my_recipient;\r\n			\r\n			// And of course we want our recipients to know what we really do\r\n			$message    = $my_message;\r\n			\r\n			// Create a new instance of our awesome gateway class\r\n			$gateway    = new AfricasTalkingGateway($username, $apikey);\r\n			\r\n			// Any gateway errors will be captured by our custom Exception class below, \r\n			// so wrap the call in a try-catch block\r\n			try \r\n			{ \r\n			  // Thats it, hit send and we''ll take care of the rest. \r\n			  $results = $gateway->sendMessage($recipients, $message);\r\n			  if($results) {\r\n			    return TRUE;\r\n			  }\r\n			  else {\r\n				  return FALSE;\r\n			  }\r\n			}\r\n			catch ( AfricasTalkingGatewayException $e )\r\n			{\r\n			  return FALSE;\r\n			}\r\n			\r\n			// DONE!!! \r\n		}\r\n	\r\n	public function postSendMessage()\r\n	{\r\n		//verify the user input and create account\r\n		$validator = Validator::make(Input::all(),array(\r\n				''Phone_Number''				=>''required'',\r\n				''Message''				=>''required'',\r\n\r\n		));\r\n		\r\n		if($validator->fails())\r\n		{\r\n			return Redirect::route(''sendmessage-get'')\r\n			->withErrors($validator)\r\n			->withInput();\r\n		}\r\n		else {\r\n			$phonenumbers = Input::get(''Phone_Number'');\r\n			$message = Input::get(''Message'');\r\n			\r\n			\r\n			//remove white spaces from the numbers\r\n			$compressedphonenumbers = str_replace('' '','''', $phonenumbers);\r\n\r\n			//get the specific phone numbers from the array\r\n 			$phonenumbers_array = explode('','', $compressedphonenumbers);\r\n\r\n 			$cost_incurred = sizeof($phonenumbers_array) * $this->cost($message);\r\n\r\n\r\n\r\n 			$owner = Owner::where(''id'',''='',1)->first();\r\n			$ownerid = $owner->owner_id;\r\n\r\n			$balance = DB::select(''select balance from clients.balance where id= ?'', array($ownerid));\r\n			$current_balance = end($balance)->balance;\r\n\r\n			if($cost_incurred<=$current_balance)\r\n			{\r\n\r\n 			$allsent = FALSE;\r\n 			$messagesent = FALSE;\r\n 			$todaysdate 	  = date("Y-m-d");\r\n\r\n\r\n\r\n 			foreach($phonenumbers_array as &$phonenumber)\r\n 			{\r\n			 //register the new user\r\n			 $user		= Message::create(array(\r\n			 				''phone_number''		=>$phonenumber,\r\n			 				''message''		=>$message,\r\n			 				''date''			=>$todaysdate,\r\n			 				''cost''			=>$this->cost($message),\r\n			 				''active''        =>TRUE\r\n			 ));\r\n\r\n			 $phone_number_send = ''+254''.substr($phonenumber, strlen($phonenumber)-9);\r\n\r\n			// $messagesent = $this->SendSms($phone_number_send, $message);\r\n			 \r\n			if($messagesent==TRUE)\r\n			 {\r\n				$allsent = TRUE;\r\n			 }\r\n			 \r\n			}\r\n\r\n			if($allsent==TRUE)\r\n			 {\r\n			 	$newbalance = $current_balance - $cost_incurred;\r\n\r\n			 	return $newbalance;\r\n\r\n			 	$updatebalance = DB::update(''update clients.balance set balance= ? where id= ?'', array($newbalance,$ownerid));\r\n\r\n				return Redirect::route(''sendmessage-get'')\r\n					->with(''global'',''Success! Your message has been sent'');	\r\n			 }\r\n			}\r\n			else\r\n			{\r\n				return Redirect::route(''sendmessage-get'')\r\n					->with(''global'',''Sorry, your current balance is insufficient.'')->withInput();\r\n			}\r\n		}\r\n		\r\n	}\r\n\r\n	public function postSendMessageToAll()\r\n	{\r\n		//verify the user input and create account\r\n		$validator = Validator::make(Input::all(),array(\r\n			''Message''				=>''required'',\r\n\r\n		));\r\n		\r\n		if($validator->fails())\r\n		{\r\n			return Redirect::route(''sendmessagetoall-get'')\r\n			->withErrors($validator)\r\n			->withInput();\r\n		}\r\n		else {\r\n			\r\n			$message = Input::get(''Message'');\r\n\r\n			 \r\n			//get the members information\r\n			$members = Member::where(''active'',''='',TRUE)->get();\r\n\r\n			$cost_incurred = $members->count() * $this->cost($message);\r\n			$owner = Owner::where(''id'',''='',1)->first();\r\n			$ownerid = $owner->owner_id;\r\n\r\n			$balance = DB::select(''select balance from clients.balance where id= ?'', array($ownerid));\r\n			$current_balance = end($balance)->balance;\r\n\r\n			if($cost_incurred<=$current_balance)\r\n			{\r\n			\r\n			$sent = FALSE;\r\n			$todaysdate 	  = date("Y-m-d");\r\n			\r\n			foreach($members as $member){\r\n				 //register the new user\r\n			 $user		= Message::create(array(\r\n			 				''phone_number''		=>$member->phone_number,\r\n			 				''message''			=>$message,\r\n			 				''member_id''			=>$member->id,\r\n			 				''cost''				=>$this->cost($message),\r\n			 				''date''			    =>$todaysdate,\r\n			 				''active''            =>TRUE\r\n			 ));\r\n\r\n\r\n			   $phone_number_send = ''+254''.substr($member->phone_number, strlen($member->phone_number)-9);\r\n			  // $sent = $this->SendSms($phone_number_send, $message);\r\n			}\r\n			\r\n			 \r\n			 if($sent==TRUE)\r\n			 {\r\n				return Redirect::route(''sendmessagetoall-get'')\r\n					->with(''global'',''Success! Your message has been sent'');	\r\n			 }\r\n			}\r\n			else\r\n			{\r\n				return Redirect::route(''sendmessagetoall-get'')\r\n					->with(''global'',''Sorry, your current balance is insufficient.'')->withInput();\r\n			}\r\n			\r\n		}\r\n		\r\n	}\r\n	\r\n	\r\n	public function postDeleteMessage()\r\n	{\r\n		\r\n		\r\n			$messageId  = Input::get(''messageID'');\r\n			\r\n						\r\n 			$message_delete = Message::where(''id'',''='',$messageId)->first();\r\n 			$message_delete->active = FALSE;\r\n\r\n 			$message_delete = $message_delete->save();\r\n			 \r\n			 if($message_delete)\r\n			 {\r\n				return Redirect::route(''sentmessage-get'')\r\n					->with(''global'',''Success! Message information has been deleted successfully.'');	\r\n			 }	\r\n	}\r\n		\r\n		public function cost($textmessage){\r\n             return ceil(strlen($textmessage)/160)*2;\r\n		}\r\n}\r\n<?php\r\ninclude_once(app_path().''/includes/AfricasTalkingGateway.php'');\r\n\r\n\r\n\r\nclass MessageController extends BaseController {\r\n\r\n	/*\r\n	|--------------------------------------------------------------------------\r\n	| Default Home Controller\r\n	|--------------------------------------------------------------------------\r\n	|\r\n	| You may wish to use controllers instead of, or in addition to, Closure\r\n	| based routes. That''s great! Here is an example controller method to\r\n	| get you started. To route to this controller, just add the route:\r\n	|\r\n	|	Route::get(''/'', ''HomeController@showWelcome'');\r\n	|\r\n	*/\r\n\r\n	public function SendSms($my_recipient,$my_message)\r\n		{\r\n			// Specify your login credentials\r\n			$username   = "adback";\r\n			$apikey     = "c933c719506a6838d4ceac95c9411b27331f34a117ca80473529d967ff9c46b0";\r\n			\r\n			// Specify the numbers that you want to send to in a comma-separated list\r\n			// Please ensure you include the country code (+254 for Kenya in this case)\r\n			$recipients = $my_recipient;\r\n			\r\n			// And of course we want our recipients to know what we really do\r\n			$message    = $my_message;\r\n			\r\n			// Create a new instance of our awesome gateway class\r\n			$gateway    = new AfricasTalkingGateway($username, $apikey);\r\n			\r\n			// Any gateway errors will be captured by our custom Exception class below, \r\n			// so wrap the call in a try-catch block\r\n			try \r\n			{ \r\n			  // Thats it, hit send and we''ll take care of the rest. \r\n			  $results = $gateway->sendMessage($recipients, $message);\r\n			  if($results) {\r\n			    return TRUE;\r\n			  }\r\n			  else {\r\n				  return FALSE;\r\n			  }\r\n			}\r\n			catch ( AfricasTalkingGatewayException $e )\r\n			{\r\n			  return FALSE;\r\n			}\r\n			\r\n			// DONE!!! \r\n		}\r\n	\r\n	public function postSendMessage()\r\n	{\r\n		//verify the user input and create account\r\n		$validator = Validator::make(Input::all(),array(\r\n				''Phone_Number''				=>''required'',\r\n				''Message''				=>''required'',\r\n\r\n		));\r\n		\r\n		if($validator->fails())\r\n		{\r\n			return Redirect::route(''sendmessage-get'')\r\n			->withErrors($validator)\r\n			->withInput();\r\n		}\r\n		else {\r\n			$phonenumbers = Input::get(''Phone_Number'');\r\n			$message = Input::get(''Message'');\r\n			\r\n			\r\n			//remove white spaces from the numbers\r\n			$compressedphonenumbers = str_replace('' '','''', $phonenumbers);\r\n\r\n			//get the specific phone numbers from the array\r\n 			$phonenumbers_array = explode('','', $compressedphonenumbers);\r\n\r\n 			$cost_incurred = sizeof($phonenumbers_array) * $this->cost($message);\r\n\r\n\r\n\r\n 			$owner = Owner::where(''id'',''='',1)->first();\r\n			$ownerid = $owner->owner_id;\r\n\r\n			$balance = DB::select(''select balance from clients.balance where id= ?'', array($ownerid));\r\n			$current_balance = end($balance)->balance;\r\n\r\n			if($cost_incurred<=$current_balance)\r\n			{\r\n\r\n 			$allsent = FALSE;\r\n 			$messagesent = FALSE;\r\n 			$todaysdate 	  = date("Y-m-d");\r\n\r\n\r\n\r\n 			foreach($phonenumbers_array as &$phonenumber)\r\n 			{\r\n			 //register the new user\r\n			 $user		= Message::create(array(\r\n			 				''phone_number''		=>$phonenumber,\r\n			 				''message''		=>$message,\r\n			 				''date''			=>$todaysdate,\r\n			 				''cost''			=>$this->cost($message),\r\n			 				''active''        =>TRUE\r\n			 ));\r\n\r\n			 $phone_number_send = ''+254''.substr($phonenumber, strlen($phonenumber)-9);\r\n\r\n			// $messagesent = $this->SendSms($phone_number_send, $message);\r\n			 \r\n			if($messagesent==TRUE)\r\n			 {\r\n				$allsent = TRUE;\r\n			 }\r\n			 \r\n			}\r\n\r\n			if($allsent==TRUE)\r\n			 {\r\n			 	$newbalance = $current_balance - $cost_incurred;\r\n\r\n			 	return $newbalance;\r\n\r\n			 	$updatebalance = DB::update(''update clients.balance set balance= ? where id= ?'', array($newbalance,$ownerid));\r\n\r\n				return Redirect::route(''sendmessage-get'')\r\n					->with(''global'',''Success! Your message has been sent'');	\r\n			 }\r\n			}\r\n			else\r\n			{\r\n				return Redirect::route(''sendmessage-get'')\r\n					->with(''global'',''Sorry, your current balance is insufficient.'')->withInput();\r\n			}\r\n		}\r\n		\r\n	}\r\n\r\n	public function postSendMessageToAll()\r\n	{\r\n		//verify the user input and create account\r\n		$validator = Validator::make(Input::all(),array(\r\n			''Message''				=>''required'',\r\n\r\n		));\r\n		\r\n		if($validator->fails())\r\n		{\r\n			return Redirect::route(''sendmessagetoall-get'')\r\n			->withErrors($validator)\r\n			->withInput();\r\n		}\r\n		else {\r\n			\r\n			$message = Input::get(''Message'');\r\n\r\n			 \r\n			//get the members information\r\n			$members = Member::where(''active'',''='',TRUE)->get();\r\n\r\n			$cost_incurred = $members->count() * $this->cost($message);\r\n			$owner = Owner::where(''id'',''='',1)->first();\r\n			$ownerid = $owner->owner_id;\r\n\r\n			$balance = DB::select(''select balance from clients.balance where id= ?'', array($ownerid));\r\n			$current_balance = end($balance)->balance;\r\n\r\n			if($cost_incurred<=$current_balance)\r\n			{\r\n			\r\n			$sent = FALSE;\r\n			$todaysdate 	  = date("Y-m-d");\r\n			\r\n			foreach($members as $member){\r\n				 //register the new user\r\n			 $user		= Message::create(array(\r\n			 				''phone_number''		=>$member->phone_number,\r\n			 				''message''			=>$message,\r\n			 				''member_id''			=>$member->id,\r\n			 				''cost''				=>$this->cost($message),\r\n			 				''date''			    =>$todaysdate,\r\n			 				''active''            =>TRUE\r\n			 ));\r\n\r\n\r\n			   $phone_number_send = ''+254''.substr($member->phone_number, strlen($member->phone_number)-9);\r\n			  // $sent = $this->SendSms($phone_number_send, $message);\r\n			}\r\n			\r\n			 \r\n			 if($sent==TRUE)\r\n			 {\r\n				return Redirect::route(''sendmessagetoall-get'')\r\n					->with(''global'',''Success! Your message has been sent'');	\r\n			 }\r\n			}\r\n			else\r\n			{\r\n				return Redirect::route(''sendmessagetoall-get'')\r\n					->with(''global'',''Sorry, your current balance is insufficient.'')->withInput();\r\n			}\r\n			\r\n		}\r\n		\r\n	}\r\n	\r\n	\r\n	public function postDeleteMessage()\r\n	{\r\n		\r\n		\r\n			$messageId  = Input::get(''messageID'');\r\n			\r\n						\r\n 			$message_delete = Message::where(''id'',''='',$messageId)->first();\r\n 			$message_delete->active = FALSE;\r\n\r\n 			$message_delete = $message_delete->save();\r\n			 \r\n			 if($message_delete)\r\n			 {\r\n				return Redirect::route(''sentmessage-get'')\r\n					->with(''global'',''Success! Message information has been deleted successfully.'');	\r\n			 }	\r\n	}\r\n		\r\n		public function cost($textmessage){\r\n             return ceil(strlen($textmessage)/160)*2;\r\n		}\r\n}\r\n', '468.00', '2014-11-09 06:59:43', '2014-11-16 06:28:02', '44444', '2014-11-09', 0),
(59, 0, 'samlinconn', '2.00', '2014-11-09 07:01:50', '2014-11-09 07:01:50', '0714573774', '2014-11-09', 1),
(60, 0, 'haloo members', '2.00', '2014-11-09 07:02:16', '2014-11-09 07:02:16', '0720069529', '2014-11-09', 1),
(61, 0, 'haloo members', '2.00', '2014-11-09 07:02:16', '2014-11-09 07:02:16', '254714573774', '2014-11-09', 1),
(62, 2, 'haloo coders', '2.00', '2014-11-09 07:03:41', '2014-11-09 07:03:41', '0720069529', '2014-11-09', 1),
(63, 3, 'haloo coders', '2.00', '2014-11-09 07:03:42', '2014-11-09 07:03:42', '0733994848', '2014-11-09', 1),
(64, 2, 'haloo codersc', '2.00', '2014-11-09 07:04:23', '2014-11-09 07:04:23', '0720069529', '2014-11-09', 1),
(65, 3, 'haloo codersc', '2.00', '2014-11-09 07:04:23', '2014-11-09 07:04:23', '0733994848', '2014-11-09', 1),
(66, 2, 'its a sunday', '2.00', '2014-11-09 07:04:45', '2014-11-09 07:04:45', '0720069529', '2014-11-09', 1),
(67, 3, 'its a sunday', '2.00', '2014-11-09 07:04:45', '2014-11-09 07:04:45', '0733994848', '2014-11-09', 1),
(68, 0, 'haloo world', '2.00', '2014-11-10 10:20:05', '2014-11-10 10:20:05', '0704719808', '2014-11-10', 1),
(69, 0, 'max mjinga', '2.00', '2014-11-10 12:00:55', '2014-11-10 12:00:55', '0702973929', '2014-11-10', 1),
(70, 0, 'ss', '2.00', '2014-11-20 12:45:06', '2014-11-27 12:45:04', '0712345678', '2014-11-20', 0),
(71, 2, 'jh', '2.00', '2014-11-20 12:45:32', '2014-11-27 12:44:58', '0720069529', '2014-11-20', 0),
(72, 0, 'hjgh', '2.00', '2014-11-20 12:56:27', '2014-11-27 12:44:51', '0712345678', '2014-11-20', 0),
(73, 0, 'haloo', '2.00', '2014-11-29 12:11:25', '2014-11-29 12:11:25', '0714573774', '2014-11-29', 1),
(74, 0, 'Send Sms notifications to your county members on various developments taking places within the county and other important notices using our branded bulk SMS platform. Contact Us on 0714573774 or email to sms@ventilab.com for more information. Hope to hear from you soon.', '4.00', '2014-11-29 12:20:16', '2014-11-29 12:20:16', '0715473350', '2014-11-29', 1),
(75, 0, 'haloo', '2.00', '2014-12-01 06:02:56', '2014-12-01 06:02:56', '0714573774', '2014-12-01', 1),
(76, 0, 'ghh', '2.00', '2014-12-01 12:51:17', '2014-12-03 17:52:15', '0712345678', '2014-12-01', 0),
(77, 2, 'Haloo ushers', '2.00', '2014-12-10 05:14:11', '2014-12-10 05:14:11', '0720069529', '2014-12-10', 1),
(78, 7, 'Haloo ushers', '2.00', '2014-12-10 05:14:14', '2014-12-10 05:14:14', '0714573774', '2014-12-10', 1);

-- --------------------------------------------------------

--
-- Table structure for table `migrations`
--

CREATE TABLE IF NOT EXISTS `migrations` (
  `migration` varchar(255) COLLATE utf8_unicode_ci NOT NULL,
  `batch` int(11) NOT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8 COLLATE=utf8_unicode_ci;

--
-- Dumping data for table `migrations`
--

INSERT INTO `migrations` (`migration`, `batch`) VALUES
('2014_10_19_084538_create_users_table', 1),
('2014_10_19_085641_create_members_table', 1),
('2014_10_19_091042_create_messages_table', 1),
('2014_10_19_144501_create_transactions_table', 1),
('2014_10_19_144746_create_credits_table', 1);

-- --------------------------------------------------------

--
-- Table structure for table `owners`
--

CREATE TABLE IF NOT EXISTS `owners` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `owner_id` int(11) NOT NULL,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB  DEFAULT CHARSET=latin1 AUTO_INCREMENT=2 ;

--
-- Dumping data for table `owners`
--

INSERT INTO `owners` (`id`, `owner_id`) VALUES
(1, 1);

-- --------------------------------------------------------

--
-- Table structure for table `users`
--

CREATE TABLE IF NOT EXISTS `users` (
  `id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `email` varchar(60) COLLATE utf8_unicode_ci DEFAULT NULL,
  `phone_number` varchar(10) COLLATE utf8_unicode_ci NOT NULL,
  `password` varchar(60) COLLATE utf8_unicode_ci NOT NULL,
  `password_temp` varchar(60) COLLATE utf8_unicode_ci NOT NULL,
  `code` varchar(60) COLLATE utf8_unicode_ci NOT NULL,
  `firstname` varchar(60) COLLATE utf8_unicode_ci NOT NULL,
  `lastname` varchar(60) COLLATE utf8_unicode_ci NOT NULL,
  `national_id` varchar(8) COLLATE utf8_unicode_ci DEFAULT NULL,
  `activate` tinyint(1) NOT NULL,
  `remember_token` varchar(60) COLLATE utf8_unicode_ci NOT NULL,
  `created_at` timestamp NOT NULL DEFAULT '0000-00-00 00:00:00',
  `updated_at` timestamp NOT NULL DEFAULT '0000-00-00 00:00:00',
  `admin` tinyint(1) NOT NULL,
  PRIMARY KEY (`id`),
  UNIQUE KEY `users_phone_number_unique` (`phone_number`),
  UNIQUE KEY `users_national_id_unique` (`national_id`)
) ENGINE=InnoDB  DEFAULT CHARSET=utf8 COLLATE=utf8_unicode_ci AUTO_INCREMENT=3 ;

--
-- Dumping data for table `users`
--

INSERT INTO `users` (`id`, `email`, `phone_number`, `password`, `password_temp`, `code`, `firstname`, `lastname`, `national_id`, `activate`, `remember_token`, `created_at`, `updated_at`, `admin`) VALUES
(1, 'samlinncon@gmail.com', '0714573774', '$2y$10$CjF7y6hCzQhaKgtX6uu8NOtsir/hxbysYs0QooAhEhYWNZNxzNhAS', '', 'xIiIXPxuQmKsWb6QjkP74hlaXu51WR0xB40YmltsdL9jFGu62tKodMJQYLSV', 'samuel', 'nyaga', '29704492', 1, 'yfiAKvsDHxxc3006hCBqE0sXDmwWj77QUeHvC1oYFfHAd50WGOpiCARnmhzg', '0000-00-00 00:00:00', '2014-12-10 05:17:43', 1),
(2, 'fran@gmail.com', '0712345680', '$2y$10$wVfKxToWwgAO24/S5CXCFeoek/Om1Db6qFi.PsvM09gtCGD9Hp3TG', '', '', 'Francis', 'Githae', '29703350', 1, '', '2014-11-16 09:21:42', '2014-11-16 09:59:53', 0);

/*!40101 SET CHARACTER_SET_CLIENT=@OLD_CHARACTER_SET_CLIENT */;
/*!40101 SET CHARACTER_SET_RESULTS=@OLD_CHARACTER_SET_RESULTS */;
/*!40101 SET COLLATION_CONNECTION=@OLD_COLLATION_CONNECTION */;
